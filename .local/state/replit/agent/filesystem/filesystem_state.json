{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nTicketFlow Pro is a modern, full-stack ticket management system built with React and Node.js. It provides a comprehensive dashboard for tracking support tickets, managing team members, and analyzing performance metrics. The application features a clean, responsive interface with real-time data visualization, efficient ticket workflow management, and advanced enterprise features including workflow approvals, custom forms, and SLA management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nLanguage: Sistema completo traduzido para português brasileiro (interface, formulários, dados de exemplo).\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Build Tool**: Vite for fast development and optimized production builds\n- **State Management**: Redux Toolkit for global state and TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: TailwindCSS with CSS variables for theme customization and responsive design\n- **Charts**: Recharts for data visualization and analytics dashboards\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **API Design**: RESTful endpoints with consistent error handling and request logging\n- **Development**: Hot reload with Vite middleware integration\n- **Storage**: In-memory storage implementation (MemStorage) for development with interface for easy database integration\n\n## Data Layer\n- **Database**: PostgreSQL with Drizzle schema definitions\n- **Schema**: Well-structured tables for users, tickets, comments, and attachments with proper foreign key relationships\n- **Validation**: Zod schemas for runtime type checking and validation\n- **Migrations**: Drizzle Kit for database schema migrations\n\n## Authentication & Authorization\n- **User Management**: Role-based access control (admin/user roles)\n- **Session Management**: Session-based authentication with PostgreSQL session store\n\n## Component Architecture\n- **Layout System**: Consistent layout with sidebar navigation and top bar\n- **Form Management**: React Hook Form with Zod resolvers for validation\n- **Modal System**: Reusable modal components for ticket creation and editing\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n- **Advanced Workflow**: Approval system with sequential workflow management\n- **Custom Forms**: Dynamic form builder with configurable fields\n- **Category Management**: Hierarchical categories with SLA configuration\n\n# External Dependencies\n\n## Core Frontend Libraries\n- **React Ecosystem**: React 18, React DOM, React Hook Form\n- **State Management**: Redux Toolkit, TanStack React Query\n- **UI Framework**: Radix UI components, Lucide React icons\n- **Styling**: TailwindCSS, class-variance-authority, clsx for conditional classes\n- **Charts**: Recharts for data visualization\n- **Animation**: Framer Motion for smooth UI transitions\n\n## Backend Dependencies\n- **Server**: Express.js with middleware for JSON parsing and CORS\n- **Database**: Drizzle ORM, @neondatabase/serverless for PostgreSQL connection\n- **Session Store**: connect-pg-simple for PostgreSQL session management\n- **Utilities**: date-fns for date manipulation, nanoid for ID generation\n\n## Development Tools\n- **Build**: Vite with React plugin and TypeScript support\n- **Database**: Drizzle Kit for migrations and schema management\n- **Code Quality**: TypeScript for static type checking\n- **Development**: tsx for running TypeScript files, Replit development plugins\n\n## UI Component System\n- **Design System**: shadcn/ui components built on Radix UI primitives\n- **Icons**: Lucide React icon library\n- **Theming**: CSS custom properties for consistent color schemes\n- **Typography**: Inter font family from Google Fonts\n\n# Recent Changes (Janeiro 2025)\n\n## Sistema de Hierarquia e Permissões Implementado (11/01/2025)\n- ✓ Sistema completo de 3 hierarquias: Colaborador → Supervisor → Administrador\n- ✓ Controle granular de permissões baseado em roles e departamentos\n- ✓ Middleware de proteção de rotas no backend com filtragem automática de tickets\n- ✓ Componentes de proteção no frontend (PermissionGuard, AdminOnly, SupervisorOnly)\n- ✓ Interface de configuração de permissões para administradores\n- ✓ Sistema de filtragem de tickets baseado na hierarquia do usuário\n- ✓ Demonstração funcional das hierarquias em /hierarchy-demo\n- ✓ Proteção de rotas administrativas (departamentos, usuários, configurações)\n\n### Regras de Hierarquia Implementadas:\n- **Colaborador**: Vê apenas seus próprios tickets, pode criar tickets\n- **Supervisor**: Gerencia usuários e tickets do próprio departamento, acesso a relatórios departamentais\n- **Administrador**: Acesso total ao sistema, gerencia todos os departamentos e usuários\n\n### Proteções de Rota:\n- `/departments` - Apenas administradores\n- `/permissions` - Apenas administradores  \n- `/users` - Supervisores e administradores\n- `/analytics`, `/reports` - Supervisores e administradores\n- `/categories`, `/forms`, `/fields` - Supervisores e administradores\n\n# Recent Changes (August 2025)\n\n## Identidade Visual OPUS e Sistema de Hierarquias Corrigido (11/08/2025)\n- ✓ Avatar com gradiente OPUS aplicado em todos os cartões de usuário (from-[#2c4257] to-[#6b8fb0])\n- ✓ Sistema de hierarquias corrigido para usar valores corretos: 'administrador', 'supervisor', 'colaborador'\n- ✓ Mapeamento de cores e nomes das hierarquias atualizado em todos os componentes\n- ✓ Interface de usuários simplificada: removidos botões \"Ligar\" e \"Email\", mantidos apenas visualizar (olho) e menu (três pontos)  \n- ✓ Menu dropdown implementado com opções \"Editar usuário\" e \"Deletar usuário\" com confirmação\n- ✓ Dados de exemplo atualizados para refletir as hierarquias corretas do sistema\n- ✓ Acesso à página de configuração de hierarquias disponível em /hierarchy (apenas administradores)\n\n# Recent Changes (August 2025)\n\n## Identidade Visual Grupo OPUS (Janeiro 2025)\n- ✓ Logo do Grupo OPUS implementada na barra superior (header)\n- ✓ Identidade visual aplicada com cores azul escuro (#2c4257) e azul claro (#6b8fb0)\n- ✓ Paleta de cores CSS personalizada para refletir a marca OPUS\n- ✓ Sistema de cores primárias e secundárias alinhado à identidade da empresa\n- ✓ Logo posicionada sozinha no topo, sidebar mantém \"TicketFlow Pro\" original\n\n## Migração do Replit Agent Concluída (Janeiro 2025)\n- ✓ Sistema migrado com sucesso do Replit Agent para ambiente Replit padrão\n- ✓ Banco PostgreSQL configurado e migrações executadas\n- ✓ Todas as dependências instaladas (tsx, etc.)\n- ✓ Barras de SLA corrigidas para mostrar progresso real baseado no tempo de criação do ticket\n- ✓ Servidor funcionando corretamente na porta 5000\n- ✓ Interface de usuário carregando sem erros\n\n## Three-Tier User Hierarchy System (NEW)\n- **User Hierarchy**: Implemented colaborador → supervisor → administrador system replacing simple admin/user roles\n- **Role-Based Access**: Each hierarchy level has specific permissions and access controls\n- **Demo Data**: Updated with users representing all three hierarchy levels for testing\n\n## Department-Based Access Control System \n- **Multi-Department Support**: Added department/workgroup system for sector isolation\n- **Database Schema**: Enhanced with departments table and user/ticket department associations\n- **Access Control**: Each department can only see their own tickets and users\n\n## Functional Report Filters System (NEW)\n- **Real-Time Filtering**: All reports now connect to PostgreSQL with functional filters\n- **Advanced Analytics**: Department performance, user performance, and resolution time analysis\n- **Dynamic Data**: Charts and tables update automatically based on filter selections\n- **Comprehensive APIs**: Backend endpoints supporting date ranges, department, priority, and status filtering\n- **Professional Reports**: 7 specialized reports focused on SLA, aging, satisfaction, and performance analytics\n\n## Dashboard-to-Tickets Navigation System (NEW - Jan 2025)\n- **Clickable Dashboard Cards**: All StatsCard components now navigate to filtered ticket views\n- **Smart URL Filtering**: KanbanBoard accepts URL parameters to automatically apply filters\n- **Team & Department Navigation**: Performance metrics link to user-specific and department-specific ticket views\n- **Seamless User Experience**: Dashboard analytics now directly connect to relevant ticket management pages\n\n## Enterprise Features Completed\n- **Advanced Reporting**: 8 comprehensive analysis tabs including SLA monitoring, aging analysis, daily volume tracking\n- **SLA Management**: Complete SLA compliance tracking with risk alerts and priority-based timelines\n- **Ticket Aging Analysis**: Visual breakdown of ticket age distribution and backlog management\n- **Daily Volume Reports**: Comprehensive analysis of ticket volume patterns and resolution rates  \n- **Satisfaction Tracking**: Customer feedback analysis with rating distribution and comment highlights\n- **Trend Analysis**: Fixed ticket trends visualization with distributed historical data\n- **Categories Management**: Complete category and subcategory system with SLA configuration\n- **Ticket Forms**: Custom form builder for different ticket types and contexts  \n- **Custom Fields**: Configurable field system with multiple input types\n- **Workflow Approvals**: Sequential approval system with status tracking\n\n## Technical Improvements\n- **Database Migration**: PostgreSQL integration with proper schema design\n- **Fixed Trend Charts**: Resolved data distribution issues for realistic visualizations\n- **Enhanced Routing**: Added new pages to routing system with proper navigation\n- **UI Components**: Implemented enterprise-level interfaces matching reference design\n- **Performance**: Optimized data queries and chart rendering\n- **SLA Configuration**: Added comprehensive SLA management page with CRUD operations\n- **Ticket Deletion**: Implemented admin-only ticket deletion with cascade operations for comments and attachments\n- **SelectItem Validation**: Fixed React Select validation errors for empty values\n\n## Replit Migration (January 2025)\n- **Environment Setup**: Successfully migrated from Replit Agent to Replit environment\n- **Database Configuration**: PostgreSQL database provisioned and configured with proper schema\n- **SLA Progress Bar**: Fixed to calculate real-time progress based on elapsed time since ticket creation\n- **Timestamp Issues**: Resolved database timestamp conflicts in status/priority config updates\n- **Portuguese Translation**: Changed \"Ticket\" to \"Chamado\" for better localization\n- **Real-time SLA Tracking**: Progress bars now reflect actual time elapsed vs. SLA deadlines with proper color coding\n- **SLA Configuration Integration**: SLA calculations now pull from admin-configured priority settings instead of hardcoded values\n- **Badge Translation Fix**: Status and priority badges now display Portuguese names from configuration instead of English database values\n- **Dynamic Color System**: All status and priority colors now reflect admin configurations across Kanban, modals, and tables\n- **SLA Hierarchy Implementation**: SLA calculations follow proper hierarchy: SLA Rules → Priority Config → 24h fallback","size_bytes":11573},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        error: {\n          DEFAULT: \"var(--error)\",\n          foreground: \"var(--error-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3114},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/README_1754594591059.md":{"content":"# React\n\nA modern React-based project utilizing the latest frontend technologies and tools for building responsive web applications.\n\n## 🚀 Features\n\n- **React 18** - React version with improved rendering and concurrent features\n- **Vite** - Lightning-fast build tool and development server\n- **Redux Toolkit** - State management with simplified Redux setup\n- **TailwindCSS** - Utility-first CSS framework with extensive customization\n- **React Router v6** - Declarative routing for React applications\n- **Data Visualization** - Integrated D3.js and Recharts for powerful data visualization\n- **Form Management** - React Hook Form for efficient form handling\n- **Animation** - Framer Motion for smooth UI animations\n- **Testing** - Jest and React Testing Library setup\n\n## 📋 Prerequisites\n\n- Node.js (v14.x or higher)\n- npm or yarn\n\n## 🛠️ Installation\n\n1. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n   \n2. Start the development server:\n   ```bash\n   npm start\n   # or\n   yarn start\n   ```\n\n## 📁 Project Structure\n\n```\nreact_app/\n├── public/             # Static assets\n├── src/\n│   ├── components/     # Reusable UI components\n│   ├── pages/          # Page components\n│   ├── styles/         # Global styles and Tailwind configuration\n│   ├── App.jsx         # Main application component\n│   ├── Routes.jsx      # Application routes\n│   └── index.jsx       # Application entry point\n├── .env                # Environment variables\n├── index.html          # HTML template\n├── package.json        # Project dependencies and scripts\n├── tailwind.config.js  # Tailwind CSS configuration\n└── vite.config.js      # Vite configuration\n```\n\n## 🧩 Adding Routes\n\nTo add new routes to the application, update the `Routes.jsx` file:\n\n```jsx\nimport { useRoutes } from \"react-router-dom\";\nimport HomePage from \"pages/HomePage\";\nimport AboutPage from \"pages/AboutPage\";\n\nconst ProjectRoutes = () => {\n  let element = useRoutes([\n    { path: \"/\", element: <HomePage /> },\n    { path: \"/about\", element: <AboutPage /> },\n    // Add more routes as needed\n  ]);\n\n  return element;\n};\n```\n\n## 🎨 Styling\n\nThis project uses Tailwind CSS for styling. The configuration includes:\n\n- Forms plugin for form styling\n- Typography plugin for text styling\n- Aspect ratio plugin for responsive elements\n- Container queries for component-specific responsive design\n- Fluid typography for responsive text\n- Animation utilities\n\n## 📱 Responsive Design\n\nThe app is built with responsive design using Tailwind CSS breakpoints.\n\n\n## 📦 Deployment\n\nBuild the application for production:\n\n```bash\nnpm run build\n```\n\n## 🙏 Acknowledgments\n\n- Built with [Rocket.new](https://rocket.new)\n- Powered by React and Vite\n- Styled with Tailwind CSS\n\nBuilt with ❤️ on Rocket.new\n","size_bytes":2887},"attached_assets/postcss.config_1754594591058.js":{"content":"module.exports = {\n  plugins: {\n    \"tailwindcss/nesting\": {},\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":114},"attached_assets/tailwind.config_1754594591060.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{js,jsx}',\n    './components/**/*.{js,jsx}',\n    './app/**/*.{js,jsx}',\n    './src/**/*.{js,jsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"var(--color-border)\", // slate-200\n        input: \"var(--color-input)\", // white\n        ring: \"var(--color-ring)\", // blue-600\n        background: \"var(--color-background)\", // gray-50\n        foreground: \"var(--color-foreground)\", // slate-800\n        primary: {\n          DEFAULT: \"var(--color-primary)\", // blue-600\n          foreground: \"var(--color-primary-foreground)\", // white\n        },\n        secondary: {\n          DEFAULT: \"var(--color-secondary)\", // slate-500\n          foreground: \"var(--color-secondary-foreground)\", // white\n        },\n        destructive: {\n          DEFAULT: \"var(--color-destructive)\", // red-600\n          foreground: \"var(--color-destructive-foreground)\", // white\n        },\n        muted: {\n          DEFAULT: \"var(--color-muted)\", // slate-100\n          foreground: \"var(--color-muted-foreground)\", // slate-500\n        },\n        accent: {\n          DEFAULT: \"var(--color-accent)\", // amber-500\n          foreground: \"var(--color-accent-foreground)\", // white\n        },\n        popover: {\n          DEFAULT: \"var(--color-popover)\", // white\n          foreground: \"var(--color-popover-foreground)\", // slate-800\n        },\n        card: {\n          DEFAULT: \"var(--color-card)\", // white\n          foreground: \"var(--color-card-foreground)\", // slate-800\n        },\n        success: {\n          DEFAULT: \"var(--color-success)\", // emerald-600\n          foreground: \"var(--color-success-foreground)\", // white\n        },\n        warning: {\n          DEFAULT: \"var(--color-warning)\", // amber-600\n          foreground: \"var(--color-warning-foreground)\", // white\n        },\n        error: {\n          DEFAULT: \"var(--color-error)\", // red-600\n          foreground: \"var(--color-error-foreground)\", // white\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        mono: ['JetBrains Mono', 'monospace'],\n      },\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1rem' }],\n        'sm': ['0.875rem', { lineHeight: '1.25rem' }],\n        'base': ['1rem', { lineHeight: '1.5rem' }],\n        'lg': ['1.125rem', { lineHeight: '1.75rem' }],\n        'xl': ['1.25rem', { lineHeight: '1.75rem' }],\n        '2xl': ['1.5rem', { lineHeight: '2rem' }],\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n        '240': '60rem',\n      },\n      boxShadow: {\n        'enterprise': '0 1px 3px rgba(0, 0, 0, 0.1)',\n        'enterprise-lg': '0 4px 12px rgba(0, 0, 0, 0.15)',\n      },\n      animation: {\n        'pulse-slow': 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n        'fade-in': 'fadeIn 200ms ease-out',\n        'slide-in': 'slideIn 300ms ease-in-out',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideIn: {\n          '0%': { transform: 'translateX(-100%)' },\n          '100%': { transform: 'translateX(0)' },\n        },\n      },\n      transitionDuration: {\n        '200': '200ms',\n        '300': '300ms',\n      },\n      transitionTimingFunction: {\n        'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',\n        'ease-in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}","size_bytes":3887},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport authRoutes from \"./routes/auth\";\nimport { verifyToken, requireAdmin, requireSupervisor, filterByHierarchy } from \"./middleware/authMiddleware\";\nimport { \n  requireRole, \n  requirePermission, \n  filterTicketsByHierarchy, \n  mockAuth,\n  AuthenticatedRequest \n} from \"./middleware/permissionMiddleware\";\nimport permissionsRoutes from \"./routes/permissions\";\nimport { departmentStorage } from \"./departmentStorage\";\nimport { insertDepartmentSchema, insertCategorySchema, insertCustomFieldSchema } from \"@shared/schema\";\nimport { insertTicketSchema, insertCommentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst updateTicketSchema = insertTicketSchema.partial();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Authentication routes\n  app.use(\"/api/auth\", authRoutes);\n  \n  // Aplicar middleware de autenticação simulada em todas as rotas (temporário)\n  app.use(mockAuth);\n  \n  // Registrar rotas de permissões\n  app.use(permissionsRoutes);\n  // Dashboard stats with filters\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const filters = {\n        dateFilter: req.query.dateFilter as string,\n        priority: req.query.priority as string,\n        department: req.query.department as string\n      };\n      const stats = await storage.getDashboardStats(filters);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/priority-stats\", async (req, res) => {\n    try {\n      const filters = {\n        dateFilter: req.query.dateFilter as string,\n        priority: req.query.priority as string,\n        department: req.query.department as string\n      };\n      const stats = await storage.getPriorityStats(filters);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch priority stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/trends\", async (req, res) => {\n    try {\n      const days = parseInt(req.query.days as string) || 7;\n      const filters = {\n        dateFilter: req.query.dateFilter as string,\n        priority: req.query.priority as string,\n        department: req.query.department as string\n      };\n      const trends = await storage.getTrendData(days, filters);\n      res.json(trends);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trend data\" });\n    }\n  });\n\n  // Tickets with hierarchy filtering\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const authReq = req as AuthenticatedRequest;\n      const user = authReq.user;\n      \n      let filters: any = {\n        createdBy: req.query.createdBy as string,\n        departmentId: req.query.departmentId as string\n      };\n\n      // Apply hierarchy-based filtering\n      if (user) {\n        const userHierarchy = user.hierarchy || user.role;\n        const userId = user.userId || user.id;\n        \n        if (userHierarchy === 'colaborador') {\n          // Colaboradores veem seus próprios tickets + tickets não atribuídos do departamento\n          const userRecord = await storage.getUser(userId);\n          if (userRecord?.departmentId) {\n            filters.colaboradorFilter = {\n              userId: userId,\n              departmentId: userRecord.departmentId\n            };\n          } else {\n            // Se não tem departamento, só vê próprios tickets\n            filters.createdBy = userId;\n          }\n        } else if (userHierarchy === 'supervisor') {\n          // Supervisores veem tickets do seu departamento inteiro\n          const userRecord = await storage.getUser(userId);\n          if (userRecord?.departmentId) {\n            filters.departmentId = userRecord.departmentId;\n            // Remove filtro do criador para ver todos do departamento\n            delete filters.createdBy;\n          }\n        }\n        // Administradores veem todos os tickets (sem filtros adicionais)\n      }\n      \n      const tickets = await storage.getAllTickets(filters);\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.get(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const ticket = await storage.getTicket(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ticket\" });\n    }\n  });\n\n  app.post(\"/api/tickets\", async (req, res) => {\n    try {\n      console.log(\"Request body:\", req.body);\n      \n      // Pegar usuário atual simulado (em produção viria da sessão)\n      const users = await storage.getAllUsers();\n      const currentUser = users.find(u => u.role === 'admin') || users[0];\n      \n      if (!currentUser) {\n        return res.status(400).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      // Adicionar createdBy automaticamente e converter prioridade\n      const ticketData = {\n        ...req.body,\n        createdBy: currentUser.id,\n        requesterDepartmentId: req.body.requesterDepartment || currentUser.departmentId || null,\n        responsibleDepartmentId: req.body.responsibleDepartment || null,\n        priority: req.body.priority === 'Baixa' ? 'low' : \n                  req.body.priority === 'Média' ? 'medium' :\n                  req.body.priority === 'Alta' ? 'high' :\n                  req.body.priority === 'Crítica' ? 'critical' : 'medium'\n      };\n      \n      const validatedData = insertTicketSchema.parse(ticketData);\n      console.log(\"Validated data:\", validatedData);\n      const ticket = await storage.createTicket(validatedData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error(\"Error creating ticket:\", error);\n      if (error instanceof z.ZodError) {\n        console.error(\"Validation errors:\", error.errors);\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create ticket\" });\n    }\n  });\n\n  app.patch(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const validatedData = updateTicketSchema.parse(req.body);\n      const ticket = await storage.updateTicket(req.params.id, validatedData);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to update ticket\" });\n    }\n  });\n\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTicket(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete ticket\" });\n    }\n  });\n\n  // Endpoint específico para finalizar tickets\n  app.patch(\"/api/tickets/:id/finalize\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, finalizationData, progress } = req.body;\n      \n      // Atualizar o ticket com status resolvido e dados de finalização\n      const updateData = {\n        status: status || 'Resolvido',\n        progress: progress || 100,\n        // Salvar dados de finalização nos metadados ou campos específicos\n        finalizationComment: finalizationData?.comment,\n        hoursSpent: finalizationData?.hoursSpent,\n        equipmentRemoved: finalizationData?.equipmentRemoved,\n        materialsUsed: finalizationData?.materialsUsed,\n        extraCharge: finalizationData?.extraCharge,\n        chargeType: finalizationData?.chargeType,\n        finalizedAt: new Date().toISOString()\n      };\n      \n      const ticket = await storage.updateTicket(id, updateData);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      res.json({ success: true, ticket });\n    } catch (error) {\n      console.error(\"Error finalizing ticket:\", error);\n      res.status(500).json({ message: \"Failed to finalize ticket\" });\n    }\n  });\n\n  // Comments\n  app.get(\"/api/tickets/:ticketId/comments\", async (req, res) => {\n    try {\n      const comments = await storage.getCommentsByTicket(req.params.ticketId);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/tickets/:ticketId/comments\", async (req, res) => {\n    try {\n      const validatedData = insertCommentSchema.parse({\n        ...req.body,\n        ticketId: req.params.ticketId,\n      });\n      const comment = await storage.createComment(validatedData);\n      res.status(201).json(comment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Users\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({ \n        id: user.id, \n        name: user.name, \n        email: user.email, \n        role: user.role,\n        hierarchy: user.hierarchy,\n        departmentId: user.departmentId,\n        isBlocked: user.isBlocked,\n        isActive: user.isActive\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get all roles with user counts\n  app.get('/api/roles', async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error('Error getting roles:', error);\n      res.status(500).json({ message: 'Failed to get roles' });\n    }\n  });\n\n  // Change user password endpoint (Admin only)\n  app.put(\"/api/users/:id/change-password\", requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { password } = req.body;\n      \n      if (!password || password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n      \n      const success = await storage.changeUserPassword(id, password);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Block/Unblock user endpoint (Admin only)\n  app.put(\"/api/users/:id/block\", requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { block } = req.body;\n      \n      const success = await storage.blockUser(id, block);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const action = block ? \"blocked\" : \"unblocked\";\n      res.json({ message: `User ${action} successfully` });\n    } catch (error) {\n      console.error(\"Error blocking/unblocking user:\", error);\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n\n  // Delete user endpoint (Admin only)\n  app.delete(\"/api/users/:id\", requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const success = await storage.deleteUser(id);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({\n        id: user.id, \n        name: user.name, \n        email: user.email, \n        role: user.role,\n        hierarchy: user.hierarchy,\n        departmentId: user.departmentId,\n        isBlocked: user.isBlocked,\n        isActive: user.isActive\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = {\n        ...req.body,\n        username: req.body.email.split('@')[0]\n      };\n      \n      const validatedData = insertUserSchema.parse(userData);\n      const user = await storage.createUser(validatedData);\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Update user - endpoint completo para edição de perfil\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      console.log('Updating user:', id, updateData);\n      \n      // Verificar se o usuário existe\n      const existingUser = await storage.getUser(id);\n      if (!existingUser) {\n        console.log(`User with id ${id} not found`);\n        return res.status(404).json({ message: `User with id ${id} not found` });\n      }\n\n      const updatedUser = await storage.updateUser(id, updateData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Error updating user\" });\n    }\n  });\n\n  // Get user performance data\n  app.get(\"/api/users/:id/performance\", async (req, res) => {\n    try {\n      const performance = await storage.getUserPerformance(req.params.id);\n      res.json(performance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user performance\" });\n    }\n  });\n\n  // Get user activity logs\n  app.get(\"/api/users/:id/activities\", async (req, res) => {\n    try {\n      const activities = await storage.getUserActivities(req.params.id);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user activities\" });\n    }\n  });\n\n  // Get user permissions based on role\n  app.get(\"/api/users/:id/permissions\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const permissions = await storage.getRolePermissions(user.role);\n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user permissions\" });\n    }\n  });\n\n  // PATCH user security - permitir acesso temporário\n  app.patch(\"/api/users/:id/security\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { newPassword, forcePasswordChange } = req.body;\n\n      // Validate password\n      if (!newPassword || newPassword.length < 6) {\n        return res.status(400).json({\n          message: \"A senha deve ter pelo menos 6 caracteres\"\n        });\n      }\n\n      // Get user to verify existence\n      const existingUser = await storage.getUser(id);\n      if (!existingUser) {\n        return res.status(404).json({\n          message: \"Usuário não encontrado\"\n        });\n      }\n\n      // Hash the new password (in a real app, use bcrypt)\n      const hashedPassword = `hashed_${newPassword}`;\n\n      // Update user security settings\n      const securityUpdate = {\n        password: hashedPassword,\n        forcePasswordChange: forcePasswordChange || false,\n        passwordChangedAt: new Date().toISOString(),\n        passwordChangedBy: 'admin' // In real app, get from auth middleware\n      };\n\n      const updatedUser = await storage.updateUser(id, securityUpdate);\n      \n      res.json({\n        message: \"Configurações de segurança atualizadas com sucesso\",\n        user: {\n          id: updatedUser.id,\n          name: updatedUser.name,\n          email: updatedUser.email,\n          passwordChangedAt: securityUpdate.passwordChangedAt\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating user security:\", error);\n      res.status(500).json({\n        message: \"Erro interno do servidor\"\n      });\n    }\n  });\n\n  // PATCH user block/unblock status - permitir acesso temporário  \n  app.patch(\"/api/users/:id/block\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isBlocked } = req.body;\n\n      // Get user to verify existence\n      const existingUser = await storage.getUser(id);\n      if (!existingUser) {\n        return res.status(404).json({\n          message: \"Usuário não encontrado\"\n        });\n      }\n\n      // Update user block status\n      const blockUpdate = {\n        isBlocked: isBlocked,\n        isActive: !isBlocked, // Se bloqueado, não está ativo\n        blockedAt: isBlocked ? new Date().toISOString() : null,\n        blockedBy: isBlocked ? 'admin' : null, // In real app, get from auth middleware\n        updatedAt: new Date().toISOString()\n      };\n\n      const updatedUser = await storage.updateUser(id, blockUpdate);\n      \n      res.json({\n        message: `Usuário ${isBlocked ? 'bloqueado' : 'desbloqueado'} com sucesso`,\n        user: {\n          id: updatedUser.id,\n          name: updatedUser.name,\n          email: updatedUser.email,\n          isBlocked: updatedUser.isBlocked,\n          isActive: updatedUser.isActive\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating user block status:\", error);\n      res.status(500).json({\n        message: \"Erro interno do servidor\"\n      });\n    }\n  });\n\n  // Department routes - permitir acesso sem restrição por enquanto\n  app.get(\"/api/departments\", async (req, res) => {\n    try {\n      const departments = await departmentStorage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Error fetching departments:\", error);\n      res.status(500).json({ message: \"Failed to fetch departments\" });\n    }\n  });\n\n  app.get(\"/api/departments/:id\", async (req, res) => {\n    try {\n      const department = await departmentStorage.getDepartment(req.params.id);\n      if (!department) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.json(department);\n    } catch (error) {\n      console.error(\"Error fetching department:\", error);\n      res.status(500).json({ message: \"Failed to fetch department\" });\n    }\n  });\n\n  app.post(\"/api/departments\", \n    requireRole(\"administrador\"),\n    async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.parse(req.body);\n      const department = await departmentStorage.createDepartment(validatedData);\n      res.status(201).json(department);\n    } catch (error) {\n      console.error(\"Error creating department:\", error);\n      res.status(400).json({ message: \"Failed to create department\" });\n    }\n  });\n\n  app.put(\"/api/departments/:id\", \n    requireRole(\"administrador\"),\n    async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.partial().parse(req.body);\n      const department = await departmentStorage.updateDepartment(req.params.id, validatedData);\n      if (!department) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.json(department);\n    } catch (error) {\n      console.error(\"Error updating department:\", error);\n      res.status(400).json({ message: \"Failed to update department\" });\n    }\n  });\n\n  app.delete(\"/api/departments/:id\", \n    requireRole(\"administrador\"),\n    async (req, res) => {\n    try {\n      const success = await departmentStorage.deleteDepartment(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting department:\", error);\n      res.status(500).json({ message: \"Failed to delete department\" });\n    }\n  });\n\n  // Endpoint para notificações\n  app.get('/api/notifications', async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      \n      if (!userId) {\n        return res.status(400).json({ message: 'userId é obrigatório' });\n      }\n\n      // Buscar tickets atribuídos ao usuário que estão abertos\n      const assignedTickets = await storage.getAllTickets({\n        assignedTo: userId\n      });\n\n      // Filtrar apenas tickets abertos/em progresso\n      const openTickets = assignedTickets.filter(ticket => \n        ['open', 'in_progress', 'pending'].includes(ticket.status)\n      );\n\n      // Gerar notificações baseadas nos tickets\n      const notifications = openTickets.map(ticket => {\n        const createdTime = new Date(ticket.createdAt);\n        const now = new Date();\n        const hoursPassed = (now.getTime() - createdTime.getTime()) / (1000 * 60 * 60);\n        \n        let priority: 'low' | 'medium' | 'high' | 'critical' = 'low';\n        let type: 'ticket_assigned' | 'sla_warning' = 'ticket_assigned';\n        \n        // Determinar prioridade baseada no tempo\n        if (hoursPassed > 4) {\n          priority = 'critical';\n          type = 'sla_warning';\n        } else if (hoursPassed > 2) {\n          priority = 'high';\n        } else if (hoursPassed > 1) {\n          priority = 'medium';\n        }\n\n        return {\n          id: `ticket-${ticket.id}`,\n          type,\n          title: type === 'sla_warning' ? 'Alerta de SLA!' : 'Ticket Atribuído',\n          message: `${ticket.subject} - ${ticket.requesterName || 'Cliente'}`,\n          ticketId: ticket.id,\n          timestamp: ticket.createdAt,\n          read: false,\n          priority\n        };\n      });\n\n      res.json(notifications);\n    } catch (error) {\n      console.error('Erro ao buscar notificações:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Categories endpoints\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.updateCategory(id, categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCategory(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  app.get(\"/api/categories/department/:departmentId\", async (req, res) => {\n    try {\n      const { departmentId } = req.params;\n      const categories = await storage.getCategoriesByDepartment(departmentId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories by department:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories by department\" });\n    }\n  });\n\n  // Configuration routes\n  app.get(\"/api/config/status\", async (req, res) => {\n    try {\n      const statusConfigs = await storage.getAllStatusConfigs();\n      res.json(statusConfigs);\n    } catch (error) {\n      console.error(\"Error fetching status configs:\", error);\n      res.status(500).json({ message: \"Failed to fetch status configurations\" });\n    }\n  });\n\n  app.post(\"/api/config/status\", async (req, res) => {\n    try {\n      const statusConfig = await storage.createStatusConfig(req.body);\n      res.json(statusConfig);\n    } catch (error) {\n      console.error(\"Error creating status config:\", error);\n      res.status(500).json({ message: \"Failed to create status configuration\" });\n    }\n  });\n\n  app.put(\"/api/config/status/:id\", async (req, res) => {\n    try {\n      const statusConfig = await storage.updateStatusConfig(req.params.id, req.body);\n      res.json(statusConfig);\n    } catch (error) {\n      console.error(\"Error updating status config:\", error);\n      res.status(500).json({ message: \"Failed to update status configuration\" });\n    }\n  });\n\n  app.delete(\"/api/config/status/:id\", async (req, res) => {\n    try {\n      await storage.deleteStatusConfig(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting status config:\", error);\n      res.status(500).json({ message: \"Failed to delete status configuration\" });\n    }\n  });\n\n  app.get(\"/api/config/priority\", async (req, res) => {\n    try {\n      const priorityConfigs = await storage.getAllPriorityConfigs();\n      res.json(priorityConfigs);\n    } catch (error) {\n      console.error(\"Error fetching priority configs:\", error);\n      res.status(500).json({ message: \"Failed to fetch priority configurations\" });\n    }\n  });\n\n  app.post(\"/api/config/priority\", async (req, res) => {\n    try {\n      const priorityConfig = await storage.createPriorityConfig(req.body);\n      res.json(priorityConfig);\n    } catch (error) {\n      console.error(\"Error creating priority config:\", error);\n      res.status(500).json({ message: \"Failed to create priority configuration\" });\n    }\n  });\n\n  app.put(\"/api/config/priority/:id\", async (req, res) => {\n    try {\n      const priorityConfig = await storage.updatePriorityConfig(req.params.id, req.body);\n      res.json(priorityConfig);\n    } catch (error) {\n      console.error(\"Error updating priority config:\", error);\n      res.status(500).json({ message: \"Failed to update priority configuration\" });\n    }\n  });\n\n  app.delete(\"/api/config/priority/:id\", async (req, res) => {\n    try {\n      await storage.deletePriorityConfig(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting priority config:\", error);\n      res.status(500).json({ message: \"Failed to delete priority configuration\" });\n    }\n  });\n\n  // SLA endpoints\n  app.get(\"/api/sla/rules\", async (req, res) => {\n    try {\n      const slaRules = await storage.getSLARules();\n      res.json(slaRules);\n    } catch (error) {\n      console.error(\"Error fetching SLA rules:\", error);\n      res.status(500).json({ message: \"Failed to fetch SLA rules\" });\n    }\n  });\n\n  app.post(\"/api/sla/rules\", async (req, res) => {\n    try {\n      const slaRule = await storage.createSLARule(req.body);\n      res.json(slaRule);\n    } catch (error) {\n      console.error(\"Error creating SLA rule:\", error);\n      res.status(500).json({ message: \"Failed to create SLA rule\" });\n    }\n  });\n\n  app.put(\"/api/sla/rules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const slaRule = await storage.updateSLARule(id, req.body);\n      res.json(slaRule);\n    } catch (error) {\n      console.error(\"Error updating SLA rule:\", error);\n      res.status(500).json({ message: \"Failed to update SLA rule\" });\n    }\n  });\n\n  app.delete(\"/api/sla/rules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSLARule(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting SLA rule:\", error);\n      res.status(500).json({ message: \"Failed to delete SLA rule\" });\n    }\n  });\n\n  // Advanced Reports API\n  app.get(\"/api/reports/filtered-tickets\", async (req, res) => {\n    try {\n      const {\n        startDate,\n        endDate,\n        departmentId,\n        priority,\n        status,\n        assignedTo,\n        createdBy\n      } = req.query;\n\n      const tickets = await storage.getFilteredTickets({\n        startDate: startDate as string,\n        endDate: endDate as string,\n        departmentId: departmentId as string,\n        priority: priority as string,\n        status: status as string,\n        assignedTo: assignedTo as string,\n        createdBy: createdBy as string,\n      });\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching filtered tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch filtered tickets\" });\n    }\n  });\n\n  app.get(\"/api/reports/department-performance\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const performance = await storage.getDepartmentPerformance(\n        startDate as string,\n        endDate as string\n      );\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching department performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch department performance\" });\n    }\n  });\n\n  app.get(\"/api/reports/user-performance\", async (req, res) => {\n    try {\n      const { startDate, endDate, departmentId } = req.query;\n      const performance = await storage.getUserPerformance(\n        startDate as string,\n        endDate as string,\n        departmentId as string\n      );\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching user performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch user performance\" });\n    }\n  });\n\n  app.get(\"/api/reports/resolution-time-analysis\", async (req, res) => {\n    try {\n      const { startDate, endDate, departmentId } = req.query;\n      const analysis = await storage.getResolutionTimeAnalysis(\n        startDate as string,\n        endDate as string,\n        departmentId as string\n      );\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error fetching resolution time analysis:\", error);\n      res.status(500).json({ message: \"Failed to fetch resolution time analysis\" });\n    }\n  });\n\n  // Excluir ticket (apenas para administradores)\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const ticketId = req.params.id;\n      \n      // Verificar se o ticket existe\n      const ticket = await storage.getTicketById(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket não encontrado\" });\n      }\n      \n      // Excluir o ticket\n      await storage.deleteTicket(ticketId);\n      \n      res.json({ message: \"Ticket excluído com sucesso\" });\n    } catch (error) {\n      console.error(\"Error deleting ticket:\", error);\n      res.status(500).json({ message: \"Erro ao excluir ticket\" });\n    }\n  });\n\n  // Rota para migrar números de tickets existentes\n  app.post(\"/api/migrate-ticket-numbers\", async (req, res) => {\n    try {\n      await storage.migrateTicketNumbers();\n      res.json({ message: \"Ticket numbers migrated successfully\" });\n    } catch (error) {\n      console.error(\"Error migrating ticket numbers:\", error);\n      res.status(500).json({ message: \"Failed to migrate ticket numbers\" });\n    }\n  });\n\n  // Custom Fields\n  app.get(\"/api/custom-fields\", async (req, res) => {\n    try {\n      const fields = await storage.getCustomFields();\n      res.json(fields);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch custom fields\" });\n    }\n  });\n\n  app.get(\"/api/custom-fields/category/:categoryId\", async (req, res) => {\n    try {\n      const { departmentId } = req.query;\n      \n      if (!departmentId) {\n        return res.status(400).json({ message: \"departmentId query parameter is required\" });\n      }\n      \n      const fields = await storage.getCustomFieldsByCategoryAndDepartment(\n        req.params.categoryId,\n        departmentId as string\n      );\n      res.json(fields);\n    } catch (error) {\n      console.error(\"Error fetching custom fields:\", error);\n      res.status(500).json({ message: \"Failed to fetch custom fields for category\" });\n    }\n  });\n\n  app.post(\"/api/custom-fields\", async (req, res) => {\n    try {\n      const validatedData = insertCustomFieldSchema.parse(req.body);\n      const field = await storage.createCustomField(validatedData);\n      res.status(201).json(field);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create custom field\" });\n    }\n  });\n\n  app.patch(\"/api/custom-fields/:id\", async (req, res) => {\n    try {\n      console.log(\"Updating custom field:\", req.params.id, req.body);\n      const field = await storage.updateCustomField(req.params.id, req.body);\n      if (!field) {\n        return res.status(404).json({ message: \"Custom field not found\" });\n      }\n      res.json(field);\n    } catch (error) {\n      console.error(\"Error updating custom field:\", error);\n      res.status(500).json({ message: \"Failed to update custom field\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/custom-fields/:id\", async (req, res) => {\n    try {\n      await storage.deleteCustomField(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete custom field\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":34267},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { users, tickets, comments, attachments, departments, categories, slaRules, statusConfig, priorityConfig, customFields, permissions } from \"@shared/schema\";\nimport { eq, desc, count, sql, and, gte, lte, or, isNull } from \"drizzle-orm\";\nimport {\n  type User,\n  type InsertUser,\n  type Ticket,\n  type InsertTicket,\n  type TicketWithDetails,\n  type Comment,\n  type InsertComment,\n  type Attachment,\n  type InsertAttachment,\n  type Category,\n  type InsertCategory,\n  type SlaRule,\n  type InsertSlaRule,\n  type Department,\n  type InsertDepartment,\n  type StatusConfig,\n  type PriorityConfig,\n  type InsertStatusConfig,\n  type InsertPriorityConfig,\n  type DashboardStats,\n  type PriorityStats,\n  type TrendData,\n  type CustomField,\n  type InsertCustomField,\n  type Permission,\n  type InsertPermission,\n} from \"@shared/schema\";\nimport { nanoid } from \"nanoid\";\nimport { format, subDays, startOfDay, endOfDay, differenceInHours } from \"date-fns\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Tickets\n  getTicket(id: string): Promise<TicketWithDetails | undefined>;\n  getTicketsByUser(userId: string): Promise<TicketWithDetails[]>;\n  getAllTickets(): Promise<TicketWithDetails[]>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: string, updates: Partial<InsertTicket>): Promise<Ticket | undefined>;\n  deleteTicket(id: string): Promise<boolean>;\n\n  // Comments\n  getCommentsByTicket(ticketId: string): Promise<(Comment & { user: User })[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n\n  // Attachments\n  getAttachmentsByTicket(ticketId: string): Promise<Attachment[]>;\n  createAttachment(attachment: InsertAttachment): Promise<Attachment>;\n\n  // Categories\n  getAllCategories(): Promise<Category[]>;\n  getCategoriesByDepartment(departmentId: string): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, updates: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<boolean>;\n\n  // Departments\n  getAllDepartments(): Promise<Department[]>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  updateDepartment(id: string, updates: Partial<InsertDepartment>): Promise<Department>;\n  deleteDepartment(id: string): Promise<boolean>;\n\n  // Configuration\n  getAllStatusConfigs(): Promise<StatusConfig[]>;\n  getAllPriorityConfigs(): Promise<PriorityConfig[]>;\n  createStatusConfig(config: InsertStatusConfig): Promise<StatusConfig>;\n  createPriorityConfig(config: InsertPriorityConfig): Promise<PriorityConfig>;\n\n  // Analytics\n  getDashboardStats(filters?: any): Promise<DashboardStats>;\n  getPriorityStats(filters?: any): Promise<PriorityStats>;\n  getTrendData(days: number, filters?: any): Promise<TrendData[]>;\n\n  // Advanced Reports\n  getFilteredTickets(filters: any): Promise<TicketWithDetails[]>;\n  getDepartmentPerformance(startDate: string, endDate: string): Promise<any[]>;\n  getUserPerformance(startDate: string, endDate: string, departmentId?: string): Promise<any[]>;\n  getResolutionTimeAnalysis(startDate: string, endDate: string, departmentId?: string): Promise<any[]>;\n  \n  // Migration\n  migrateTicketNumbers(): Promise<void>;\n\n  // Custom Fields\n  getCustomFields(): Promise<CustomField[]>;\n  getCustomFieldsByCategory(categoryId: string): Promise<CustomField[]>;\n  getCustomFieldsByCategoryAndDepartment(categoryId: string, departmentId: string): Promise<CustomField[]>;\n  createCustomField(field: InsertCustomField): Promise<CustomField>;\n  updateCustomField(id: string, updates: Partial<CustomField>): Promise<CustomField | undefined>;\n  deleteCustomField(id: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize with some demo data for development\n    this.initializeDemoData();\n    this.initializeConfigurationData();\n  }\n\n  private async initializeDemoData() {\n    try {\n      // Check if data already exists\n      const existingUsers = await db.select().from(users).limit(1);\n      if (existingUsers.length > 0) return;\n\n      // Create demo users\n      const [adminUser] = await db.insert(users).values({\n        username: \"admin\",\n        password: \"admin123\",\n        name: \"Administrador\",\n        email: \"admin@empresa.com\",\n        role: \"admin\",\n      }).returning();\n\n      const [supervisor] = await db.insert(users).values({\n        username: \"maria.santos\",\n        password: \"senha123\",\n        name: \"Maria Santos\",\n        email: \"maria.santos@empresa.com\",\n        role: \"supervisor\",\n      }).returning();\n\n      const [colaborador1] = await db.insert(users).values({\n        username: \"carlos.oliveira\",\n        password: \"senha123\",\n        name: \"Carlos Oliveira\",\n        email: \"carlos.oliveira@empresa.com\",\n        role: \"colaborador\",\n      }).returning();\n\n      const [colaborador2] = await db.insert(users).values({\n        username: \"ana.costa\",\n        password: \"senha123\",\n        name: \"Ana Costa\",\n        email: \"ana.costa@empresa.com\",\n        role: \"colaborador\",\n      }).returning();\n\n      // Create demo departments\n      const [tiDept] = await db.insert(departments).values({\n        name: \"TI\",\n        description: \"Departamento de Tecnologia da Informação\",\n      }).returning();\n\n      const [rhDept] = await db.insert(departments).values({\n        name: \"RH\",\n        description: \"Recursos Humanos\",\n      }).returning();\n\n      const [finDept] = await db.insert(departments).values({\n        name: \"Financeiro\",\n        description: \"Departamento Financeiro\",\n      }).returning();\n\n      // Create demo categories linked to departments\n      await db.insert(categories).values([\n        {\n          name: \"Bug de Sistema\",\n          description: \"Problemas técnicos no sistema\",\n          departmentId: tiDept.id,\n          slaHours: 4,\n        },\n        {\n          name: \"Nova Funcionalidade\",\n          description: \"Solicitação de nova funcionalidade\",\n          departmentId: tiDept.id,\n          slaHours: 48,\n        },\n        {\n          name: \"Suporte Técnico\",\n          description: \"Suporte técnico geral\",\n          departmentId: tiDept.id,\n          slaHours: 8,\n        },\n        {\n          name: \"Folha de Pagamento\",\n          description: \"Questões relacionadas à folha de pagamento\",\n          departmentId: rhDept.id,\n          slaHours: 24,\n        },\n        {\n          name: \"Benefícios\",\n          description: \"Questões sobre benefícios dos funcionários\",\n          departmentId: rhDept.id,\n          slaHours: 12,\n        },\n        {\n          name: \"Contabilidade\",\n          description: \"Questões contábeis e fiscais\",\n          departmentId: finDept.id,\n          slaHours: 24,\n        },\n        {\n          name: \"Contas a Pagar\",\n          description: \"Processamento de pagamentos\",\n          departmentId: finDept.id,\n          slaHours: 12,\n        },\n      ]);\n\n      // Create demo tickets with distributed dates for trending data\n      const now = new Date();\n      const demoTickets = [\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Sistema de backup está falhando\",\n          description: \"Backup automático não está funcionando corretamente desde a última atualização\",\n          status: \"resolved\",\n          priority: \"high\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: adminUser.id,\n          assignedTo: supervisor.id,\n          createdAt: subDays(now, 6),\n          updatedAt: subDays(now, 6),\n          resolvedAt: subDays(now, 5),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Erro na integração com API externa\",\n          description: \"A integração com o sistema de pagamentos está retornando erro 500\",\n          status: \"resolved\",\n          priority: \"critical\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: colaborador1.id,\n          assignedTo: supervisor.id,\n          createdAt: subDays(now, 6),\n          updatedAt: subDays(now, 6),\n          resolvedAt: subDays(now, 4),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Solicitação de nova funcionalidade no dashboard\",\n          description: \"Adicionar filtros avançados no dashboard principal\",\n          status: \"open\",\n          priority: \"medium\",\n          category: \"feature\",\n          departmentId: null,\n          createdBy: colaborador2.id,\n          assignedTo: supervisor.id,\n          createdAt: subDays(now, 3),\n          updatedAt: subDays(now, 3),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Problema de performance na página de relatórios\",\n          description: \"Relatórios estão carregando muito lentamente\",\n          status: \"in_progress\",\n          priority: \"high\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: supervisor.id,\n          assignedTo: adminUser.id,\n          createdAt: subDays(now, 2),\n          updatedAt: subDays(now, 1),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Atualização de segurança necessária\",\n          description: \"Aplicar patches de segurança no servidor de aplicação\",\n          status: \"open\",\n          priority: \"critical\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: adminUser.id,\n          assignedTo: colaborador1.id,\n          createdAt: subDays(now, 1),\n          updatedAt: subDays(now, 1),\n        },\n      ];\n\n      await db.insert(tickets).values(demoTickets);\n\n      // Adicionar tickets mais recentes para o gráfico de tendências\n      const recentTickets = [];\n      for (let i = 0; i < 7; i++) {\n        const ticketDate = subDays(now, i);\n        \n        // Criar 2-4 tickets por dia nos últimos 7 dias\n        const ticketsPerDay = Math.floor(Math.random() * 3) + 2;\n        \n        for (let j = 0; j < ticketsPerDay; j++) {\n          recentTickets.push({\n            ticketNumber: `TICK-${nanoid(6)}`,\n            subject: `Ticket ${i}-${j} - Problema exemplo`,\n            description: `Descrição do ticket criado em ${format(ticketDate, \"dd/MM/yyyy\")}`,\n            status: Math.random() > 0.6 ? \"resolved\" : \"open\",\n            priority: [\"low\", \"medium\", \"high\", \"critical\"][Math.floor(Math.random() * 4)],\n            category: [\"bug\", \"feature\", \"support\"][Math.floor(Math.random() * 3)],\n            departmentId: null,\n            createdBy: [adminUser.id, supervisor.id, colaborador1.id, colaborador2.id][Math.floor(Math.random() * 4)],\n            assignedTo: [adminUser.id, supervisor.id][Math.floor(Math.random() * 2)],\n            createdAt: ticketDate,\n            updatedAt: ticketDate,\n            resolvedAt: Math.random() > 0.6 ? subDays(ticketDate, -Math.floor(Math.random() * 2)) : null,\n          });\n        }\n      }\n      \n      await db.insert(tickets).values(recentTickets);\n    } catch (error) {\n      console.error(\"Error initializing demo data:\", error);\n    }\n  }\n\n  private async initializeConfigurationData() {\n    try {\n      // Check if status configs already exist\n      const existingStatusConfigs = await db.select().from(statusConfig).limit(1);\n      if (existingStatusConfigs.length === 0) {\n        // Create default status configurations\n        await db.insert(statusConfig).values([\n          {\n            name: \"A Fazer\",\n            value: \"open\",\n            color: \"#3b82f6\",\n            order: 1,\n            isActive: true,\n            isDefault: true,\n          },\n          {\n            name: \"Atendendo\",\n            value: \"in_progress\",\n            color: \"#10b981\",\n            order: 2,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Pausado\",\n            value: \"on_hold\",\n            color: \"#f59e0b\",\n            order: 3,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Resolvido\",\n            value: \"resolved\",\n            color: \"#6b7280\",\n            order: 4,\n            isActive: true,\n            isDefault: false,\n          },\n        ]);\n      }\n\n      // Check if priority configs already exist\n      const existingPriorityConfigs = await db.select().from(priorityConfig).limit(1);\n      if (existingPriorityConfigs.length === 0) {\n        // Create default priority configurations\n        await db.insert(priorityConfig).values([\n          {\n            name: \"Crítica\",\n            value: \"critical\",\n            color: \"#dc2626\",\n            slaHours: 4,\n            order: 1,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Alta\",\n            value: \"high\",\n            color: \"#f59e0b\",\n            slaHours: 24,\n            order: 2,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Média\",\n            value: \"medium\",\n            color: \"#3b82f6\",\n            slaHours: 72,\n            order: 3,\n            isActive: true,\n            isDefault: true,\n          },\n          {\n            name: \"Baixa\",\n            value: \"low\",\n            color: \"#10b981\",\n            slaHours: 168,\n            order: 4,\n            isActive: true,\n            isDefault: false,\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error initializing configuration data:\", error);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  // Permissions methods\n  async getAllPermissions(): Promise<Permission[]> {\n    return await db.select().from(permissions);\n  }\n\n  async getPermissionByRole(role: string): Promise<Permission | undefined> {\n    const [permission] = await db.select().from(permissions).where(eq(permissions.role, role));\n    return permission || undefined;\n  }\n\n  async createPermission(permissionData: InsertPermission): Promise<Permission> {\n    const [permission] = await db\n      .insert(permissions)\n      .values(permissionData)\n      .returning();\n    return permission;\n  }\n\n  async updatePermission(role: string, permissionData: Partial<InsertPermission>): Promise<Permission | undefined> {\n    const [permission] = await db\n      .update(permissions)\n      .set({ ...permissionData, updatedAt: new Date() })\n      .where(eq(permissions.role, role))\n      .returning();\n    return permission || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    // Clean up empty values that would cause foreign key errors\n    const cleanUpdates = { ...updates };\n    if (cleanUpdates.departmentId === '') {\n      cleanUpdates.departmentId = null;\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...cleanUpdates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(`User with id ${id} not found`);\n    }\n    \n    return updatedUser;\n  }\n\n  // Get user performance metrics\n  async getUserPerformance(userId: string): Promise<any> {\n    try {\n      // Get ALL tickets where user is involved (created by OR assigned to)\n      const userTickets = await db\n        .select()\n        .from(tickets)\n        .where(or(\n          eq(tickets.createdBy, userId),\n          eq(tickets.assignedTo, userId)\n        ));\n\n      // Get tickets specifically assigned to user\n      const assignedTickets = userTickets.filter(t => t.assignedTo === userId);\n      \n      // Get tickets created by user\n      const createdTickets = userTickets.filter(t => t.createdBy === userId);\n\n      const resolvedTickets = assignedTickets.filter(t => t.status === 'resolvido');\n      const openTickets = assignedTickets.filter(t => t.status !== 'resolvido' && t.status !== 'fechado');\n\n      const resolutionRate = assignedTickets.length > 0 \n        ? Math.round((resolvedTickets.length / assignedTickets.length) * 100) \n        : 0;\n\n      // Calculate performance trends\n      const thisMonth = new Date();\n      const lastMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() - 1);\n      const twoMonthsAgo = new Date(thisMonth.getFullYear(), thisMonth.getMonth() - 2);\n\n      const currentMonthTickets = assignedTickets.filter(t => \n        new Date(t.createdAt!) >= new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1)\n      ).length;\n\n      const lastMonthTickets = assignedTickets.filter(t => {\n        const createdDate = new Date(t.createdAt!);\n        return createdDate >= new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1) &&\n               createdDate < new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);\n      }).length;\n\n      const twoMonthsAgoTickets = assignedTickets.filter(t => {\n        const createdDate = new Date(t.createdAt!);\n        return createdDate >= new Date(twoMonthsAgo.getFullYear(), twoMonthsAgo.getMonth(), 1) &&\n               createdDate < new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1);\n      }).length;\n\n      // Priority distribution (based on all user tickets)\n      const priorityCounts = userTickets.reduce((acc, ticket) => {\n        const priority = ticket.priority || 'baixa';\n        acc[priority] = (acc[priority] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      // Status distribution (based on all user tickets)\n      const statusCounts = userTickets.reduce((acc, ticket) => {\n        const status = ticket.status || 'aberto';\n        acc[status] = (acc[status] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      // Calculate average resolution time\n      const resolvedTicketsWithTime = resolvedTickets.filter(t => t.resolvedAt);\n      let avgResolutionDays = 0;\n      if (resolvedTicketsWithTime.length > 0) {\n        const totalDays = resolvedTicketsWithTime.reduce((sum, ticket) => {\n          const created = new Date(ticket.createdAt!);\n          const resolved = new Date(ticket.resolvedAt!);\n          const days = Math.ceil((resolved.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));\n          return sum + days;\n        }, 0);\n        avgResolutionDays = Math.round(totalDays / resolvedTicketsWithTime.length * 10) / 10;\n      }\n\n      return {\n        assignedTickets: assignedTickets.length,\n        createdTickets: createdTickets.length,\n        totalTickets: userTickets.length,\n        resolvedTickets: resolvedTickets.length,\n        openTickets: openTickets.length,\n        resolutionRate,\n        averageResolutionTime: avgResolutionDays > 0 ? `${avgResolutionDays} dias` : 'N/A',\n        satisfactionRating: 4.2,\n        monthlyTrend: [\n          { month: 'Há 2 meses', tickets: twoMonthsAgoTickets },\n          { month: 'Mês passado', tickets: lastMonthTickets },\n          { month: 'Este mês', tickets: currentMonthTickets }\n        ],\n        priorityDistribution: [\n          { name: 'Crítica', value: priorityCounts['critica'] || 0, color: '#ef4444' },\n          { name: 'Alta', value: priorityCounts['alta'] || 0, color: '#f97316' },\n          { name: 'Média', value: priorityCounts['media'] || 0, color: '#eab308' },\n          { name: 'Baixa', value: priorityCounts['baixa'] || 0, color: '#22c55e' }\n        ],\n        statusDistribution: [\n          { name: 'Aberto', value: statusCounts['aberto'] || 0, color: '#3b82f6' },\n          { name: 'Em andamento', value: statusCounts['em-andamento'] || 0, color: '#f59e0b' },\n          { name: 'Aguardando', value: statusCounts['aguardando'] || 0, color: '#8b5cf6' },\n          { name: 'Resolvido', value: statusCounts['resolvido'] || 0, color: '#10b981' },\n          { name: 'Fechado', value: statusCounts['fechado'] || 0, color: '#6b7280' }\n        ]\n      };\n    } catch (error) {\n      console.error('Error getting user performance:', error);\n      // Return default data if error\n      return {\n        assignedTickets: 0,\n        resolvedTickets: 0,\n        openTickets: 0,\n        resolutionRate: 0,\n        averageResolutionTime: '0 dias',\n        satisfactionRating: 0,\n        monthlyTrend: [],\n        priorityDistribution: [],\n        statusDistribution: []\n      };\n    }\n  }\n\n  // Get user activity logs\n  async getUserActivities(userId: string): Promise<any[]> {\n    // For now return mock data - in real implementation, you'd have an activity log table\n    return [\n      {\n        action: 'Login no sistema',\n        description: 'Usuário fez login no sistema',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()\n      },\n      {\n        action: 'Ticket atualizado',\n        description: 'Atualizou o status do ticket TICK-123 para \"Em andamento\"',\n        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString()\n      },\n      {\n        action: 'Comentário adicionado',\n        description: 'Adicionou comentário ao ticket TICK-456',\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n      }\n    ];\n  }\n\n  // Get roles with user counts\n  async getRoles(): Promise<any[]> {\n    const roles = [\n      {\n        id: 'administrador',\n        name: 'Administrador', \n        description: 'Acesso completo ao sistema com todas as permissões',\n        color: 'bg-purple-100 text-purple-800',\n        permissions: 16,\n        isSystem: true\n      },\n      {\n        id: 'supervisor',\n        name: 'Supervisor',\n        description: 'Gerencia equipes e tem acesso a relatórios departamentais', \n        color: 'bg-blue-100 text-blue-800',\n        permissions: 9,\n        isSystem: true\n      },\n      {\n        id: 'colaborador',\n        name: 'Colaborador',\n        description: 'Acesso básico para criação e atendimento de tickets',\n        color: 'bg-green-100 text-green-800', \n        permissions: 3,\n        isSystem: true\n      }\n    ];\n\n    // Count users for each role\n    const userCounts = await Promise.all(\n      roles.map(async (role) => {\n        // Map role IDs to database role values\n        let dbRole;\n        switch (role.id) {\n          case 'administrador':\n            dbRole = 'admin';\n            break;\n          case 'supervisor':\n            dbRole = 'supervisor';\n            break;\n          case 'colaborador':\n            dbRole = 'colaborador';\n            break;\n          default:\n            dbRole = role.id;\n        }\n\n        const [result] = await db\n          .select({ count: count() })\n          .from(users)\n          .where(eq(users.role, dbRole));\n        \n        const userCount = Number(result?.count) || 0;\n        \n        return {\n          ...role,\n          userCount: userCount\n        };\n      })\n    );\n\n    return userCounts;\n  }\n\n  // Get role permissions\n  async getRolePermissions(role: string): Promise<any> {\n    const rolePermissions = {\n      'admin': {\n        'Usuários': {\n          'Visualizar Usuários': true,\n          'Gerenciar Usuários': true,\n          'Segurança de Usuários': true\n        },\n        'Tickets': {\n          'Visualizar Tickets': true,\n          'Gerenciar Tickets': true,\n          'Atribuir Tickets': true,\n          'Finalizar Tickets': true\n        },\n        'Departamentos': {\n          'Visualizar Departamentos': true,\n          'Gerenciar Departamentos': true\n        },\n        'Relatórios': {\n          'Visualizar Relatórios': true,\n          'Exportar Relatórios': true\n        },\n        'Configurações': {\n          'Visualizar Configurações': true,\n          'Gerenciar Configurações': true,\n          'Gerenciar Funções': true\n        },\n        'SLA': {\n          'Visualizar SLA': true,\n          'Gerenciar SLA': true\n        }\n      },\n      'supervisor': {\n        'Usuários': {\n          'Visualizar Usuários': true,\n          'Gerenciar Usuários': false,\n          'Segurança de Usuários': false\n        },\n        'Tickets': {\n          'Visualizar Tickets': true,\n          'Gerenciar Tickets': true,\n          'Atribuir Tickets': true,\n          'Finalizar Tickets': true\n        },\n        'Departamentos': {\n          'Visualizar Departamentos': true,\n          'Gerenciar Departamentos': false\n        },\n        'Relatórios': {\n          'Visualizar Relatórios': true,\n          'Exportar Relatórios': true\n        },\n        'Configurações': {\n          'Visualizar Configurações': false,\n          'Gerenciar Configurações': false,\n          'Gerenciar Funções': false\n        },\n        'SLA': {\n          'Visualizar SLA': true,\n          'Gerenciar SLA': false\n        }\n      },\n      'colaborador': {\n        'Usuários': {\n          'Visualizar Usuários': false,\n          'Gerenciar Usuários': false,\n          'Segurança de Usuários': false\n        },\n        'Tickets': {\n          'Visualizar Tickets': true,\n          'Gerenciar Tickets': true,\n          'Atribuir Tickets': false,\n          'Finalizar Tickets': false\n        },\n        'Departamentos': {\n          'Visualizar Departamentos': false,\n          'Gerenciar Departamentos': false\n        },\n        'Relatórios': {\n          'Visualizar Relatórios': false,\n          'Exportar Relatórios': false\n        },\n        'Configurações': {\n          'Visualizar Configurações': false,\n          'Gerenciar Configurações': false,\n          'Gerenciar Funções': false\n        },\n        'SLA': {\n          'Visualizar SLA': false,\n          'Gerenciar SLA': false\n        }\n      }\n    };\n\n    return rolePermissions[role] || {};\n  }\n\n  async getTicket(id: string): Promise<TicketWithDetails | undefined> {\n    const [ticket] = await db\n      .select({\n        id: tickets.id,\n        ticketNumber: tickets.ticketNumber,\n        subject: tickets.subject,\n        description: tickets.description,\n        status: tickets.status,\n        priority: tickets.priority,\n        category: tickets.category,\n        requesterDepartmentId: tickets.requesterDepartmentId,\n        responsibleDepartmentId: tickets.responsibleDepartmentId,\n        createdBy: tickets.createdBy,\n        assignedTo: tickets.assignedTo,\n        createdAt: tickets.createdAt,\n        updatedAt: tickets.updatedAt,\n        resolvedAt: tickets.resolvedAt,\n        department: {\n          id: departments.id,\n          name: departments.name,\n          description: departments.description,\n          createdAt: departments.createdAt,\n          updatedAt: departments.updatedAt,\n        },\n        createdByUser: {\n          id: users.id,\n          username: users.username,\n          name: users.name,\n          email: users.email,\n          role: users.role,\n          departmentId: users.departmentId,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(tickets)\n      .leftJoin(departments, eq(tickets.responsibleDepartmentId, departments.id))\n      .leftJoin(users, eq(tickets.createdBy, users.id))\n      .where(eq(tickets.id, id));\n\n    if (!ticket) return undefined;\n\n    // Get assigned user\n    let assignedToUser = null;\n    if (ticket.assignedTo) {\n      const [assignedUser] = await db.select().from(users).where(eq(users.id, ticket.assignedTo));\n      assignedToUser = assignedUser || null;\n    }\n\n    // Get comments\n    const ticketComments = await db\n      .select({\n        id: comments.id,\n        ticketId: comments.ticketId,\n        userId: comments.userId,\n        content: comments.content,\n        createdAt: comments.createdAt,\n        user: {\n          id: users.id,\n          username: users.username,\n          name: users.name,\n          email: users.email,\n          role: users.role,\n          departmentId: users.departmentId,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.ticketId, id));\n\n    // Get attachments\n    const ticketAttachments = await db.select().from(attachments).where(eq(attachments.ticketId, id));\n\n    const baseTicket = {\n      ...ticket,\n      assignedToUser,\n      comments: ticketComments,\n      attachments: ticketAttachments,\n    } as TicketWithDetails;\n\n    // Calcular SLA para o ticket individual também\n    return await this.calculateTicketSLA(baseTicket);\n  }\n\n  async getTicketsByUser(userId: string): Promise<TicketWithDetails[]> {\n    const userTickets = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.createdBy, userId));\n\n    const detailedTickets = await Promise.all(\n      userTickets.map(ticket => this.getTicket(ticket.id))\n    );\n\n    return detailedTickets.filter(ticket => ticket !== undefined) as TicketWithDetails[];\n  }\n\n  async getAllTickets(filters?: { createdBy?: string, departmentId?: string, assignedTo?: string, colaboradorFilter?: { userId: string, departmentId: string } }): Promise<TicketWithDetails[]> {\n    // Aplicar filtros baseados na hierarquia\n    let query = db.select().from(tickets);\n    \n    const conditions = [];\n    \n    // Filtro especial para colaboradores\n    if (filters?.colaboradorFilter) {\n      const { userId, departmentId } = filters.colaboradorFilter;\n      conditions.push(\n        or(\n          // Tickets criados pelo próprio usuário\n          eq(tickets.createdBy, userId),\n          // Tickets não atribuídos do seu departamento\n          and(\n            isNull(tickets.assignedTo),\n            or(\n              eq(tickets.departmentId, departmentId),\n              eq(tickets.requesterDepartmentId, departmentId),\n              eq(tickets.responsibleDepartmentId, departmentId)\n            )\n          )\n        )\n      );\n    } else {\n      // Filtros normais para admin/supervisor\n      if (filters?.createdBy) {\n        conditions.push(eq(tickets.createdBy, filters.createdBy));\n      }\n      if (filters?.assignedTo) {\n        conditions.push(eq(tickets.assignedTo, filters.assignedTo));\n      }\n      if (filters?.departmentId) {\n        conditions.push(\n          or(\n            eq(tickets.departmentId, filters.departmentId),\n            eq(tickets.requesterDepartmentId, filters.departmentId),\n            eq(tickets.responsibleDepartmentId, filters.departmentId)\n          )\n        );\n      }\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    const allTickets = await query.orderBy(desc(tickets.createdAt));\n\n    const detailedTickets = await Promise.all(\n      allTickets.map(ticket => this.getTicket(ticket.id))\n    );\n\n    // Calcular SLA para cada ticket\n    const ticketsWithSLA = await Promise.all(\n      detailedTickets\n        .filter(ticket => ticket !== undefined)\n        .map(async ticket => await this.calculateTicketSLA(ticket as TicketWithDetails))\n    );\n\n    return ticketsWithSLA;\n  }\n\n  async calculateTicketSLA(ticket: TicketWithDetails): Promise<TicketWithDetails> {\n    try {\n      // Se o ticket já foi resolvido, não precisa calcular SLA\n      if (ticket.status === 'resolved' || ticket.status === 'closed') {\n        return { \n          ...ticket, \n          slaStatus: 'met' as const, \n          slaHoursRemaining: 0,\n          slaHoursTotal: 0,\n          slaSource: 'ticket resolvido'\n        };\n      }\n\n      let slaHours = 4; // Padrão de 4 horas conforme solicitado\n      let slaSource = 'padrão (4h)';\n\n      // 1. Primeiro, buscar regras SLA específicas (maior prioridade)\n      const slaRulesData = await db.select().from(slaRules).where(eq(slaRules.isActive, true));\n      \n      if (slaRulesData && slaRulesData.length > 0) {\n        const matchingRule = slaRulesData.find(rule => {\n          const matchesDepartment = !rule.departmentId || rule.departmentId === ticket.responsibleDepartmentId;\n          const matchesCategory = !rule.category || rule.category === ticket.category; // ticket.category já é o ID\n          const matchesPriority = !rule.priority || rule.priority === ticket.priority;\n          return matchesDepartment && matchesCategory && matchesPriority;\n        });\n\n        if (matchingRule) {\n          slaHours = matchingRule.timeHours;\n          slaSource = `regra SLA: ${matchingRule.name}`;\n        }\n      }\n\n      // 2. Se não encontrou regra SLA, buscar configuração de prioridade\n      if (slaSource === 'padrão (4h)') {\n        const [priorityConfigResult] = await db\n          .select()\n          .from(priorityConfig)\n          .where(eq(priorityConfig.value, ticket.priority));\n\n        if (priorityConfigResult?.slaHours) {\n          slaHours = priorityConfigResult.slaHours;\n          slaSource = `prioridade: ${priorityConfigResult.name}`;\n        }\n      }\n\n      // 3. Se não encontrou na prioridade, buscar na categoria\n      if (slaSource === 'padrão (4h)' && ticket.category) {\n        const [category] = await db\n          .select()\n          .from(categories)\n          .where(eq(categories.id, ticket.category)); // Usar ID ao invés de name\n        \n        if (category?.slaHours) {\n          slaHours = category.slaHours;\n          slaSource = `categoria: ${category.name}`;\n        }\n      }\n\n      // Calcular tempo decorrido desde a criação\n      const now = new Date();\n      const createdAt = new Date(ticket.createdAt);\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const hoursRemaining = Math.max(slaHours - hoursElapsed, -999); // Limitar valores negativos extremos\n\n      // Determinar status do SLA\n      let slaStatus: 'met' | 'at_risk' | 'violated' = 'met';\n      \n      if (hoursElapsed > slaHours) {\n        slaStatus = 'violated';\n      } else if (hoursRemaining <= slaHours * 0.2) { // 20% do tempo restante = em risco\n        slaStatus = 'at_risk';\n      }\n\n      return {\n        ...ticket,\n        slaStatus,\n        slaHoursRemaining: Math.round(hoursRemaining * 100) / 100,\n        slaHoursTotal: slaHours,\n        slaSource\n      };\n    } catch (error) {\n      console.error('Erro ao calcular SLA:', error);\n      return ticket;\n    }\n  }\n\n  async createTicket(ticket: InsertTicket): Promise<Ticket> {\n    try {\n      console.log('Creating ticket with data:', ticket);\n      \n      // Gerar número sequencial do ticket\n      const ticketNumber = await this.generateNextTicketNumber();\n      console.log('Generated ticket number:', ticketNumber);\n      \n      const [newTicket] = await db.insert(tickets).values({\n        ...ticket,\n        ticketNumber,\n      }).returning();\n      \n      console.log('Created ticket:', newTicket);\n      return newTicket;\n    } catch (error) {\n      console.error('Error in createTicket:', error);\n      throw error;\n    }\n  }\n\n  private async generateNextTicketNumber(): Promise<string> {\n    try {\n      console.log('Generating next ticket number...');\n      \n      // Buscar todos os tickets que começam com TICK- e extrair o maior número\n      const allTickets = await db\n        .select({ ticketNumber: tickets.ticketNumber })\n        .from(tickets);\n\n      let maxNumber = 0;\n      \n      // Iterar por todos os tickets para encontrar o maior número\n      for (const ticket of allTickets) {\n        const match = ticket.ticketNumber.match(/TICK-(\\d+)/);\n        if (match) {\n          const ticketNum = parseInt(match[1], 10);\n          if (ticketNum > maxNumber) {\n            maxNumber = ticketNum;\n          }\n        }\n      }\n      \n      const nextNumber = maxNumber + 1;\n      const newTicketNumber = `TICK-${nextNumber.toString().padStart(3, '0')}`;\n      console.log(`Found max number: ${maxNumber}, next number: ${newTicketNumber}`);\n      return newTicketNumber;\n      \n    } catch (error) {\n      console.error('Erro ao gerar número do ticket:', error);\n      // Fallback simples\n      const fallbackNumber = `TICK-001`;\n      console.log('Using fallback number:', fallbackNumber);\n      return fallbackNumber;\n    }\n  }\n\n  async updateTicket(id: string, updates: Partial<InsertTicket>): Promise<Ticket | undefined> {\n    const [updatedTicket] = await db\n      .update(tickets)\n      .set({ \n        ...updates, \n        updatedAt: new Date(),\n        ...(updates.status === 'resolved' ? { resolvedAt: new Date() } : {}),\n      })\n      .where(eq(tickets.id, id))\n      .returning();\n    return updatedTicket || undefined;\n  }\n\n  async getTicketById(id: string): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.id, id));\n    return ticket;\n  }\n\n  async deleteTicket(id: string): Promise<boolean> {\n    try {\n      // Primeiro, excluir comentários relacionados\n      await db.delete(comments).where(eq(comments.ticketId, id));\n      \n      // Depois, excluir anexos relacionados\n      await db.delete(attachments).where(eq(attachments.ticketId, id));\n      \n      // Finalmente, excluir o ticket\n      await db.delete(tickets).where(eq(tickets.id, id));\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error deleting ticket:\", error);\n      return false;\n    }\n  }\n\n  async migrateTicketNumbers(): Promise<void> {\n    try {\n      // Buscar todos os tickets ordenados por data de criação\n      const allTickets = await db\n        .select({ id: tickets.id, ticketNumber: tickets.ticketNumber, createdAt: tickets.createdAt })\n        .from(tickets)\n        .orderBy(tickets.createdAt);\n\n      // Renumerar todos os tickets sequencialmente\n      for (let i = 0; i < allTickets.length; i++) {\n        const newTicketNumber = `TICK-${(i + 1).toString().padStart(3, '0')}`;\n        \n        await db\n          .update(tickets)\n          .set({ ticketNumber: newTicketNumber })\n          .where(eq(tickets.id, allTickets[i].id));\n      }\n\n      console.log(`Migrated ${allTickets.length} ticket numbers successfully`);\n    } catch (error) {\n      console.error('Error migrating ticket numbers:', error);\n      throw error;\n    }\n  }\n\n  async getCommentsByTicket(ticketId: string): Promise<(Comment & { user: User })[]> {\n    const ticketComments = await db\n      .select({\n        id: comments.id,\n        ticketId: comments.ticketId,\n        userId: comments.userId,\n        content: comments.content,\n        createdAt: comments.createdAt,\n        user: {\n          id: users.id,\n          username: users.username,\n          name: users.name,\n          email: users.email,\n          role: users.role,\n          departmentId: users.departmentId,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.ticketId, ticketId));\n\n    return ticketComments as (Comment & { user: User })[];\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    return newComment;\n  }\n\n  async getAttachmentsByTicket(ticketId: string): Promise<Attachment[]> {\n    return await db.select().from(attachments).where(eq(attachments.ticketId, ticketId));\n  }\n\n  async createAttachment(attachment: InsertAttachment): Promise<Attachment> {\n    const [newAttachment] = await db.insert(attachments).values(attachment).returning();\n    return newAttachment;\n  }\n\n  // Categories methods\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, true));\n  }\n\n  async getCategoriesByDepartment(departmentId: string): Promise<Category[]> {\n    return await db.select().from(categories)\n      .where(and(eq(categories.departmentId, departmentId), eq(categories.isActive, true)));\n  }\n\n  // SLA Rules methods\n  async getSLARules(): Promise<SLARule[]> {\n    return await db.select().from(slaRules).where(eq(slaRules.isActive, true));\n  }\n\n  async createSLARule(data: InsertSLARule): Promise<SLARule> {\n    // Validação: apenas um tipo de SLA por regra\n    const typeCount = [data.departmentId, data.category, data.priority].filter(Boolean).length;\n    if (typeCount !== 1) {\n      throw new Error('SLA rule must have exactly one defining field: departmentId, category, or priority');\n    }\n\n    const [slaRule] = await db.insert(slaRules).values(data).returning();\n    return slaRule;\n  }\n\n  async updateSLARule(id: string, data: Partial<InsertSLARule>): Promise<SLARule | null> {\n    const [slaRule] = await db.update(slaRules)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(slaRules.id, id))\n      .returning();\n    return slaRule || null;\n  }\n\n  async deleteSLARule(id: string): Promise<boolean> {\n    const result = await db.delete(slaRules).where(eq(slaRules.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, updates: Partial<InsertCategory>): Promise<Category> {\n    const [result] = await db\n      .update(categories)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(categories.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    const result = await db.delete(categories).where(eq(categories.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Configuration methods\n  async getAllStatusConfigs(): Promise<StatusConfig[]> {\n    return await db.select().from(statusConfig).where(eq(statusConfig.isActive, true)).orderBy(statusConfig.order);\n  }\n\n  async getAllPriorityConfigs(): Promise<PriorityConfig[]> {\n    return await db.select().from(priorityConfig).where(eq(priorityConfig.isActive, true)).orderBy(priorityConfig.order);\n  }\n\n  async createStatusConfig(config: InsertStatusConfig): Promise<StatusConfig> {\n    const [result] = await db.insert(statusConfig).values(config).returning();\n    return result;\n  }\n\n  async createPriorityConfig(config: InsertPriorityConfig): Promise<PriorityConfig> {\n    const [result] = await db.insert(priorityConfig).values(config).returning();\n    return result;\n  }\n\n  async updateStatusConfig(id: string, updates: Partial<StatusConfig>): Promise<StatusConfig | undefined> {\n    // Remove campos de timestamp para evitar conflitos\n    const { createdAt, updatedAt, ...updateData } = updates;\n    \n    const [result] = await db\n      .update(statusConfig)\n      .set({ ...updateData, updatedAt: sql`NOW()` })\n      .where(eq(statusConfig.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteStatusConfig(id: string): Promise<void> {\n    await db.delete(statusConfig).where(eq(statusConfig.id, id));\n  }\n\n  async updatePriorityConfig(id: string, updates: Partial<PriorityConfig>): Promise<PriorityConfig | undefined> {\n    // Remove campos de timestamp para evitar conflitos\n    const { createdAt, updatedAt, ...updateData } = updates;\n    \n    const [result] = await db\n      .update(priorityConfig)\n      .set({ ...updateData, updatedAt: sql`NOW()` })\n      .where(eq(priorityConfig.id, id))\n      .returning();\n    return result;\n  }\n\n  async deletePriorityConfig(id: string): Promise<void> {\n    await db.delete(priorityConfig).where(eq(priorityConfig.id, id));\n  }\n\n  // Departments methods\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const [newDepartment] = await db.insert(departments).values(department).returning();\n    return newDepartment;\n  }\n\n  async updateDepartment(id: string, updates: Partial<InsertDepartment>): Promise<Department> {\n    const [updatedDepartment] = await db\n      .update(departments)\n      .set({ ...updates, updatedAt: sql`NOW()` })\n      .where(eq(departments.id, id))\n      .returning();\n    return updatedDepartment;\n  }\n\n  async deleteDepartment(id: string): Promise<boolean> {\n    const result = await db.delete(departments).where(eq(departments.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getDashboardStats(filters?: any): Promise<DashboardStats> {\n    // Build filter conditions\n    const conditions = [];\n    \n    if (filters?.priority && filters.priority !== 'all') {\n      conditions.push(eq(tickets.priority, filters.priority));\n    }\n    \n    if (filters?.department && filters.department !== 'all') {\n      // Join with users to filter by department\n      conditions.push(eq(users.department_id, filters.department));\n    }\n    \n    if (filters?.dateFilter) {\n      const filterDate = new Date(filters.dateFilter);\n      const startDate = startOfDay(filterDate);\n      const endDate = endOfDay(filterDate);\n      conditions.push(\n        and(\n          gte(tickets.createdAt, startDate),\n          lte(tickets.createdAt, endDate)\n        )\n      );\n    }\n\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    // Get total tickets with filters\n    let totalTicketsQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      totalTicketsQuery = totalTicketsQuery.leftJoin(users, eq(tickets.assigned_to, users.id));\n    }\n    if (whereClause) {\n      totalTicketsQuery = totalTicketsQuery.where(whereClause);\n    }\n    const totalTicketsResult = await totalTicketsQuery;\n    const totalTickets = totalTicketsResult[0]?.count || 0;\n\n    // Get open tickets with filters\n    const openConditions = [...conditions, eq(tickets.status, 'open')];\n    let openTicketsQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      openTicketsQuery = openTicketsQuery.leftJoin(users, eq(tickets.assigned_to, users.id));\n    }\n    openTicketsQuery = openTicketsQuery.where(and(...openConditions));\n    const openTicketsResult = await openTicketsQuery;\n    const openTickets = openTicketsResult[0]?.count || 0;\n\n    // Get resolved today with filters\n    const today = startOfDay(new Date());\n    const resolvedConditions = [\n      ...conditions,\n      eq(tickets.status, 'resolved'),\n      gte(tickets.resolved_at, today)\n    ];\n    let resolvedTodayQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      resolvedTodayQuery = resolvedTodayQuery.leftJoin(users, eq(tickets.assigned_to, users.id));\n    }\n    resolvedTodayQuery = resolvedTodayQuery.where(and(...resolvedConditions));\n    const resolvedTodayResult = await resolvedTodayQuery;\n    const resolvedToday = resolvedTodayResult[0]?.count || 0;\n\n    return {\n      totalTickets,\n      openTickets,\n      resolvedToday,\n      avgResponseTime: \"2.5h\",\n      totalTicketsChange: \"+12%\",\n      openTicketsChange: \"-8%\",\n      resolvedTodayChange: \"+25%\",\n      avgResponseTimeChange: \"-15%\",\n    };\n  }\n\n  async getPriorityStats(filters?: any): Promise<PriorityStats> {\n    // Build base filter conditions\n    const baseConditions = [];\n    \n    if (filters?.department && filters.department !== 'all') {\n      baseConditions.push(eq(users.department_id, filters.department));\n    }\n    \n    if (filters?.dateFilter) {\n      const filterDate = new Date(filters.dateFilter);\n      const startDate = startOfDay(filterDate);\n      const endDate = endOfDay(filterDate);\n      baseConditions.push(\n        and(\n          gte(tickets.createdAt, startDate),\n          lte(tickets.createdAt, endDate)\n        )\n      );\n    }\n\n    // Get total with filters (excluding priority filter)\n    let totalQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      totalQuery = totalQuery.leftJoin(users, eq(tickets.assigned_to, users.id));\n    }\n    if (baseConditions.length > 0) {\n      totalQuery = totalQuery.where(and(...baseConditions));\n    }\n    const totalTicketsResult = await totalQuery;\n    const total = totalTicketsResult[0]?.count || 1;\n\n    // Function to get priority count\n    const getPriorityCount = async (priority: string) => {\n      const conditions = [...baseConditions, eq(tickets.priority, priority)];\n      let query = db.select({ count: count() }).from(tickets);\n      if (filters?.department && filters.department !== 'all') {\n        query = query.leftJoin(users, eq(tickets.assigned_to, users.id));\n      }\n      query = query.where(and(...conditions));\n      const result = await query;\n      return result[0]?.count || 0;\n    };\n\n    const critical = await getPriorityCount('critical');\n    const high = await getPriorityCount('high');\n    const medium = await getPriorityCount('medium');\n    const low = await getPriorityCount('low');\n\n    return {\n      critical: { count: critical, percentage: Math.round((critical / total) * 100) },\n      high: { count: high, percentage: Math.round((high / total) * 100) },\n      medium: { count: medium, percentage: Math.round((medium / total) * 100) },\n      low: { count: low, percentage: Math.round((low / total) * 100) },\n    };\n  }\n\n  async getTrendData(days: number, filters?: any): Promise<TrendData[]> {\n    const trends: TrendData[] = [];\n    const today = new Date();\n\n    for (let i = days - 1; i >= 0; i--) {\n      const date = subDays(today, i);\n      const startDate = startOfDay(date);\n      const endDate = endOfDay(date);\n\n      // Build filter conditions for created tickets\n      const createdConditions = [\n        gte(tickets.createdAt, startDate),\n        lte(tickets.createdAt, endDate)\n      ];\n      \n      if (filters?.priority && filters.priority !== 'all') {\n        createdConditions.push(eq(tickets.priority, filters.priority));\n      }\n      \n      if (filters?.department && filters.department !== 'all') {\n        createdConditions.push(eq(users.department_id, filters.department));\n      }\n\n      // Get created tickets count\n      let createdQuery = db.select({ count: count() }).from(tickets);\n      if (filters?.department && filters.department !== 'all') {\n        createdQuery = createdQuery.leftJoin(users, eq(tickets.assigned_to, users.id));\n      }\n      createdQuery = createdQuery.where(and(...createdConditions));\n      const createdResult = await createdQuery;\n      const created = createdResult[0]?.count || 0;\n\n      // Build filter conditions for resolved tickets\n      const resolvedConditions = [\n        eq(tickets.status, 'resolved'),\n        gte(tickets.resolvedAt, startDate),\n        lte(tickets.resolvedAt, endDate)\n      ];\n      \n      if (filters?.priority && filters.priority !== 'all') {\n        resolvedConditions.push(eq(tickets.priority, filters.priority));\n      }\n      \n      if (filters?.department && filters.department !== 'all') {\n        resolvedConditions.push(eq(users.department_id, filters.department));\n      }\n\n      // Get resolved tickets count\n      let resolvedQuery = db.select({ count: count() }).from(tickets);\n      if (filters?.department && filters.department !== 'all') {\n        resolvedQuery = resolvedQuery.leftJoin(users, eq(tickets.assigned_to, users.id));\n      }\n      resolvedQuery = resolvedQuery.where(and(...resolvedConditions));\n      const resolvedResult = await resolvedQuery;\n      const resolved = resolvedResult[0]?.count || 0;\n\n      trends.push({\n        date: format(date, \"dd/MM\"),\n        created,\n        resolved,\n      });\n    }\n\n    return trends;\n  }\n\n  async getFilteredTickets(filters: any): Promise<TicketWithDetails[]> {\n    let query = db.select().from(tickets);\n    \n    const conditions: any[] = [];\n    \n    if (filters.startDate && filters.endDate) {\n      conditions.push(\n        and(\n          gte(tickets.createdAt, new Date(filters.startDate)),\n          lte(tickets.createdAt, new Date(filters.endDate))\n        )\n      );\n    }\n    \n    if (filters.departmentId && filters.departmentId !== 'all') {\n      conditions.push(eq(tickets.responsibleDepartmentId, filters.departmentId));\n    }\n    \n    if (filters.priority && filters.priority !== 'all') {\n      conditions.push(eq(tickets.priority, filters.priority));\n    }\n    \n    if (filters.status && filters.status !== 'all') {\n      conditions.push(eq(tickets.status, filters.status));\n    }\n    \n    if (filters.assignedTo && filters.assignedTo !== 'all') {\n      conditions.push(eq(tickets.assignedTo, filters.assignedTo));\n    }\n    \n    if (filters.createdBy && filters.createdBy !== 'all') {\n      conditions.push(eq(tickets.createdBy, filters.createdBy));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    const filteredTickets = await query.orderBy(desc(tickets.createdAt));\n    \n    const detailedTickets = await Promise.all(\n      filteredTickets.map(ticket => this.getTicket(ticket.id))\n    );\n\n    return detailedTickets.filter(ticket => ticket !== undefined) as TicketWithDetails[];\n  }\n\n  async getDepartmentPerformance(startDate: string, endDate: string): Promise<any[]> {\n    const allDepartments = await db.select().from(departments);\n    const performance = [];\n\n    for (const dept of allDepartments) {\n      const totalTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.responsibleDepartmentId, dept.id),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const resolvedTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.responsibleDepartmentId, dept.id),\n            eq(tickets.status, 'resolved'),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const total = totalTicketsResult[0]?.count || 0;\n      const resolved = resolvedTicketsResult[0]?.count || 0;\n      const pending = total - resolved;\n\n      performance.push({\n        name: dept.name,\n        tickets: total,\n        resolved,\n        pending,\n        resolutionRate: total > 0 ? Math.round((resolved / total) * 100) : 0,\n        avgTime: '2.5h' // Simplified for demo\n      });\n    }\n\n    return performance;\n  }\n\n  async getUserPerformance(startDate: string, endDate: string, departmentId?: string): Promise<any[]> {\n    let userQuery = db.select().from(users);\n    \n    if (departmentId && departmentId !== 'all') {\n      userQuery = userQuery.where(eq(users.departmentId, departmentId));\n    }\n\n    const allUsers = await userQuery;\n    const performance = [];\n\n    for (const user of allUsers) {\n      const assignedTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.assignedTo, user.id),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const resolvedTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.assignedTo, user.id),\n            eq(tickets.status, 'resolved'),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const assigned = assignedTicketsResult[0]?.count || 0;\n      const resolved = resolvedTicketsResult[0]?.count || 0;\n\n      if (assigned > 0) {\n        performance.push({\n          name: user.name,\n          role: user.role,\n          tickets: assigned,\n          resolved,\n          efficiency: assigned > 0 ? Math.round((resolved / assigned) * 100) : 0,\n          satisfaction: 4.5 + Math.random() * 0.5 // Simplified for demo\n        });\n      }\n    }\n\n    return performance.sort((a, b) => b.efficiency - a.efficiency);\n  }\n\n  async getResolutionTimeAnalysis(startDate: string, endDate: string, departmentId?: string): Promise<any[]> {\n    let conditions = [\n      eq(tickets.status, 'resolved'),\n      gte(tickets.createdAt, new Date(startDate)),\n      lte(tickets.createdAt, new Date(endDate))\n    ];\n\n    if (departmentId && departmentId !== 'all') {\n      conditions.push(eq(tickets.departmentId, departmentId));\n    }\n\n    const resolvedTickets = await db\n      .select()\n      .from(tickets)\n      .where(and(...conditions));\n\n    const timeCategories = {\n      '< 1 hora': 0,\n      '1-4 horas': 0,\n      '4-8 horas': 0,\n      '8-24 horas': 0,\n      '> 24 horas': 0\n    };\n\n    resolvedTickets.forEach(ticket => {\n      if (ticket.resolvedAt && ticket.createdAt) {\n        const hours = differenceInHours(new Date(ticket.resolvedAt), new Date(ticket.createdAt));\n        \n        if (hours < 1) timeCategories['< 1 hora']++;\n        else if (hours < 4) timeCategories['1-4 horas']++;\n        else if (hours < 8) timeCategories['4-8 horas']++;\n        else if (hours < 24) timeCategories['8-24 horas']++;\n        else timeCategories['> 24 horas']++;\n      }\n    });\n\n    const total = resolvedTickets.length;\n    return Object.entries(timeCategories).map(([category, count]) => ({\n      category,\n      count,\n      percentage: total > 0 ? Math.round((count / total) * 100) : 0\n    }));\n  }\n\n  // Custom Fields methods\n  async getCustomFields(): Promise<CustomField[]> {\n    return await db.select().from(customFields).orderBy(customFields.order, customFields.name);\n  }\n\n  async getCustomFieldsByCategory(categoryId: string): Promise<CustomField[]> {\n    return await db\n      .select()\n      .from(customFields)\n      .where(and(eq(customFields.categoryId, categoryId), eq(customFields.isActive, true)))\n      .orderBy(customFields.order, customFields.name);\n  }\n\n  async getCustomFieldsByCategoryAndDepartment(categoryId: string, departmentId: string): Promise<CustomField[]> {\n    return await db\n      .select()\n      .from(customFields)\n      .where(and(\n        eq(customFields.categoryId, categoryId), \n        eq(customFields.departmentId, departmentId),\n        eq(customFields.isActive, true)\n      ))\n      .orderBy(customFields.order, customFields.name);\n  }\n\n  async createCustomField(field: InsertCustomField): Promise<CustomField> {\n    const [newField] = await db.insert(customFields).values(field).returning();\n    return newField;\n  }\n\n  async updateCustomField(id: string, updates: Partial<CustomField>): Promise<CustomField | undefined> {\n    const [updatedField] = await db\n      .update(customFields)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(customFields.id, id))\n      .returning();\n    return updatedField || undefined;\n  }\n\n  async deleteCustomField(id: string): Promise<boolean> {\n    const result = await db.delete(customFields).where(eq(customFields.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n  // Security functions for user management\n  async changeUserPassword(id: string, newPassword: string): Promise<boolean> {\n    try {\n      const bcrypt = await import('bcryptjs');\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      const [user] = await db\n        .update(users)\n        .set({ \n          password: hashedPassword,\n          updatedAt: new Date() \n        })\n        .where(eq(users.id, id))\n        .returning();\n      \n      return !!user;\n    } catch (error) {\n      console.error('Error changing user password:', error);\n      return false;\n    }\n  }\n\n  async blockUser(id: string, block: boolean): Promise<boolean> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({ \n          isBlocked: block,\n          updatedAt: new Date() \n        })\n        .where(eq(users.id, id))\n        .returning();\n      \n      return !!user;\n    } catch (error) {\n      console.error('Error blocking/unblocking user:', error);\n      return false;\n    }\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    try {\n      // First, delete related records (tickets, comments, etc.)\n      await db.delete(tickets).where(eq(tickets.assignedTo, id));\n      await db.delete(tickets).where(eq(tickets.requesterId, id));\n      await db.delete(comments).where(eq(comments.authorId, id));\n      \n      // Then delete the user\n      await db.delete(users).where(eq(users.id, id));\n      \n      return true;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":61079},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Definir hierarquia de roles - ordem importa para prioridade\nexport const roleEnum = pgEnum('user_role', ['colaborador', 'supervisor', 'administrador']);\n\n// Sistema de permissões\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  role: text(\"role\").notNull(), // colaborador, supervisor, administrador\n  canManageUsers: boolean(\"can_manage_users\").default(false),\n  canViewAllTickets: boolean(\"can_view_all_tickets\").default(false),\n  canViewDepartmentTickets: boolean(\"can_view_department_tickets\").default(false),\n  canManageTickets: boolean(\"can_manage_tickets\").default(false),\n  canViewReports: boolean(\"can_view_reports\").default(false),\n  canManageSystem: boolean(\"can_manage_system\").default(false),\n  canManageCategories: boolean(\"can_manage_categories\").default(false),\n  canManageDepartments: boolean(\"can_manage_departments\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Departments/Workgroups table\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  isRequester: boolean(\"is_requester\").default(true).notNull(), // Pode solicitar tickets\n  isResponsible: boolean(\"is_responsible\").default(true).notNull(), // Pode atender tickets\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull().default(\"colaborador\"), // colaborador, supervisor, administrador\n  departmentId: varchar(\"department_id\").references(() => departments.id),\n  isActive: boolean(\"is_active\").default(true).notNull(), // Para bloquear/desbloquear usuários\n  isBlocked: boolean(\"is_blocked\").default(false).notNull(), // Status de bloqueio\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const tickets = pgTable(\"tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketNumber: text(\"ticket_number\").notNull().unique(),\n  subject: text(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"open\"), // open, in_progress, resolved, closed\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, critical\n  category: text(\"category\"), // Nome da categoria selecionada\n  tags: text(\"tags\").array(), // Array de tags para categorização adicional\n  requesterDepartmentId: varchar(\"requester_department_id\").references(() => departments.id), // Departamento do solicitante (informativo)\n  responsibleDepartmentId: varchar(\"responsible_department_id\").references(() => departments.id), // Departamento responsável (determina categorização)\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => tickets.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const attachments = pgTable(\"attachments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => tickets.id).notNull(),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  fileType: text(\"file_type\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Categories table linked to departments\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  departmentId: varchar(\"department_id\").references(() => departments.id),\n  slaHours: integer(\"sla_hours\").default(24), // SLA deadline in hours\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Status Configuration table\nexport const statusConfig = pgTable(\"status_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(), // Nome do status (ex: \"Aberto\", \"Em Andamento\", \"Resolvido\")\n  value: text(\"value\").notNull().unique(), // Valor técnico (ex: \"open\", \"in_progress\", \"resolved\")\n  color: text(\"color\").notNull().default(\"#6b7280\"), // Cor hexadecimal para exibição\n  order: integer(\"order\").notNull().default(0), // Ordem de exibição\n  isActive: boolean(\"is_active\").default(true),\n  isDefault: boolean(\"is_default\").default(false), // Status padrão para novos tickets\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Priority Configuration table\nexport const priorityConfig = pgTable(\"priority_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(), // Nome da prioridade (ex: \"Crítica\", \"Alta\", \"Média\", \"Baixa\")\n  value: text(\"value\").notNull().unique(), // Valor técnico (ex: \"critical\", \"high\", \"medium\", \"low\")\n  color: text(\"color\").notNull().default(\"#6b7280\"), // Cor hexadecimal para exibição\n  slaHours: integer(\"sla_hours\").notNull().default(24), // SLA em horas para esta prioridade\n  order: integer(\"order\").notNull().default(0), // Ordem de exibição\n  isActive: boolean(\"is_active\").default(true),\n  isDefault: boolean(\"is_default\").default(false), // Prioridade padrão para novos tickets\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// SLA Rules table\nexport const slaRules = pgTable(\"sla_rules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  departmentId: varchar(\"department_id\").references(() => departments.id), // Nullable - applies to all departments if null\n  category: text(\"category\"), // Nullable - applies to all categories if null\n  priority: text(\"priority\"), // low, medium, high, critical - nullable for non-priority based SLAs\n  timeHours: integer(\"time_hours\").notNull().default(24),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Custom Fields table - fields specific to categories AND departments\nexport const customFields = pgTable(\"custom_fields\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  categoryId: varchar(\"category_id\").references(() => categories.id).notNull(),\n  departmentId: varchar(\"department_id\").references(() => departments.id).notNull(), // Departamento que atende\n  name: text(\"name\").notNull(), // Nome do campo (ex: \"Número do Patrimônio\", \"Setor do Equipamento\")\n  type: text(\"type\").notNull().default(\"text\"), // text, select, number, email, phone, date, checkbox\n  required: boolean(\"required\").default(false),\n  placeholder: text(\"placeholder\"),\n  options: text(\"options\").array(), // Para campos tipo select\n  order: integer(\"order\").notNull().default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Custom Field Values table - stores the actual values for each ticket\nexport const customFieldValues = pgTable(\"custom_field_values\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => tickets.id).notNull(),\n  customFieldId: varchar(\"custom_field_id\").references(() => customFields.id).notNull(),\n  value: text(\"value\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  ticketNumber: true,\n  createdAt: true,\n  updatedAt: true,\n  resolvedAt: true,\n});\n\nexport const insertCustomFieldSchema = createInsertSchema(customFields).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomFieldValueSchema = createInsertSchema(customFieldValues).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttachmentSchema = createInsertSchema(attachments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStatusConfigSchema = createInsertSchema(statusConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPriorityConfigSchema = createInsertSchema(priorityConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSlaRuleSchema = createInsertSchema(slaRules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Custom types that are not inferred from tables\n\nexport interface TicketWithDetails extends Ticket {\n  createdByUser?: User;\n  assignedToUser?: User | null;\n  department?: Department;\n  requesterDepartment?: Department;\n  responsibleDepartment?: Department;\n  comments?: Array<Comment & { user: User }>;\n  attachments?: Attachment[];\n  slaStatus?: 'met' | 'at_risk' | 'violated';\n  slaHoursRemaining?: number;\n  slaHoursTotal?: number;\n  slaSource?: string;\n}\n\n// Export types\nexport type Department = typeof departments.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type StatusConfig = typeof statusConfig.$inferSelect;\nexport type PriorityConfig = typeof priorityConfig.$inferSelect;\nexport type SlaRule = typeof slaRules.$inferSelect;\nexport type CustomField = typeof customFields.$inferSelect;\nexport type CustomFieldValue = typeof customFieldValues.$inferSelect;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertPermission = typeof permissions.$inferInsert;\n\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type InsertAttachment = z.infer<typeof insertAttachmentSchema>;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertStatusConfig = z.infer<typeof insertStatusConfigSchema>;\nexport type InsertPriorityConfig = z.infer<typeof insertPriorityConfigSchema>;\nexport type InsertSlaRule = z.infer<typeof insertSlaRuleSchema>;\nexport type InsertCustomField = z.infer<typeof insertCustomFieldSchema>;\nexport type InsertCustomFieldValue = z.infer<typeof insertCustomFieldValueSchema>;\n\nexport type DashboardStats = {\n  totalTickets: number;\n  openTickets: number;\n  resolvedTickets: number;\n  resolvedToday: number;\n  averageResolutionTime: number;\n  avgResponseTime: string;\n  totalTicketsChange: string;\n  openTicketsChange: string;\n  resolvedTodayChange: string;\n  avgResponseTimeChange: string;\n};\n\nexport type PriorityStats = {\n  critical: { count: number; percentage: number };\n  high: { count: number; percentage: number };\n  medium: { count: number; percentage: number };\n  low: { count: number; percentage: number };\n};\n\nexport type TrendData = {\n  date: string;\n  created: number;\n  resolved: number;\n};\n","size_bytes":13010},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Provider } from \"react-redux\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { store } from \"./store\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport AllTickets from \"@/pages/AllTickets\";\nimport KanbanBoard from \"@/pages/KanbanBoard\";\nimport Analytics from \"@/pages/Analytics\";\nimport Team from \"@/pages/Team\";\nimport Settings from \"@/pages/Settings\";\nimport Profile from \"@/pages/Profile\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport UnauthorizedPage from \"@/pages/UnauthorizedPage\";\nimport SLA from \"@/pages/SLA\";\nimport CreateTicket from \"@/pages/CreateTicket\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport Categories from \"@/pages/Categories\";\nimport CustomFields from \"@/pages/CustomFields\";\nimport PermissionsConfig from \"@/pages/PermissionsConfig\";\nimport FunctionConfig from \"@/pages/FunctionConfig\";\nimport CustomFieldsManager from \"@/pages/CustomFieldsManager\";\nimport DepartmentManager from \"@/pages/DepartmentManager\";\nimport WorkflowApprovals from \"@/pages/WorkflowApprovals\";\nimport Approvals from \"@/pages/Approvals\";\nimport ReportsNew from \"@/pages/ReportsNew\";\nimport Departments from \"@/pages/Departments\";\nimport NotFound from \"@/pages/NotFound\";\nimport UserProfiles from \"@/pages/UserProfiles\";\nimport SLAConfiguration from \"@/pages/SLAConfiguration\";\nimport ConfigurationPage from \"@/pages/ConfigurationPage\";\nimport PermissionSettings from \"@/pages/PermissionSettings\";\nimport HierarchyManagement from \"@/pages/HierarchyManagement\";\nimport RolesManagement from \"@/pages/RolesManagement\";\nimport RoleManagement from \"@/pages/RoleManagement\";\nimport HierarchyDemo from \"@/components/HierarchyDemo\";\nimport { PermissionGuard, AdminOnly, SupervisorOnly } from \"@/components/PermissionGuard\";\nimport { useEffect, useState } from \"react\";\n\n// Simple auth check\nconst useAuth = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<any>(null);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const checkUserStatus = async () => {\n      const token = localStorage.getItem('authToken');\n      const userData = localStorage.getItem('currentUser');\n      \n      if (token && userData) {\n        try {\n          const parsedUser = JSON.parse(userData);\n          \n          // Verificar se o usuário ainda está ativo no sistema\n          const response = await fetch(`/api/users/${parsedUser.id}`);\n          if (response.ok && response.headers.get('content-type')?.includes('application/json')) {\n            const currentUserData = await response.json();\n            \n            // Se o usuário foi bloqueado, fazer logout\n            if (currentUserData.isBlocked) {\n              localStorage.removeItem('authToken');\n              localStorage.removeItem('currentUser');\n              setLocation('/login');\n              return;\n            }\n            \n            // Atualizar dados do usuário se necessário\n            localStorage.setItem('currentUser', JSON.stringify(currentUserData));\n            setUser(currentUserData);\n            setIsAuthenticated(true);\n          } else {\n            // Se o usuário não existe mais, fazer logout\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('currentUser');\n            setLocation('/login');\n            return;\n          }\n        } catch (error) {\n          console.error('Erro ao verificar status do usuário:', error);\n          // Para usuários demo, aceitar sem verificação adicional\n          if (parsedUser.id && (parsedUser.id.includes('admin-') || parsedUser.id.includes('supervisor-') || parsedUser.id.includes('colaborador-'))) {\n            setUser(parsedUser);\n            setIsAuthenticated(true);\n          } else {\n            // Para usuários reais, tentar manter sessão ativa\n            setUser(parsedUser);\n            setIsAuthenticated(true);\n          }\n        }\n      }\n      setIsLoading(false);\n    };\n\n    checkUserStatus();\n  }, [setLocation]);\n\n  const checkPermission = (requiredRole?: string) => {\n    if (!user) return false;\n    if (!requiredRole) return true;\n    \n    const userRole = user.role || user.hierarchy || 'colaborador';\n    console.log('Verificando permissão:', { userRole, requiredRole, user });\n    \n    // Para usuários com role 'admin', tratar como 'administrador'\n    const normalizedRole = userRole === 'admin' ? 'administrador' : userRole;\n    \n    if (requiredRole === 'administrador') {\n      const hasPermission = normalizedRole === 'administrador';\n      console.log('Admin check:', { normalizedRole, hasPermission });\n      return hasPermission;\n    }\n    if (requiredRole === 'supervisor') {\n      const hasPermission = ['supervisor', 'administrador'].includes(normalizedRole);\n      console.log('Supervisor check:', { normalizedRole, hasPermission });\n      return hasPermission;\n    }\n    return true;\n  };\n\n  return { isAuthenticated, isLoading, user, checkPermission };\n};\n\n// Protected Route Component\nconst ProtectedRoute = ({ children, requiredRole }: { children: React.ReactNode, requiredRole?: string }) => {\n  const { isAuthenticated, isLoading, checkPermission } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!isAuthenticated) {\n        setLocation('/login');\n        return;\n      }\n      if (requiredRole && !checkPermission(requiredRole)) {\n        setLocation('/unauthorized');\n        return;\n      }\n    }\n  }, [isAuthenticated, isLoading, requiredRole, setLocation, checkPermission]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || (requiredRole && !checkPermission(requiredRole))) {\n    return null;\n  }\n\n  return <>{children}</>;\n};\n\nfunction AppRouter() {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/unauthorized\" component={UnauthorizedPage} />\n      \n      <Route>\n        <ProtectedRoute>\n          <Layout>\n            <Switch>\n              <Route path=\"/\" component={Dashboard} />\n              <Route path=\"/tickets\" component={KanbanBoard} />\n              <Route path=\"/create-ticket\" component={CreateTicket} />\n              \n              <Route path=\"/analytics\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <Analytics />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/sla\" component={SLA} />\n              \n              <Route path=\"/users\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <UserManagement />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/team\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <Team />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/departments\">\n                <ProtectedRoute requiredRole=\"administrador\">\n                  <DepartmentManager />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/roles\">\n                <ProtectedRoute requiredRole=\"administrador\">\n                  <RolesManagement />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/hierarchy-demo\" component={() => <HierarchyDemo />} />\n              \n              <Route path=\"/categories\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <Categories />\n                </ProtectedRoute>\n              </Route>\n\n              <Route path=\"/fields\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <CustomFieldsManager />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/approvals\" component={Approvals} />\n              <Route path=\"/workflow-approvals\" component={WorkflowApprovals} />\n              \n              <Route path=\"/reports\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <ReportsNew />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/user-profiles\" component={UserProfiles} />\n              \n              <Route path=\"/sla-config\">\n                <ProtectedRoute requiredRole=\"supervisor\">\n                  <SLAConfiguration />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/config\">\n                <ProtectedRoute requiredRole=\"administrador\">\n                  <ConfigurationPage />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/permissions\">\n                <ProtectedRoute requiredRole=\"administrador\">\n                  <FunctionConfig />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/permissions-old\">\n                <ProtectedRoute requiredRole=\"administrador\">\n                  <PermissionsConfig />\n                </ProtectedRoute>\n              </Route>\n              \n              <Route path=\"/settings\" component={Settings} />\n              <Route path=\"/profile\" component={Profile} />\n\n              <Route component={NotFound} />\n            </Switch>\n          </Layout>\n        </ProtectedRoute>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Provider store={store}>\n        <ThemeProvider>\n          <TooltipProvider>\n            <AppRouter />\n            <Toaster />\n          </TooltipProvider>\n        </ThemeProvider>\n      </Provider>\n    </QueryClientProvider>\n  );\n}","size_bytes":10281},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Grupo OPUS Brand Colors */\n    --opus-blue-dark: #2c4257;    /* Azul escuro da logo */\n    --opus-blue-light: #6b8fb0;   /* Azul claro da logo */\n    --opus-blue-accent: #4a6b85;  /* Tom intermediário */\n    --opus-gray-light: #9db4c7;   /* Cinza azulado claro */\n    \n    /* Core Colors - Light Theme com identidade OPUS */\n    --background: #FAFBFC;\n    --foreground: #2c4257;\n    --border: #E2E8F0;\n    --input: #FFFFFF;\n    --ring: #6b8fb0;\n    \n    /* Card Colors */\n    --card: #FFFFFF;\n    --card-foreground: #2c4257;\n    \n    /* Popover Colors */\n    --popover: #FFFFFF;\n    --popover-foreground: #2c4257;\n    \n    /* Muted Colors */\n    --muted: #F8FAFC;\n    --muted-foreground: #6b8fb0;\n    \n    /* Primary Colors - Usando azul OPUS */\n    --primary: #2c4257;\n    --primary-foreground: #FFFFFF;\n    --primary-hover: #243549;\n    \n    /* Secondary Colors - Usando azul claro OPUS */\n    --secondary: #6b8fb0;\n    --secondary-foreground: #FFFFFF;\n    --secondary-hover: #5a7a9a;\n    \n    /* Accent Colors - Mantendo tom complementar */\n    --accent: #4a6b85;\n    --accent-foreground: #FFFFFF;\n    --accent-hover: #3d5870;\n    \n    /* Success Colors */\n    --success: #059669;\n    --success-foreground: #FFFFFF;\n    \n    /* Warning Colors */\n    --warning: #D97706;\n    --warning-foreground: #FFFFFF;\n    \n    /* Error/Destructive Colors */\n    --error: #DC2626;\n    --error-foreground: #FFFFFF;\n    --destructive: #DC2626;\n    --destructive-foreground: #FFFFFF;\n    \n    /* Grayscale system */\n    --gray-10: #F8FAFC;\n    --gray-20: #F1F5F9;\n    --gray-30: #E2E8F0;\n    --gray-50: #64748B;\n    --gray-70: #334155;\n    --gray-90: #0F172A;\n    --gray-100: #1E293B;\n    \n    --radius: 0.375rem;\n    --font-sans: 'Inter', system-ui, sans-serif;\n  }\n\n  .dark {\n    /* Core Colors - Dark Theme com identidade OPUS */\n    --background: #0F1419;\n    --foreground: #9db4c7;\n    --border: #2c4257;\n    --input: #2c4257;\n    --ring: #3B82F6;\n    \n    /* Card Colors */\n    --card: #1E293B;\n    --card-foreground: #F1F5F9;\n    \n    /* Popover Colors */\n    --popover: #1E293B;\n    --popover-foreground: #F1F5F9;\n    \n    /* Muted Colors */\n    --muted: #334155;\n    --muted-foreground: #94A3B8;\n    \n    /* Primary Colors */\n    --primary: #3B82F6;\n    --primary-foreground: #FFFFFF;\n    --primary-hover: #2563EB;\n    \n    /* Secondary Colors */\n    --secondary: #475569;\n    --secondary-foreground: #FFFFFF;\n    --secondary-hover: #64748B;\n    \n    /* Accent Colors */\n    --accent: #F59E0B;\n    --accent-foreground: #000000;\n    --accent-hover: #FBBF24;\n    \n    /* Success Colors */\n    --success: #10B981;\n    --success-foreground: #FFFFFF;\n    \n    /* Warning Colors */\n    --warning: #F59E0B;\n    --warning-foreground: #000000;\n    \n    /* Error/Destructive Colors */\n    --error: #EF4444;\n    --error-foreground: #FFFFFF;\n    --destructive: #EF4444;\n    --destructive-foreground: #FFFFFF;\n    \n    /* Grayscale system - Dark */\n    --gray-10: #0F172A;\n    --gray-20: #1E293B;\n    --gray-30: #334155;\n    --gray-50: #64748B;\n    --gray-70: #94A3B8;\n    --gray-90: #F1F5F9;\n    --gray-100: #F8FAFC;\n  }\n  \n  * {\n    @apply border-border;\n    box-sizing: border-box;\n    line-height: normal;\n    font-family: inherit;\n    margin: unset;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    margin: 0;\n    padding: 0;\n    font-family: Inter;\n  }\n}\n\n@layer utilities {\n  .text-shadow-sm {\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  }\n  \n  .shadow-enterprise {\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  }\n  \n  .shadow-enterprise-lg {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  }\n  \n  .transition-enterprise {\n    transition: all 200ms ease-out;\n  }\n  \n  .transition-modal {\n    transition: all 300ms ease-in-out;\n  }\n}","size_bytes":4070},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CreateTicketModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { X, Upload } from \"lucide-react\";\nimport { insertTicketSchema } from \"@shared/schema\";\nimport type { InsertTicket, User, Department, Category } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\ninterface CreateTicketModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateTicketModal({ isOpen, onClose }: CreateTicketModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"\");\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: isOpen,\n  });\n\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n    enabled: isOpen,\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories/department\", selectedDepartment],\n    enabled: isOpen && !!selectedDepartment,\n  });\n\n  const form = useForm<InsertTicket>({\n    resolver: zodResolver(insertTicketSchema.extend({\n      subject: insertTicketSchema.shape.subject.min(1, \"Assunto é obrigatório\").max(100, \"Assunto deve ter menos de 100 caracteres\"),\n      description: insertTicketSchema.shape.description.min(10, \"Descrição deve ter pelo menos 10 caracteres\"),\n    })),\n    defaultValues: {\n      subject: \"\",\n      description: \"\",\n      priority: \"medium\",\n      category: \"\",\n      responsibleDepartmentId: \"\",\n      requesterDepartmentId: \"\",\n      assignedTo: null,\n    },\n  });\n\n  // Reset category when department changes\n  useEffect(() => {\n    if (selectedDepartment) {\n      form.setValue(\"category\", \"\");\n    }\n  }, [selectedDepartment, form]);\n\n  // Simular usuário logado (pegar usuário admin com departamento)\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: InsertTicket) => {\n      // In a real app, createdBy would come from authenticated user\n      if (!currentUser) {\n        throw new Error(\"Usuário não encontrado\");\n      }\n\n      const ticketData = { \n        ...data, \n        createdBy: currentUser.id,\n        requesterDepartmentId: currentUser.departmentId || null,\n      };\n      const response = await apiRequest(\"/api/tickets\", \"POST\", ticketData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Ticket criado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      form.reset();\n      setSelectedFiles([]);\n      setSelectedDepartment(\"\");\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      const files = Array.from(event.target.files);\n      setSelectedFiles(prev => [...prev, ...files]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const onSubmit = (data: InsertTicket) => {\n    createTicketMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    if (!createTicketMutation.isPending) {\n      form.reset();\n      setSelectedFiles([]);\n      setSelectedDepartment(\"\");\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Criar Novo Ticket\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              disabled={createTicketMutation.isPending}\n              className=\"h-auto p-1\"\n            >\n              <X size={20} />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assunto *</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Descrição breve do problema\"\n                        className=\"focus:ring-primary focus:border-primary\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prioridade *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                          <SelectValue placeholder=\"Selecionar prioridade\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Baixa</SelectItem>\n                        <SelectItem value=\"medium\">Média</SelectItem>\n                        <SelectItem value=\"high\">Alta</SelectItem>\n                        <SelectItem value=\"critical\">Crítica</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Forneça detalhes sobre o problema, incluindo passos para reproduzir, mensagens de erro, etc.\"\n                      className=\"min-h-[120px] focus:ring-primary focus:border-primary\"\n                      rows={5}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Informação do solicitante - apenas informativo */}\n            <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                  Solicitante:\n                </span>\n                <span className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  {currentUser?.name} - {currentUser?.departmentId ? \n                    departments?.find(d => d.id === currentUser.departmentId)?.name || 'Departamento não especificado'\n                    : 'Departamento não especificado'\n                  }\n                </span>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                <h3 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-3\">\n                  Categorização\n                </h3>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-4\">\n                  Classifique o tipo e prioridade do chamado\n                </p>\n                \n                <div className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"responsibleDepartmentId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Departamento *</FormLabel>\n                        <Select \n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            setSelectedDepartment(value);\n                            form.setValue(\"category\", \"\"); // Reset category when department changes\n                          }} \n                          value={field.value || \"\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                              <SelectValue placeholder=\"Selecione o departamento\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {departments?.map((dept) => (\n                              <SelectItem key={dept.id} value={dept.id}>\n                                {dept.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Categoria *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange} \n                          value={field.value || \"\"}\n                          disabled={!selectedDepartment}\n                        >\n                          <FormControl>\n                            <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                              <SelectValue \n                                placeholder={\n                                  !selectedDepartment \n                                    ? \"Selecione um departamento primeiro\" \n                                    : \"Selecione a categoria\"\n                                } \n                              />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories?.map((category) => (\n                              <SelectItem key={category.id} value={category.name}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                        {selectedDepartment && categories?.length === 0 && (\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Nenhuma categoria disponível para este departamento\n                          </p>\n                        )}\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Responsável</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                      <FormControl>\n                        <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                          <SelectValue placeholder=\"Atribuição automática\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {users?.map((user) => (\n                          <SelectItem key={user.id} value={user.id}>\n                            {user.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Descrição detalhada do problema, passos para reproduzir, comportamento esperado...\"\n                      className=\"h-32 resize-none focus:ring-primary focus:border-primary\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* File Upload */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-100 mb-2\">Anexos</label>\n              <div className=\"border-2 border-dashed border-gray-20 rounded-lg p-6 text-center\">\n                <Upload className=\"mx-auto text-3xl text-gray-30 mb-3\" size={48} />\n                <p className=\"text-sm text-gray-50 mb-2\">Arraste e solte arquivos aqui ou clique para navegar</p>\n                <input\n                  type=\"file\"\n                  multiple\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  id=\"fileUpload\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"text-primary hover:text-primary-hover font-medium text-sm\"\n                  onClick={() => document.getElementById('fileUpload')?.click()}\n                >\n                  Escolher Arquivos\n                </Button>\n              </div>\n              {selectedFiles.length > 0 && (\n                <div className=\"mt-3 space-y-2\">\n                  {selectedFiles.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between bg-gray-10 p-2 rounded\">\n                      <span className=\"text-sm text-gray-70\">{file.name}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(index)}\n                        className=\"text-error hover:text-error h-auto p-1\"\n                      >\n                        <X size={16} />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center justify-end space-x-3 pt-4 border-t border-gray-20\">\n              <Button \n                type=\"button\" \n                variant=\"ghost\" \n                onClick={handleClose}\n                disabled={createTicketMutation.isPending}\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTicketMutation.isPending}\n                className=\"bg-primary hover:bg-primary-hover text-white\"\n              >\n                {createTicketMutation.isPending ? \"Criando...\" : \"Criar Ticket\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16496},"client/src/components/Layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport Header from \"./Header\";\nimport Sidebar from \"./NewSidebar\";\nimport SimpleTicketModal from \"./SimpleTicketModal\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  title?: string;\n  description?: string;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n        isSidebarCollapsed={isSidebarCollapsed}\n      />\n      <div className=\"flex pt-16\">\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          isCollapsed={isSidebarCollapsed}\n          onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)}\n          onOpenTicketModal={() => setIsTicketModalOpen(true)}\n        />\n        <main className={`flex-1 transition-all duration-300 ${\n          isSidebarCollapsed ? 'lg:ml-16' : 'lg:ml-60'\n        }`}>\n          {children}\n        </main>\n      </div>\n      \n      <SimpleTicketModal \n        isOpen={isTicketModalOpen}\n        onClose={() => setIsTicketModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":1377},"client/src/components/PriorityBreakdown.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { PriorityStats } from \"@shared/schema\";\n\nconst priorityConfig = {\n  critical: { color: \"bg-error\", textColor: \"text-error\" },\n  high: { color: \"bg-warning\", textColor: \"text-warning\" },\n  medium: { color: \"bg-primary\", textColor: \"text-primary\" },\n  low: { color: \"bg-success\", textColor: \"text-success\" },\n};\n\ninterface PriorityBreakdownProps {\n  filters?: {\n    dateFilter: string;\n    priorityFilter: string;\n    departmentFilter: string;\n  };\n}\n\nexport default function PriorityBreakdown({ filters }: PriorityBreakdownProps) {\n  // Build query parameters\n  const buildQueryParams = () => {\n    const params = new URLSearchParams();\n    if (filters?.dateFilter) params.append('dateFilter', filters.dateFilter);\n    if (filters?.departmentFilter && filters.departmentFilter !== 'all') params.append('department', filters.departmentFilter);\n    // Note: We don't include priority filter for priority breakdown as it would skew the distribution\n    return params.toString();\n  };\n\n  const queryParams = buildQueryParams();\n\n  const { data: priorityStats, isLoading } = useQuery<PriorityStats>({\n    queryKey: [\"/api/dashboard/priority-stats\", queryParams],\n    queryFn: async () => {\n      const url = `/api/dashboard/priority-stats${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch priority stats');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-gray-20 rounded-full\"></div>\n                <div className=\"h-4 bg-gray-20 rounded w-16\"></div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-32 bg-gray-20 rounded-full h-2\"></div>\n                <div className=\"h-4 bg-gray-20 rounded w-8\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!priorityStats) {\n    return (\n      <div className=\"text-center text-gray-50\">\n        No priority data available\n      </div>\n    );\n  }\n\n  const priorities = [\n    { key: \"critical\", label: \"Critical\", ...priorityStats.critical },\n    { key: \"high\", label: \"High\", ...priorityStats.high },\n    { key: \"medium\", label: \"Medium\", ...priorityStats.medium },\n    { key: \"low\", label: \"Low\", ...priorityStats.low },\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {priorities.map((priority) => {\n        const config = priorityConfig[priority.key as keyof typeof priorityConfig];\n        \n        return (\n          <div key={priority.key} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-3 h-3 ${config.color} rounded-full`}></div>\n              <span className=\"text-sm text-gray-70\">{priority.label}</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-32 bg-gray-20 rounded-full h-2\">\n                <div \n                  className={`${config.color} h-2 rounded-full transition-all duration-300`}\n                  style={{ width: `${priority.percentage}%` }}\n                ></div>\n              </div>\n              <span className=\"text-sm font-medium text-gray-100 w-8 text-right\">\n                {priority.count}\n              </span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3729},"client/src/components/RecentTicketsTable.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Eye, Edit, MoreHorizontal, User, Calendar, AlertTriangle, Clock, CheckCircle2, Circle, Timer, ArrowRight, Trash2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nimport type { TicketWithDetails } from \"@shared/schema\";\n\n// Função para converter cor hex para classes de badge\nconst hexToBadgeClasses = (hex: string) => {\n  const colorMap: Record<string, string> = {\n    '#3b82f6': 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',\n    '#f59e0b': 'bg-amber-100 text-amber-800 dark:bg-amber-900/20 dark:text-amber-400',\n    '#10b981': 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/20 dark:text-emerald-400',\n    '#6b7280': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',\n    '#8b5cf6': 'bg-violet-100 text-violet-800 dark:bg-violet-900/20 dark:text-violet-400',\n    '#ef4444': 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n    '#dc2626': 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n    '#f87171': 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n    '#f97316': 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400',\n    '#06b6d4': 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900/20 dark:text-cyan-400',\n    '#84cc16': 'bg-lime-100 text-lime-800 dark:bg-lime-900/20 dark:text-lime-400',\n    '#ec4899': 'bg-pink-100 text-pink-800 dark:bg-pink-900/20 dark:text-pink-400',\n  };\n  return colorMap[hex] || 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n};\n\ninterface RecentTicketsTableProps {\n  limit?: number;\n}\n\nexport default function RecentTicketsTable({ limit = 10 }: RecentTicketsTableProps) {\n  const { data: tickets = [], isLoading } = useQuery<TicketWithDetails[]>({\n    queryKey: [\"/api/tickets\"],\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mutation para deletar ticket\n  const deleteTicketMutation = useMutation({\n    mutationFn: async (ticketId: string) => {\n      await apiRequest(`/api/tickets/${ticketId}`, {\n        method: 'DELETE',\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket excluído\",\n        description: \"O ticket foi excluído com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n    },\n    onError: (error) => {\n      console.error('Erro ao excluir ticket:', error);\n      toast({\n        title: \"Erro ao excluir\",\n        description: \"Não foi possível excluir o ticket. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteTicket = (ticketId: string) => {\n    if (window.confirm('Tem certeza que deseja excluir este ticket? Esta ação não pode ser desfeita.')) {\n      deleteTicketMutation.mutate(ticketId);\n    }\n  };\n\n  // Buscar configurações dinâmicas\n  const { data: statusConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/status'],\n  });\n\n  const { data: priorityConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/priority'],\n  });\n\n  const recentTickets = tickets.slice(0, limit);\n\n  // Funções para obter cores e labels dinâmicos\n  const getStatusColor = (status: string) => {\n    const config = statusConfigs?.find(s => s.value === status);\n    if (config?.color) {\n      return hexToBadgeClasses(config.color);\n    }\n    return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n  };\n\n  const getStatusLabel = (status: string) => {\n    const config = statusConfigs?.find(s => s.value === status);\n    return config?.name || status;\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority);\n    if (config?.color) {\n      return hexToBadgeClasses(config.color);\n    }\n    return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n  };\n\n  const getPriorityLabel = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority);\n    return config?.name || priority;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"Hoje\";\n    if (diffDays === 2) return \"Ontem\";\n    if (diffDays <= 7) return `${diffDays} dias atrás`;\n    \n    return date.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Clock className=\"w-5 h-5\" />\n            <span>Tickets Recentes</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Clock className=\"w-5 h-5 text-blue-600\" />\n            <span>Tickets Recentes</span>\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-700\">\n            Ver todos\n            <ArrowRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {recentTickets.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-slate-100 dark:bg-slate-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Clock className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">\n              Nenhum ticket encontrado\n            </h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">\n              Quando novos tickets forem criados, eles aparecerão aqui.\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n            {recentTickets.map((ticket, index) => {\n              \n              return (\n                <div key={ticket.id} className=\"p-6 hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 min-w-0\">\n                      {/* Header com ID e Status */}\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <span className=\"text-sm font-mono font-semibold text-blue-600 dark:text-blue-400\">\n                          #{ticket.ticketNumber}\n                        </span>\n                        <Badge className={`${getStatusColor(ticket.status)} text-xs font-medium`}>\n                          <span>{getStatusLabel(ticket.status)}</span>\n                        </Badge>\n                        <Badge className={`${getPriorityColor(ticket.priority)} text-xs font-medium`}>\n                          <span>{getPriorityLabel(ticket.priority)}</span>\n                        </Badge>\n                      </div>\n                      \n                      {/* Título do Ticket */}\n                      <h3 className=\"text-base font-semibold text-slate-900 dark:text-slate-100 mb-2 line-clamp-1\">\n                        {ticket.subject}\n                      </h3>\n                      \n                      {/* Informações do Ticket */}\n                      <div className=\"flex items-center space-x-6 text-sm text-slate-600 dark:text-slate-400\">\n                        <div className=\"flex items-center space-x-2\">\n                          <User className=\"w-4 h-4\" />\n                          <span>Solicitante:</span>\n                          <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                            {ticket.createdByUser?.name || 'Usuário'}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>{formatDate(ticket.createdAt)}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <span>Departamento:</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {ticket.department?.name || 'Não especificado'}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {/* Assignee */}\n                      {ticket.assignedToUser && (\n                        <div className=\"flex items-center space-x-2 mt-3\">\n                          <span className=\"text-sm text-slate-600 dark:text-slate-400\">Atribuído para:</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-blue-600 dark:text-blue-400\">\n                                {getInitials(ticket.assignedToUser.name)}\n                              </span>\n                            </div>\n                            <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                              {ticket.assignedToUser.name}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Ações */}\n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-slate-600 hover:text-blue-600\"\n                        title=\"Visualizar ticket\"\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-slate-600 hover:text-green-600\"\n                        title=\"Editar ticket\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-slate-600 hover:text-slate-900\"\n                            title=\"Mais opções\"\n                          >\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\" className=\"w-48\">\n                          <DropdownMenuItem>\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            Visualizar ticket\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Editar ticket\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem \n                            className=\"text-red-600 focus:text-red-600 focus:bg-red-50\"\n                            onClick={() => handleDeleteTicket(ticket.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Excluir ticket\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Footer com estatísticas rápidas */}\n        {recentTickets.length > 0 && (\n          <div className=\"px-6 py-4 bg-slate-50 dark:bg-slate-800/50 border-t border-slate-200 dark:border-slate-700\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-slate-600 dark:text-slate-400\">\n                  Mostrando {recentTickets.length} de {tickets.length} tickets\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-blue-500\"></div>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {recentTickets.filter(t => t.status === 'open').length} Abertos\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {recentTickets.filter(t => t.status === 'in_progress').length} Em Progresso\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {recentTickets.filter(t => t.status === 'resolved').length} Resolvidos\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14804},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  List, \n  Columns, \n  BarChart3, \n  Users, \n  Settings, \n  Ticket,\n  LogOut,\n  User,\n  Bell,\n  Shield,\n  Building2\n} from \"lucide-react\";\nimport { getCurrentUser } from '@/lib/userService';\n\nconst getNavigationItems = (userRole: string) => {\n  const baseItems = [\n    { path: \"/\", icon: LayoutDashboard, label: \"Painel\" },\n    { path: \"/tickets\", icon: List, label: \"Todos os Tickets\" },\n    { path: \"/kanban\", icon: Columns, label: \"Quadro Kanban\" },\n    { path: \"/analytics\", icon: BarChart3, label: \"Análises\" },\n    { path: \"/team\", icon: Users, label: \"Equipe\" },\n    { path: \"/config\", icon: Settings, label: \"Status e Prioridades\" },\n  ];\n\n  // Adicionar seção de administração apenas para administradores\n  if (userRole === 'administrador') {\n    baseItems.push({ path: \"/departments\", icon: Building2, label: \"Departamentos\" });\n    baseItems.push({ path: \"/users\", icon: Users, label: \"Usuários\" });\n    baseItems.push({ path: \"/roles\", icon: Shield, label: \"Funções\" });\n    baseItems.push({ path: \"/hierarchy\", icon: Shield, label: \"Hierarquias\" });\n  }\n\n  baseItems.push({ path: \"/settings\", icon: Settings, label: \"Configurações\" });\n\n  return baseItems;\n};\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const currentUser = getCurrentUser();\n  const navigationItems = getNavigationItems(currentUser.role);\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-border flex-shrink-0 flex flex-col shadow-enterprise\">\n      {/* Logo and Brand */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-opus-blue-dark rounded flex items-center justify-center\">\n            <Ticket className=\"text-white\" size={16} />\n          </div>\n          <div>\n            <h1 className=\"text-sm font-semibold text-foreground\">TicketFlow Pro</h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"p-2 space-y-1 flex-1\">\n        {navigationItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={`flex items-center space-x-3 px-3 py-2 rounded text-sm font-medium transition-enterprise cursor-pointer ${\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                }`}\n              >\n                <Icon size={16} />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"relative w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium\" \n               style={{ background: 'linear-gradient(135deg, #2c4257 0%, #6b8fb0 100%)' }}>\n            <span>JS</span>\n            <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 border-2 border-white rounded-full\"></div>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\">{currentUser.name}</p>\n            <p className=\"text-xs text-muted-foreground truncate\">\n              {currentUser.role === 'administrador' ? 'Administrador' : \n               currentUser.role === 'supervisor' ? 'Supervisor' : 'Colaborador'}\n            </p>\n          </div>\n          <div className=\"flex space-x-1\">\n            <button className=\"p-1 text-muted-foreground hover:text-primary transition-enterprise\">\n              <Bell size={16} />\n            </button>\n            <button className=\"p-1 text-muted-foreground hover:text-destructive transition-enterprise\">\n              <LogOut size={16} />\n            </button>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4133},"client/src/components/StatsCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change: string;\n  changeType: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n  onClick?: () => void;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType, \n  icon: Icon, \n  iconColor,\n  iconBgColor,\n  onClick\n}: StatsCardProps) {\n  const getChangeColor = () => {\n    switch (changeType) {\n      case \"positive\":\n        return \"text-success\";\n      case \"negative\":\n        return \"text-error\";\n      default:\n        return \"text-gray-50\";\n    }\n  };\n\n  const getChangeIcon = () => {\n    if (changeType === \"positive\") return \"↗\";\n    if (changeType === \"negative\") return \"↘\";\n    return \"\";\n  };\n\n  return (\n    <div \n      className={`bg-card border border-border rounded p-6 shadow-enterprise transition-enterprise hover:shadow-enterprise-lg ${onClick ? 'cursor-pointer hover:bg-gray-50' : ''}`}\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium text-muted-foreground mb-1\">{title}</p>\n          <p className=\"text-2xl font-semibold text-foreground mb-2\">{value}</p>\n          <div className={`inline-flex items-center text-xs font-medium ${getChangeColor()}`}>\n            <span className=\"mr-1\">{getChangeIcon()}</span>\n            {change}\n          </div>\n        </div>\n        <div className={`w-12 h-12 ${iconBgColor} rounded flex items-center justify-center`}>\n          <Icon className={iconColor} size={20} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1691},"client/src/components/TicketTrendsChart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport type { TrendData } from \"@shared/schema\";\n\ninterface TicketTrendsChartProps {\n  days: number;\n  filters?: {\n    dateFilter: string;\n    priorityFilter: string;\n    departmentFilter: string;\n  };\n}\n\nexport default function TicketTrendsChart({ days, filters }: TicketTrendsChartProps) {\n  // Build query parameters\n  const buildQueryParams = () => {\n    const params = new URLSearchParams();\n    params.append('days', days.toString());\n    if (filters?.dateFilter) params.append('dateFilter', filters.dateFilter);\n    if (filters?.priorityFilter && filters.priorityFilter !== 'all') params.append('priority', filters.priorityFilter);\n    if (filters?.departmentFilter && filters.departmentFilter !== 'all') params.append('department', filters.departmentFilter);\n    return params.toString();\n  };\n\n  const queryParams = buildQueryParams();\n\n  const { data: trendData, isLoading } = useQuery<TrendData[]>({\n    queryKey: [\"/api/dashboard/trends\", queryParams],\n    queryFn: () => fetch(`/api/dashboard/trends?${queryParams}`).then(res => res.json()),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-gray-50\">Loading chart...</div>\n      </div>\n    );\n  }\n\n  if (!trendData || trendData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-gray-500\">Sem dados disponíveis</div>\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={trendData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <defs>\n            <linearGradient id=\"colorCreated\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n              <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.05}/>\n            </linearGradient>\n            <linearGradient id=\"colorResolved\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#22c55e\" stopOpacity={0.3}/>\n              <stop offset=\"95%\" stopColor=\"#22c55e\" stopOpacity={0.05}/>\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" opacity={0.5} />\n          <XAxis \n            dataKey=\"date\" \n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: \"#6b7280\", fontSize: 12 }}\n            className=\"text-xs\"\n          />\n          <YAxis \n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: \"#6b7280\", fontSize: 12 }}\n            className=\"text-xs\"\n          />\n          <Tooltip \n            contentStyle={{\n              backgroundColor: \"white\",\n              border: \"1px solid #e5e7eb\",\n              borderRadius: \"8px\",\n              boxShadow: \"0 4px 6px -1px rgba(0, 0, 0, 0.1)\",\n            }}\n            labelStyle={{ color: \"#374151\", fontWeight: \"600\" }}\n          />\n          <Legend \n            wrapperStyle={{ paddingTop: \"20px\" }}\n            iconType=\"rect\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"created\"\n            stroke=\"#3b82f6\"\n            fillOpacity={1}\n            fill=\"url(#colorCreated)\"\n            strokeWidth={2}\n            name=\"Criados\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"resolved\"\n            stroke=\"#22c55e\"\n            fillOpacity={1}\n            fill=\"url(#colorResolved)\"\n            strokeWidth={2}\n            name=\"Resolvidos\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":3774},"client/src/components/TopBar.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SimpleTicketModal from \"./SimpleTicketModal\";\n\ninterface TopBarProps {\n  title: string;\n  description?: string;\n}\n\nexport default function TopBar({ title, description }: TopBarProps) {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <>\n      <header className=\"bg-card border-b border-border px-6 py-4 shadow-enterprise\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-xl font-semibold text-foreground\">{title}</h1>\n            {description && (\n              <p className=\"text-sm text-muted-foreground\">{description}</p>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar tickets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64 pl-10 bg-input border-border focus:ring-2 focus:ring-primary/20 focus:border-primary text-sm placeholder:text-muted-foreground\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n            </div>\n            \n            {/* Notifications */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"relative text-muted-foreground hover:text-foreground hover:bg-muted transition-enterprise\"\n            >\n              <Bell size={16} />\n              <span className=\"absolute -top-1 -right-1 bg-destructive text-destructive-foreground text-xs rounded-full w-4 h-4 flex items-center justify-center font-medium\">\n                3\n              </span>\n            </Button>\n\n            {/* Create Ticket Button */}\n            <Button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('TopBar button clicked, opening modal');\n                setIsCreateModalOpen(true);\n              }}\n              className=\"bg-primary hover:bg-primary-hover text-primary-foreground font-medium transition-enterprise\"\n            >\n              <Plus size={16} className=\"mr-2\" />\n              Criar Ticket\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <SimpleTicketModal \n        isOpen={isCreateModalOpen} \n        onClose={() => setIsCreateModalOpen(false)} \n      />\n    </>\n  );\n}\n","size_bytes":2812},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string = 'GET',\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1391},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AllTickets.tsx":{"content":"import TopBar from \"@/components/TopBar\";\n\nexport default function AllTickets() {\n  return (\n    <>\n      <TopBar \n        title=\"Todos os Tickets\" \n        description=\"Visualizar e gerenciar todos os tickets de suporte\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 bg-gray-10\">\n        <div className=\"bg-white rounded-lg border border-gray-20 p-8 text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">Visualização de Todos os Tickets</h3>\n          <p className=\"text-gray-50\">Esta página conterá uma tabela abrangente de tickets com recursos de filtragem e classificação.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":674},"client/src/pages/Analytics.tsx":{"content":"import TopBar from \"@/components/TopBar\";\n\nexport default function Analytics() {\n  return (\n    <>\n      <TopBar \n        title=\"Análises\" \n        description=\"Insights profundos sobre o desempenho do gerenciamento de tickets\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 bg-gray-10\">\n        <div className=\"bg-white rounded-lg border border-gray-20 p-8 text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">Painel de Análises</h3>\n          <p className=\"text-gray-50\">Esta página conterá funcionalidades detalhadas de análise e relatórios.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":642},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Ticket, Hourglass, CheckCircle, Clock, AlertTriangle, TrendingUp, Users, Timer, Target, Activity } from \"lucide-react\";\nimport StatsCard from \"@/components/StatsCard\";\nimport TicketTrendsChart from \"@/components/TicketTrendsChart\";\nimport PriorityBreakdown from \"@/components/PriorityBreakdown\";\n// Removed RecentTicketsTable as requested\nimport { Search, Filter, Calendar } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { DashboardStats, Department } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [chartPeriod, setChartPeriod] = useState(\"7\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [dateFilter, setDateFilter] = useState('');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [departmentFilter, setDepartmentFilter] = useState('all');\n\n  const navigateToTickets = (filter?: string) => {\n    let path = '/tickets';\n    if (filter) {\n      path += `?filter=${filter}`;\n    }\n    setLocation(path);\n  };\n\n  // Build query parameters for filters\n  const buildQueryParams = () => {\n    const params = new URLSearchParams();\n    if (dateFilter) params.append('dateFilter', dateFilter);\n    if (priorityFilter !== 'all') params.append('priority', priorityFilter);\n    if (departmentFilter !== 'all') params.append('department', departmentFilter);\n    return params.toString();\n  };\n\n  const queryParams = buildQueryParams();\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\", queryParams],\n    queryFn: async () => {\n      const url = `/api/dashboard/stats${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch stats');\n      return response.json();\n    }\n  });\n\n  // Fetch departments for filter dropdown\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Enhanced indicators data\n  const performanceIndicators = [\n    {\n      title: \"SLA Compliance\",\n      value: \"94.2%\",\n      target: \"95%\",\n      change: \"+2.1%\",\n      trend: \"up\",\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n      progress: 94.2\n    },\n    {\n      title: \"Tempo Médio de Resolução\",\n      value: \"4.2h\",\n      target: \"4h\",\n      change: \"-0.3h\",\n      trend: \"down\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n      progress: 89\n    },\n    {\n      title: \"Taxa de Satisfação\",\n      value: \"4.8/5\",\n      target: \"4.5/5\",\n      change: \"+0.2\",\n      trend: \"up\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n      progress: 96\n    },\n    {\n      title: \"Tickets Escalados\",\n      value: \"12\",\n      target: \"< 15\",\n      change: \"-3\",\n      trend: \"down\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      progress: 80\n    }\n  ];\n\n  const teamMetrics = [\n    { name: \"João Silva\", tickets: 28, resolved: 24, efficiency: 85.7 },\n    { name: \"Maria Santos\", tickets: 31, resolved: 29, efficiency: 93.5 },\n    { name: \"Pedro Costa\", tickets: 22, resolved: 19, efficiency: 86.4 },\n    { name: \"Ana Oliveira\", tickets: 26, resolved: 25, efficiency: 96.2 }\n  ];\n\n  const departmentStats = [\n    { name: \"TI\", tickets: 45, resolved: 38, pending: 7, sla: 92 },\n    { name: \"RH\", tickets: 23, resolved: 21, pending: 2, sla: 95 },\n    { name: \"Financeiro\", tickets: 18, resolved: 16, pending: 2, sla: 89 },\n    { name: \"Operações\", tickets: 31, resolved: 27, pending: 4, sla: 87 }\n  ];\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      {/* Header with filters */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n          <p className=\"text-gray-600\">Visão geral do sistema de tickets</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Filter className=\"w-4 h-4\" />\n            <span>Filtros Avançados</span>\n          </button>\n          <Select value={chartPeriod} onValueChange={setChartPeriod}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">7 dias</SelectItem>\n              <SelectItem value=\"30\">30 dias</SelectItem>\n              <SelectItem value=\"90\">90 dias</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Advanced Filters Panel */}\n      {showFilters && (\n        <div className=\"mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Filtros do Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Período</Label>\n                  <Input\n                    type=\"date\"\n                    value={dateFilter}\n                    onChange={(e) => setDateFilter(e.target.value)}\n                    className=\"w-full\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Prioridade</Label>\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todas as Prioridades\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todas as Prioridades</SelectItem>\n                      <SelectItem value=\"critical\">Crítica</SelectItem>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                      <SelectItem value=\"medium\">Média</SelectItem>\n                      <SelectItem value=\"low\">Baixa</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Departamento</Label>\n                  <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Departamentos\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Departamentos</SelectItem>\n                      {departments?.map((dept) => (\n                        <SelectItem key={dept.id} value={dept.id}>\n                          {dept.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n      \n      <div className=\"space-y-8\">\n        {/* Primary Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total de Tickets\"\n            value={stats?.totalTickets || 127}\n            change={stats?.totalTicketsChange || \"+8.2%\"}\n            changeType=\"positive\"\n            icon={Ticket}\n            iconColor=\"text-blue-600\"\n            iconBgColor=\"bg-blue-50\"\n            onClick={() => navigateToTickets('all')}\n          />\n          <StatsCard\n            title=\"Tickets Abertos\"\n            value={stats?.openTickets || 23}\n            change={stats?.openTicketsChange || \"-12%\"}\n            changeType=\"negative\"\n            icon={Hourglass}\n            iconColor=\"text-yellow-600\"\n            iconBgColor=\"bg-yellow-50\"\n            onClick={() => navigateToTickets('open')}\n          />\n          <StatsCard\n            title=\"Resolvidos Hoje\"\n            value={stats?.resolvedToday || 15}\n            change={stats?.resolvedTodayChange || \"+23%\"}\n            changeType=\"positive\"\n            icon={CheckCircle}\n            iconColor=\"text-green-600\"\n            iconBgColor=\"bg-green-50\"\n            onClick={() => navigateToTickets('resolved')}\n          />\n          <StatsCard\n            title=\"Críticos Pendentes\"\n            value={8}\n            change=\"-2\"\n            changeType=\"negative\"\n            icon={AlertTriangle}\n            iconColor=\"text-red-600\"\n            iconBgColor=\"bg-red-50\"\n            onClick={() => navigateToTickets('critical')}\n          />\n        </div>\n\n        {/* Performance Indicators */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {performanceIndicators.map((indicator, index) => (\n            <Card key={index} className=\"border-0 shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`p-2 rounded-lg ${indicator.bgColor}`}>\n                    <Target className={`w-5 h-5 ${indicator.color}`} />\n                  </div>\n                  <Badge variant={indicator.trend === \"up\" ? \"default\" : \"secondary\"}>\n                    {indicator.change}\n                    <TrendingUp className=\"w-3 h-3 ml-1\" />\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-medium text-gray-600\">{indicator.title}</h3>\n                  </div>\n                  <div className=\"flex items-baseline space-x-2\">\n                    <span className=\"text-2xl font-bold text-gray-900\">{indicator.value}</span>\n                    <span className=\"text-sm text-gray-500\">meta: {indicator.target}</span>\n                  </div>\n                  <Progress value={indicator.progress} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Analytics Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Ticket Trends Chart */}\n          <div className=\"lg:col-span-2 bg-card border border-border rounded-lg p-6 shadow-sm\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Tendências de Tickets</h2>\n              <Select value={chartPeriod} onValueChange={setChartPeriod}>\n                <SelectTrigger className=\"w-40 text-sm border-border\">\n                  <SelectValue placeholder=\"Selecionar período\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Últimos 7 dias</SelectItem>\n                  <SelectItem value=\"30\">Últimos 30 dias</SelectItem>\n                  <SelectItem value=\"90\">Últimos 3 meses</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <TicketTrendsChart days={parseInt(chartPeriod)} filters={{ dateFilter, priorityFilter, departmentFilter }} />\n          </div>\n\n          {/* Priority Breakdown */}\n          <div className=\"bg-card border border-border rounded-lg p-6 shadow-sm\">\n            <h2 className=\"text-lg font-semibold text-foreground mb-6\">Distribuição por Prioridade</h2>\n            <PriorityBreakdown filters={{ dateFilter, priorityFilter, departmentFilter }} />\n          </div>\n        </div>\n\n        {/* Team Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"border-0 shadow-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5 text-blue-600\" />\n                <span>Performance da Equipe</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {teamMetrics.map((member, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors\"\n                       onClick={() => navigateToTickets(`user-${member.name}`)}>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">{member.name}</h4>\n                        <Badge variant=\"outline\">{member.efficiency}%</Badge>\n                      </div>\n                      <div className=\"flex text-sm text-gray-600 space-x-4\">\n                        <span>Atribuídos: {member.tickets}</span>\n                        <span>Resolvidos: {member.resolved}</span>\n                      </div>\n                      <Progress value={member.efficiency} className=\"h-2 mt-2\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Department Statistics */}\n          <Card className=\"border-0 shadow-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Activity className=\"w-5 h-5 text-green-600\" />\n                <span>Estatísticas por Departamento</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {departmentStats.map((dept, index) => (\n                  <div key={index} className=\"p-3 border rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\"\n                       onClick={() => navigateToTickets(`dept-${dept.name}`)}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium text-gray-900\">{dept.name}</h4>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={dept.sla >= 90 ? \"default\" : \"destructive\"}>\n                          SLA: {dept.sla}%\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-blue-600\">{dept.tickets}</div>\n                        <div className=\"text-gray-600\">Total</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-green-600\">{dept.resolved}</div>\n                        <div className=\"text-gray-600\">Resolvidos</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-yellow-600\">{dept.pending}</div>\n                        <div className=\"text-gray-600\">Pendentes</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Tickets Table */}\n        <div className=\"bg-card border border-border rounded-lg shadow-enterprise overflow-hidden\">\n          {/* Recent Tickets section removed as requested */}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15978},"client/src/pages/KanbanBoard.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, Filter, ChevronDown, MoreHorizontal, Grid3X3, List, Eye, Edit, Trash, X, Trash2 } from 'lucide-react';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Label } from '@/components/ui/label';\nimport { TicketModal } from '@/components/TicketModal';\nimport CreateTicketModal from '@/components/CreateTicketModal';\nimport TicketFinalizationModal from '@/components/TicketFinalizationModal';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger \n} from '@/components/ui/dropdown-menu';\nimport { useToast } from '@/hooks/use-toast';\n\n// Enhanced ticket data matching the reference image\nconst mockTickets = [\n  // ATRASADO (Red)\n  {\n    id: 'SR738',\n    number: '#SR738',\n    title: 'INSTALAÇÃO DE OFFICE FRISCO (OLDing)',\n    description: 'Instalação necessária para departamento',\n    status: 'Atrasado',\n    priority: 'Alta',\n    assignee: {\n      name: 'João Silva',\n      avatar: '/avatars/joao.jpg',\n      initials: 'JS'\n    },\n    requester: 'Cliente Opus',\n    department: 'Tecnologia',\n    dueDate: '17/12/2024 16:45',\n    tags: ['FRISCO'],\n    progress: 30\n  },\n  {\n    id: 'SR740',\n    number: '#SR740',\n    title: 'ARQUIVO DE PONTO MAXIMO CREDITO 27 a 01/07',\n    description: 'Processamento de arquivo de ponto',\n    status: 'Atrasado',\n    priority: 'Média',\n    assignee: {\n      name: 'Pedro Costa',\n      avatar: '/avatars/pedro.jpg',\n      initials: 'PC'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 14:32',\n    tags: ['PONTO'],\n    progress: 15\n  },\n  {\n    id: 'SR745',\n    number: '#SR745',\n    title: 'ARQUIVO PONTO MAXIMO CREDITO 24/07',\n    description: 'Processamento mensal de arquivo',\n    status: 'Atrasado',\n    priority: 'Baixa',\n    assignee: {\n      name: 'Ana Santos',\n      avatar: '/avatars/ana.jpg',\n      initials: 'AS'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 16:33',\n    tags: ['ARQUIVO'],\n    progress: 10\n  },\n\n  // ATENDENDO (Green)\n  {\n    id: 'SR734',\n    number: '#SR734',\n    title: 'Testesn Relname dos Files',\n    description: 'Desenvolvimento do novo files dos pais',\n    status: 'Atendendo',\n    priority: 'Alta',\n    assignee: {\n      name: 'Maria Silva',\n      avatar: '/avatars/maria.jpg',\n      initials: 'MS'\n    },\n    requester: 'Grupo Opus',\n    department: 'Desenvolvimento',\n    dueDate: '17/12/2024 17:32',\n    tags: ['DESENVOLVIMENTO'],\n    progress: 70\n  },\n  {\n    id: 'SR736',\n    number: '#SR736',\n    title: 'Grupo Opus',\n    description: 'TRANSPORTO PEÇA FARMARIO MECÂNICO VASSOURAS M4',\n    status: 'Atendendo',\n    priority: 'Média',\n    assignee: {\n      name: 'Carlos Lima',\n      avatar: '/avatars/carlos.jpg',\n      initials: 'CL'\n    },\n    requester: 'Grupo Opus',\n    department: 'Manutenção',\n    dueDate: '17/12/2024 15:46',\n    tags: ['MECÂNICO'],\n    progress: 85\n  },\n  {\n    id: 'SR742',\n    number: '#SR742',\n    title: 'Grupo Opus',\n    description: 'ATENDIMENTO TÉRMINO DE CONTRATO WILSON JOSE DE MATOS',\n    status: 'Atendendo',\n    priority: 'Alta',\n    assignee: {\n      name: 'Fernanda Costa',\n      avatar: '/avatars/fernanda.jpg',\n      initials: 'FC'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 15:24',\n    tags: ['CONTRATO'],\n    progress: 60\n  },\n\n  // PAUSADO (Yellow)\n  {\n    id: 'SR735',\n    number: '#SR735',\n    title: 'Grupo Opus',\n    description: 'Relatório Reservatórios Chassis dos Serviços',\n    status: 'Pausado',\n    priority: 'Média',\n    assignee: {\n      name: 'Roberto Santos',\n      avatar: '/avatars/roberto.jpg',\n      initials: 'RS'\n    },\n    requester: 'Grupo Opus',\n    department: 'Operações',\n    dueDate: '17/12/2024 16:35',\n    tags: ['RELATÓRIO'],\n    progress: 45\n  },\n  {\n    id: 'SR739',\n    number: '#SR739',\n    title: 'Grupo Opus',\n    description: 'ADMISSÃO - THIAGO RAMOS GRUPO LED',\n    status: 'Pausado',\n    priority: 'Alta',\n    assignee: {\n      name: 'Juliana Alves',\n      avatar: '/avatars/juliana.jpg',\n      initials: 'JA'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 15:30',\n    tags: ['ADMISSÃO'],\n    progress: 25\n  },\n  {\n    id: 'SR743',\n    number: '#SR743',\n    title: 'Grupo Opus',\n    description: 'INSTALAÇÃO PRINT DA CHVS',\n    status: 'Pausado',\n    priority: 'Baixa',\n    assignee: {\n      name: 'Lucas Ferreira',\n      avatar: '/avatars/lucas.jpg',\n      initials: 'LF'\n    },\n    requester: 'Grupo Opus',\n    department: 'TI',\n    dueDate: '17/12/2024 16:30',\n    tags: ['INSTALAÇÃO'],\n    progress: 20\n  },\n\n  // RESOLVIDO (Gray)\n  {\n    id: 'SR744',\n    number: '#SR744',\n    title: 'LANÇAMENTOS WEEGET AVISO DA SILVA',\n    description: 'CARTA DE CANALIZAÇÃO WATER AVISO DA SILVA',\n    status: 'Resolvido',\n    priority: 'Média',\n    assignee: {\n      name: 'Beatriz Oliveira',\n      avatar: '/avatars/beatriz.jpg',\n      initials: 'BO'\n    },\n    requester: 'Grupo Opus',\n    department: 'Operações',\n    dueDate: '17/12/2024 14:45',\n    tags: ['CANALIZAÇÃO'],\n    progress: 100\n  },\n  {\n    id: 'SR746',\n    number: '#SR746',\n    title: 'Grupo Opus',\n    description: 'ERP LICENCIAMENTO - NÃO CONSEGUE BAIXAR O VEEAM',\n    status: 'Resolvido',\n    priority: 'Alta',\n    assignee: {\n      name: 'Diego Silva',\n      avatar: '/avatars/diego.jpg',\n      initials: 'DS'\n    },\n    requester: 'Grupo Opus',\n    department: 'TI',\n    dueDate: '17/12/2024 13:20',\n    tags: ['ERP'],\n    progress: 100\n  },\n  {\n    id: 'SR747',\n    number: '#SR747',\n    title: 'Grupo Opus',\n    description: 'Subutando Arquitetos Balanço 042',\n    status: 'Resolvido',\n    priority: 'Baixa',\n    assignee: {\n      name: 'Patricia Mendes',\n      avatar: '/avatars/patricia.jpg',\n      initials: 'PM'\n    },\n    requester: 'Grupo Opus',\n    department: 'Projetos',\n    dueDate: '17/12/2024 12:15',\n    tags: ['PROJETOS'],\n    progress: 100\n  }\n];\n\nexport default function KanbanBoard() {\n  const [draggedTicket, setDraggedTicket] = useState<any>(null);\n  const [finalizationModal, setFinalizationModal] = useState<{\n    isOpen: boolean;\n    ticket: any | null;\n  }>({ isOpen: false, ticket: null });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterBy, setFilterBy] = useState('all');\n  const [viewMode, setViewMode] = useState<'kanban' | 'list'>('kanban');\n  const [statusFilter, setStatusFilter] = useState('all');\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [departmentFilter, setDepartmentFilter] = useState('all');\n  const [assigneeFilter, setAssigneeFilter] = useState('all');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  // Fetch real tickets from API\n  const { data: tickets = [], refetch: refetchTickets } = useQuery<any[]>({\n    queryKey: ['/api/tickets'],\n  });\n\n  // Fetch current user for role checking\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n  });\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Buscar configurações de status e prioridade\n  const { data: statusConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/status'],\n  });\n\n  const { data: priorityConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/priority'],\n  });\n\n  // Buscar departamentos\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n  });\n\n  // Buscar regras de SLA\n  const { data: slaRules } = useQuery<any[]>({\n    queryKey: ['/api/sla/rules'],\n  });\n\n  // Buscar categorias \n  const { data: categories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Função para converter cor hex para classes Tailwind\n  const hexToTailwindBg = (hex: string) => {\n    const colorMap: Record<string, string> = {\n      '#3b82f6': 'bg-blue-500',    // Azul\n      '#f59e0b': 'bg-amber-500',   // Amarelo/Amber  \n      '#10b981': 'bg-emerald-500', // Verde\n      '#6b7280': 'bg-gray-500',    // Cinza\n      '#8b5cf6': 'bg-violet-500',  // Roxo\n      '#ef4444': 'bg-red-500',     // Vermelho\n      '#dc2626': 'bg-red-600',     // Vermelho mais escuro\n      '#f87171': 'bg-red-400',     // Vermelho mais claro\n      '#f97316': 'bg-orange-500',  // Laranja\n      '#06b6d4': 'bg-cyan-500',    // Ciano\n      '#84cc16': 'bg-lime-500',    // Lima\n      '#ec4899': 'bg-pink-500',    // Rosa\n    };\n    return colorMap[hex] || 'bg-gray-500';\n  };\n\n  // Define columns with dynamic counts using database configurations\n  const columns = statusConfigs?.map(status => ({\n    id: status.value,\n    title: status.name.toUpperCase(),\n    color: hexToTailwindBg(status.color),\n    headerColor: hexToTailwindBg(status.color),\n    count: tickets.filter(t => t.status === status.value).length\n  })) || [\n    { id: 'open', title: 'A FAZER', color: 'bg-blue-500', headerColor: 'bg-blue-500', count: 0 },\n    { id: 'in_progress', title: 'ATENDENDO', color: 'bg-green-500', headerColor: 'bg-green-500', count: 0 },\n    { id: 'on_hold', title: 'PAUSADO', color: 'bg-yellow-500', headerColor: 'bg-yellow-500', count: 0 },\n    { id: 'resolved', title: 'RESOLVIDO', color: 'bg-gray-500', headerColor: 'bg-gray-500', count: 0 }\n  ];\n\n  // Check for URL parameters on component mount\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const filter = urlParams.get('filter');\n    \n    if (filter) {\n      switch (filter) {\n        case 'open':\n          setStatusFilter('Aberto');\n          setShowAdvancedFilters(true);\n          break;\n        case 'resolved':\n          setStatusFilter('Resolvido');\n          setShowAdvancedFilters(true);\n          break;\n        case 'critical':\n          setPriorityFilter('Alta');\n          setShowAdvancedFilters(true);\n          break;\n        case 'all':\n        default:\n          // Keep all filters as 'all'\n          break;\n      }\n    }\n  }, []);\n\n  const handleDragStart = (e: any, ticket: any) => {\n    setDraggedTicket(ticket);\n    e.dataTransfer.effectAllowed = 'move';\n    // Adicionar efeito visual ao elemento arrastado\n    e.target.style.opacity = '0.5';\n    e.target.style.transform = 'rotate(5deg)';\n  };\n\n  const handleDragEnd = (e: any) => {\n    // Remover efeitos visuais\n    e.target.style.opacity = '1';\n    e.target.style.transform = 'none';\n    setDraggedTicket(null);\n  };\n\n  const handleDragOver = (e: any) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: any, status: string) => {\n    e.preventDefault();\n    if (draggedTicket && draggedTicket.status !== status) {\n      // Se estiver movendo para \"Resolvido\", mostrar modal de finalização\n      if (status === 'resolved') {\n        setFinalizationModal({ isOpen: true, ticket: draggedTicket });\n        setDraggedTicket(null);\n        return;\n      }\n      \n      // Para outros status, fazer update direto via API\n      fetch(`/api/tickets/${draggedTicket.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status }),\n      }).then(() => {\n        refetchTickets();\n      }).catch(error => {\n        console.error('Erro ao atualizar status:', error);\n      });\n      setDraggedTicket(null);\n    }\n  };\n\n  // Função para converter cor hex para classes de badge\n  const hexToBadgeClasses = (hex: string) => {\n    const colorMap: Record<string, string> = {\n      '#3b82f6': 'bg-blue-100 text-blue-800 border-blue-200',\n      '#f59e0b': 'bg-amber-100 text-amber-800 border-amber-200',\n      '#10b981': 'bg-emerald-100 text-emerald-800 border-emerald-200',\n      '#6b7280': 'bg-gray-100 text-gray-800 border-gray-200',\n      '#8b5cf6': 'bg-violet-100 text-violet-800 border-violet-200',\n      '#ef4444': 'bg-red-100 text-red-800 border-red-200',\n      '#dc2626': 'bg-red-100 text-red-800 border-red-200',\n      '#f87171': 'bg-red-100 text-red-800 border-red-200',\n      '#f97316': 'bg-orange-100 text-orange-800 border-orange-200',\n      '#06b6d4': 'bg-cyan-100 text-cyan-800 border-cyan-200',\n      '#84cc16': 'bg-lime-100 text-lime-800 border-lime-200',\n      '#ec4899': 'bg-pink-100 text-pink-800 border-pink-200',\n    };\n    return colorMap[hex] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority || p.name === priority);\n    if (config?.color) {\n      return hexToBadgeClasses(config.color);\n    }\n    return 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getStatusColor = (status: string) => {\n    const config = statusConfigs?.find(s => s.value === status || s.name === status);\n    if (config?.color) {\n      return hexToBadgeClasses(config.color);\n    }\n    return 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getProgressColor = (ticket: any) => {\n    if (ticket.status === 'resolved') return 'bg-green-500';\n    if (ticket.slaStatus === 'violated') return 'bg-red-500';\n    if (ticket.slaStatus === 'at_risk') return 'bg-orange-500';\n    return 'bg-blue-500';\n  };\n\n  // Função para calcular progresso baseado no SLA usando dados do backend\n  const calculateSLAProgress = (ticket: any) => {\n    if (!ticket.slaHoursTotal || ticket.slaHoursTotal <= 0) return 0;\n    if (ticket.status === 'resolved') return 100;\n    \n    const now = new Date();\n    const createdAt = new Date(ticket.createdAt);\n    const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n    const progressPercentage = Math.min((hoursElapsed / ticket.slaHoursTotal) * 100, 100);\n    return Math.max(progressPercentage, 0);\n  };\n\n  // Função para traduzir status do banco para português\n  const getStatusLabel = (status: string) => {\n    const config = statusConfigs?.find(s => s.value === status);\n    return config?.name || status;\n  };\n\n  // Função para traduzir prioridade do banco para português\n  const getPriorityLabel = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority);\n    return config?.name || priority;\n  };\n\n  // Funções SLA conectadas ao banco de dados com nova hierarquia\n  const getSLAStatusColor = (ticket: any) => {\n    if (!ticket.slaStatus) return 'bg-gray-500';\n    \n    switch (ticket.slaStatus) {\n      case 'violated': return 'bg-red-500';\n      case 'at_risk': return 'bg-orange-500'; \n      case 'met': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getSLATimeRemaining = (ticket: any) => {\n    if (!ticket.slaHoursRemaining && ticket.slaHoursRemaining !== 0) return '-';\n    \n    if (ticket.slaHoursRemaining <= 0) return 'Vencido';\n    if (ticket.slaHoursRemaining < 1) return `${Math.ceil(ticket.slaHoursRemaining * 60)}min`;\n    if (ticket.slaHoursRemaining < 24) return `${Math.ceil(ticket.slaHoursRemaining)}h`;\n    return `${Math.ceil(ticket.slaHoursRemaining / 24)}d`;\n  };\n\n  const getSLAStatus = (ticket: any) => {\n    if (!ticket.slaStatus) return 'N/A';\n    \n    switch (ticket.slaStatus) {\n      case 'violated': return 'Vencido';\n      case 'at_risk': return 'Em Risco';\n      case 'met': return 'No Prazo';\n      default: return 'N/A';\n    }\n  };\n\n  // Função para exibir fonte do SLA (debug/informativo)\n  const getSLASource = (ticket: any) => {\n    return ticket.slaSource || 'padrão (4h)';\n  };\n\n  const filteredTickets = tickets.filter(ticket => {\n    const matchesSearch = (ticket.subject || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.ticketNumber || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.assignedToUser?.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.createdByUser?.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.department?.name || '').toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || ticket.status === statusFilter;\n    const matchesPriority = priorityFilter === 'all' || ticket.priority === priorityFilter;\n    const matchesDepartment = departmentFilter === 'all' || ticket.department?.name === departmentFilter;\n    const matchesAssignee = assigneeFilter === 'all' || ticket.assignedToUser?.name === assigneeFilter;\n    \n    // Legacy filter compatibility\n    const matchesLegacyFilter = filterBy === 'all' || \n      (filterBy === 'alta' && ticket.priority === 'Alta') ||\n      (filterBy === 'atrasado' && ticket.status === 'Atrasado');\n    \n    return matchesSearch && matchesStatus && matchesPriority && matchesDepartment && matchesAssignee && matchesLegacyFilter;\n  });\n\n  // Get unique values for filter options\n  const uniqueStatuses = Array.from(new Set(tickets.map(t => t.status).filter(Boolean)));\n  const uniquePriorities = Array.from(new Set(tickets.map(t => t.priority).filter(Boolean)));\n  const uniqueDepartments = departments ? departments.map(dept => dept.name) : [];\n  const uniqueAssignees = Array.from(new Set(tickets.map(t => t.assignedToUser?.name).filter(Boolean)));\n\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setFilterBy('all');\n    setStatusFilter('all');\n    setPriorityFilter('all');\n    setDepartmentFilter('all');\n    setAssigneeFilter('all');\n  };\n\n\n\n  const handleFinalizeTicket = (ticket: any) => {\n    setFinalizationModal({ isOpen: true, ticket });\n  };\n\n  // Mutation para deletar ticket\n  const deleteTicketMutation = useMutation({\n    mutationFn: async (ticketId: string) => {\n      const response = await fetch(`/api/tickets/${ticketId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Falha ao excluir ticket');\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket excluído\",\n        description: \"O ticket foi excluído com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n    },\n    onError: (error) => {\n      console.error('Erro ao excluir ticket:', error);\n      toast({\n        title: \"Erro ao excluir\",\n        description: \"Não foi possível excluir o ticket. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteTicket = (ticketId: string) => {\n    if (window.confirm('Tem certeza que deseja excluir este ticket? Esta ação não pode ser desfeita.')) {\n      deleteTicketMutation.mutate(ticketId);\n    }\n  };\n\n  const handleFinalizationConfirm = async (finalizationData: any) => {\n    if (!finalizationModal.ticket) return;\n\n    try {\n      // Fazer chamada à API para finalizar o ticket\n      const response = await fetch(`/api/tickets/${finalizationModal.ticket.id}/finalize`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          status: 'Resolvido',\n          finalizationData: finalizationData,\n          progress: 100\n        }),\n      });\n\n      if (response.ok) {\n        // Refetch dos tickets para atualizar com dados reais do banco\n        refetchTickets();\n        \n        console.log('Ticket finalizado com sucesso');\n      } else {\n        console.error('Erro ao finalizar ticket no servidor');\n      }\n\n      setFinalizationModal({ isOpen: false, ticket: null });\n    } catch (error) {\n      console.error('Erro ao finalizar ticket:', error);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Listagem de Tickets</h1>\n            <p className=\"text-gray-600\">\n              {viewMode === 'kanban' ? 'Gerencie tickets em formato Kanban' : 'Visualize tickets em formato de lista'}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {/* View Mode Toggle */}\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\n              <Button\n                variant={viewMode === 'kanban' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('kanban')}\n                className=\"px-3\"\n              >\n                <Grid3X3 className=\"w-4 h-4 mr-2\" />\n                Kanban\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                className=\"px-3\"\n              >\n                <List className=\"w-4 h-4 mr-2\" />\n                Lista\n              </Button>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtro Avançado\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Quick Filters */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input \n                placeholder=\"Buscar por ticket, título, responsável, solicitante...\" \n                className=\"pl-10\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os Status</SelectItem>\n                {uniqueStatuses.map(status => (\n                  <SelectItem key={status} value={status}>{getStatusLabel(status)}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Prioridade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as Prioridades</SelectItem>\n                {uniquePriorities.map(priority => (\n                  <SelectItem key={priority} value={priority}>{getPriorityLabel(priority)}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtros Avançados\n              <ChevronDown className={`w-4 h-4 ml-1 transition-transform ${showAdvancedFilters ? 'rotate-180' : ''}`} />\n            </Button>\n\n            {(searchTerm || statusFilter !== 'all' || priorityFilter !== 'all' || departmentFilter !== 'all' || assigneeFilter !== 'all') && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={clearAllFilters}>\n                Limpar Filtros\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters */}\n          {showAdvancedFilters && (\n            <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Dept. Responsável</Label>\n                  <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Departamentos\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Departamentos</SelectItem>\n                      {uniqueDepartments.map(dept => (\n                        <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Responsável</Label>\n                  <Select value={assigneeFilter} onValueChange={setAssigneeFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Responsáveis\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Responsáveis</SelectItem>\n                      {uniqueAssignees.map(assignee => (\n                        <SelectItem key={assignee} value={assignee}>{assignee}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Dept. Solicitante</Label>\n                  <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Solicitantes\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Solicitantes</SelectItem>\n                      {uniqueDepartments.map(dept => (\n                        <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex flex-col justify-end\">\n                  <div className=\"text-sm text-gray-600 bg-white p-3 rounded border\">\n                    <strong>{filteredTickets.length}</strong> de <strong>{tickets.length}</strong> tickets\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Content Based on View Mode */}\n      {viewMode === 'kanban' ? (\n        /* Kanban Board */\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {columns.map((column) => (\n            <div key={column.id} className=\"space-y-4\">\n              {/* Column Header */}\n              <div className={`${column.headerColor} text-white p-4 rounded-lg flex items-center justify-between shadow-md`}>\n                <span className=\"font-bold text-sm tracking-wide\">{column.title}</span>\n                <div className=\"bg-white bg-opacity-20 rounded-full w-8 h-8 flex items-center justify-center\">\n                  <span className=\"text-sm font-bold\">\n                    {filteredTickets.filter(t => t.status === column.id).length}\n                  </span>\n                </div>\n              </div>\n              \n              {/* Drop Zone */}\n              <div \n                className={`space-y-3 min-h-[600px] p-2 rounded-lg border-2 border-dashed transition-all duration-300 ${\n                  draggedTicket ? 'border-blue-300 bg-blue-50/50' : 'border-transparent'\n                }`}\n                onDragOver={handleDragOver}\n                onDragEnter={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('bg-blue-100/30', 'border-blue-400');\n                }}\n                onDragLeave={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.remove('bg-blue-100/30', 'border-blue-400');\n                }}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.remove('bg-blue-100/30', 'border-blue-400');\n                  handleDrop(e, column.id);\n                }}\n              >\n                {filteredTickets\n                  .filter(ticket => ticket.status === column.id)\n                  .map((ticket) => (\n                    <TicketModal key={ticket.id} ticket={ticket} onUpdate={(updatedTicket: any) => {\n                      // Atualizar lista será feita pela revalidação de query\n                    }}>\n                      <Card \n                        className=\"cursor-move hover:shadow-xl transition-all duration-300 border-0 shadow-sm bg-white transform hover:scale-105 active:scale-95\"\n                        draggable\n                        onDragStart={(e) => handleDragStart(e, ticket)}\n                        onDragEnd={handleDragEnd}\n                        style={{\n                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n                          willChange: 'transform, box-shadow, opacity'\n                        }}\n                      >\n                      <CardContent className=\"p-4\">\n                        <div className=\"space-y-3\">\n                          {/* Header */}\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs font-bold text-gray-600\">{ticket.ticketNumber}</span>\n                            <div className=\"flex items-center space-x-1\">\n                              {/* Botão Finalizar (apenas para tickets não resolvidos) */}\n                              {ticket.status !== 'resolved' && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"w-6 h-6 p-0 text-green-600 hover:text-green-700 hover:bg-green-50\"\n                                  onClick={(e) => {\n                                    e.preventDefault();\n                                    e.stopPropagation();\n                                    handleFinalizeTicket(ticket);\n                                  }}\n                                  title=\"Finalizar Ticket\"\n                                >\n                                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                                  </svg>\n                                </Button>\n                              )}\n                              <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"w-6 h-6 p-0\">\n                                    <MoreHorizontal className=\"w-4 h-4 text-gray-400\" />\n                                  </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                                  <DropdownMenuItem \n                                    className=\"text-red-600 focus:text-red-600 focus:bg-red-50\"\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      e.stopPropagation();\n                                      handleDeleteTicket(ticket.id);\n                                    }}\n                                  >\n                                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                                    Excluir ticket\n                                  </DropdownMenuItem>\n                                </DropdownMenuContent>\n                              </DropdownMenu>\n                            </div>\n                          </div>\n\n                          {/* Title */}\n                          <div>\n                            <h3 className=\"font-bold text-sm text-gray-900 leading-tight mb-1\">\n                              {ticket.subject}\n                            </h3>\n                            <p className=\"text-xs text-gray-600 line-clamp-2\">\n                              {ticket.description}\n                            </p>\n                          </div>\n\n                          {/* Assignee and Date */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Avatar className=\"w-6 h-6\">\n                                <AvatarFallback className=\"text-xs bg-blue-100 text-blue-600\">\n                                  {ticket.assignedToUser?.name?.charAt(0) || 'U'}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-xs text-gray-600\">{ticket.assignedToUser?.name || 'Não atribuído'}</span>\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {new Date(ticket.createdAt).toLocaleDateString('pt-BR')}\n                            </div>\n                          </div>\n\n                          {/* Priority Badge and SLA */}\n                          <div className=\"flex items-center justify-between\">\n                            <Badge className={`${getPriorityColor(ticket.priority)} text-xs px-2 py-1`}>\n                              {getPriorityLabel(ticket.priority)}\n                            </Badge>\n                            <span className=\"text-xs text-gray-500\">{ticket.department?.name || 'Sem departamento'}</span>\n                          </div>\n\n                          {/* SLA Status */}\n                          <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n                            <div className=\"flex items-center space-x-1\">\n                              <div className={`w-2 h-2 rounded-full ${getSLAStatusColor(ticket)}`}></div>\n                              <span className=\"text-xs text-gray-600\">SLA: {getSLATimeRemaining(ticket)}</span>\n                            </div>\n                            <span className=\"text-xs text-gray-400\">{getSLAStatus(ticket)}</span>\n                          </div>\n\n                          {/* Progress Bar */}\n                          <div className=\"space-y-1\">\n                            <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                              <div \n                                className={`h-1.5 rounded-full transition-all duration-300 ${getProgressColor(ticket)}`}\n                                style={{ width: `${calculateSLAProgress(ticket)}%` }}\n                              />\n                            </div>\n                            <div className=\"flex justify-between text-xs text-gray-500\">\n                              <span>Progresso SLA</span>\n                              <span>{Math.round(calculateSLAProgress(ticket))}%</span>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                    </TicketModal>\n                  ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        /* List View */\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-[100px]\">Ticket</TableHead>\n                <TableHead>Título</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Prioridade</TableHead>\n                <TableHead>Responsável</TableHead>\n                <TableHead>Solicitante</TableHead>\n                <TableHead>Departamento</TableHead>\n                <TableHead>Progresso</TableHead>\n                <TableHead>Vencimento</TableHead>\n                <TableHead className=\"w-[100px]\">Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredTickets.map((ticket) => (\n                <TableRow key={ticket.id} className=\"hover:bg-gray-50\">\n                  <TableCell className=\"font-mono text-sm\">\n                    {ticket.ticketNumber}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <p className=\"font-medium text-sm\">{ticket.subject}</p>\n                      {ticket.tags && ticket.tags.length > 0 && (\n                        <div className=\"flex gap-1\">\n                          {ticket.tags.slice(0, 2).map((tag: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {ticket.tags.length > 2 && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{ticket.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${getStatusColor(ticket.status)}`}\n                    >\n                      {getStatusLabel(ticket.status)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${getPriorityColor(ticket.priority)}`}\n                    >\n                      {getPriorityLabel(ticket.priority)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                          {ticket.assignedToUser?.name?.charAt(0) || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm\">{ticket.assignedToUser?.name || 'Não atribuído'}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm\">{ticket.createdByUser?.name || 'Desconhecido'}</TableCell>\n                  <TableCell className=\"text-sm\">{ticket.department?.name || 'Sem departamento'}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full ${getProgressColor(ticket)}`}\n                          style={{ width: `${calculateSLAProgress(ticket)}%` }}\n                        />\n                      </div>\n                      <span className=\"text-xs text-gray-500 w-8\">{Math.round(calculateSLAProgress(ticket))}%</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm\">{new Date(ticket.createdAt).toLocaleDateString('pt-BR')}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <TicketModal ticket={ticket} onUpdate={(updatedTicket: any) => {\n                        // Atualizar lista será feita pela revalidação de query\n                      }}>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"w-8 h-8\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </TicketModal>\n                      {/* Botão Finalizar (apenas para tickets não resolvidos) */}\n                      {ticket.status !== 'resolved' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"w-8 h-8 text-green-600 hover:text-green-700\"\n                          onClick={() => handleFinalizeTicket(ticket)}\n                          title=\"Finalizar Ticket\"\n                        >\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                          </svg>\n                        </Button>\n                      )}\n                      {/* Botão de excluir apenas para administradores */}\n                      {currentUser?.role === 'admin' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"w-8 h-8 text-red-600 hover:text-red-700\"\n                          onClick={() => handleDeleteTicket(ticket.id)}\n                        >\n                          <Trash className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n\n      {/* Modal de Finalização */}\n      {finalizationModal.isOpen && finalizationModal.ticket && (\n        <TicketFinalizationModal\n          isOpen={finalizationModal.isOpen}\n          ticket={finalizationModal.ticket}\n          onClose={() => setFinalizationModal({ isOpen: false, ticket: null })}\n          onConfirm={handleFinalizationConfirm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":42254},"client/src/pages/Settings.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Settings as SettingsIcon, \n  User, \n  Bell, \n  Shield, \n  Database, \n  Mail, \n  Palette, \n  Globe, \n  Key,\n  Save,\n  Download,\n  Upload,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  Info\n} from 'lucide-react';\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState('profile');\n  const [notifications, setNotifications] = useState({\n    email: true,\n    push: false,\n    sms: false,\n    digest: true\n  });\n  \n  const [systemSettings, setSystemSettings] = useState({\n    theme: 'system',\n    language: 'pt-BR',\n    timezone: 'America/Sao_Paulo',\n    dateFormat: 'DD/MM/YYYY',\n    autoAssign: true,\n    requireApproval: false\n  });\n\n  const handleSave = () => {\n    console.log('Salvando configurações...');\n    // TODO: Implementar salvamento real\n  };\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n            <SettingsIcon className=\"w-5 h-5 text-blue-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Configurações</h1>\n            <p className=\"text-muted-foreground\">Gerencie suas preferências e configurações do sistema</p>\n          </div>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n            <User className=\"w-4 h-4\" />\n            <span>Perfil</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n            <Bell className=\"w-4 h-4\" />\n            <span>Notificações</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Segurança</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"flex items-center space-x-2\">\n            <Database className=\"w-4 h-4\" />\n            <span>Sistema</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-2\">\n            <Palette className=\"w-4 h-4\" />\n            <span>Aparência</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Perfil */}\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Informações Pessoais</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input id=\"firstName\" defaultValue=\"João\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input id=\"lastName\" defaultValue=\"Silva\" />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input id=\"email\" type=\"email\" defaultValue=\"joao.silva@empresa.com\" />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input id=\"phone\" defaultValue=\"(11) 99999-9999\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"extension\">Ramal</Label>\n                    <Input id=\"extension\" defaultValue=\"1234\" />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"department\">Departamento</Label>\n                  <Select defaultValue=\"ti\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ti\">Tecnologia da Informação</SelectItem>\n                      <SelectItem value=\"rh\">Recursos Humanos</SelectItem>\n                      <SelectItem value=\"financeiro\">Financeiro</SelectItem>\n                      <SelectItem value=\"operacoes\">Operações</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Status e Preferências</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Status atual</Label>\n                    <p className=\"text-sm text-muted-foreground\">Define sua disponibilidade</p>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Receber atribuições automáticas</Label>\n                    <p className=\"text-sm text-muted-foreground\">Permite que tickets sejam atribuídos automaticamente</p>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Modo foco</Label>\n                    <p className=\"text-sm text-muted-foreground\">Reduz notificações durante trabalho concentrado</p>\n                  </div>\n                  <Switch />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Notificações */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"w-5 h-5\" />\n                <span>Preferências de Notificação</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Notificações por email</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber atualizações importantes por email</p>\n                  </div>\n                  <Switch \n                    checked={notifications.email}\n                    onCheckedChange={(checked) => setNotifications({...notifications, email: checked})}\n                  />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Notificações push</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber notificações instantâneas no navegador</p>\n                  </div>\n                  <Switch \n                    checked={notifications.push}\n                    onCheckedChange={(checked) => setNotifications({...notifications, push: checked})}\n                  />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Notificações SMS</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber alertas críticos por SMS</p>\n                  </div>\n                  <Switch \n                    checked={notifications.sms}\n                    onCheckedChange={(checked) => setNotifications({...notifications, sms: checked})}\n                  />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Resumo diário</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber relatório diário de atividades</p>\n                  </div>\n                  <Switch \n                    checked={notifications.digest}\n                    onCheckedChange={(checked) => setNotifications({...notifications, digest: checked})}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Segurança */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Key className=\"w-5 h-5\" />\n                  <span>Senha e Autenticação</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"currentPassword\">Senha atual</Label>\n                  <Input id=\"currentPassword\" type=\"password\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"newPassword\">Nova senha</Label>\n                  <Input id=\"newPassword\" type=\"password\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"confirmPassword\">Confirmar nova senha</Label>\n                  <Input id=\"confirmPassword\" type=\"password\" />\n                </div>\n                <Button className=\"w-full\">\n                  Alterar Senha\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Configurações de Segurança</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Autenticação de dois fatores</Label>\n                    <p className=\"text-sm text-muted-foreground\">Adiciona uma camada extra de segurança</p>\n                  </div>\n                  <Switch />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Sessões ativas</Label>\n                    <p className=\"text-sm text-muted-foreground\">3 dispositivos conectados</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Gerenciar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Sistema */}\n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Database className=\"w-5 h-5\" />\n                  <span>Configurações do Sistema</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Idioma</Label>\n                  <Select value={systemSettings.language} onValueChange={(value) => setSystemSettings({...systemSettings, language: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pt-BR\">Português (Brasil)</SelectItem>\n                      <SelectItem value=\"en-US\">English (US)</SelectItem>\n                      <SelectItem value=\"es-ES\">Español</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Fuso horário</Label>\n                  <Select value={systemSettings.timezone} onValueChange={(value) => setSystemSettings({...systemSettings, timezone: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"America/Sao_Paulo\">São Paulo (GMT-3)</SelectItem>\n                      <SelectItem value=\"America/New_York\">New York (GMT-5)</SelectItem>\n                      <SelectItem value=\"Europe/London\">London (GMT+0)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Formato de data</Label>\n                  <Select value={systemSettings.dateFormat} onValueChange={(value) => setSystemSettings({...systemSettings, dateFormat: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/AAAA</SelectItem>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/AAAA</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">AAAA-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Backup e Dados</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Exportar Dados\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Importar Configurações\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Restaurar Padrões\n                </Button>\n                <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                        Último backup\n                      </p>\n                      <p className=\"text-xs text-yellow-600 dark:text-yellow-300\">\n                        15/01/2024 às 14:30\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Aparência */}\n        <TabsContent value=\"appearance\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Palette className=\"w-5 h-5\" />\n                <span>Tema e Aparência</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Tema</Label>\n                <Select value={systemSettings.theme} onValueChange={(value) => setSystemSettings({...systemSettings, theme: value})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"system\">Automático (sistema)</SelectItem>\n                    <SelectItem value=\"light\">Claro</SelectItem>\n                    <SelectItem value=\"dark\">Escuro</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  O modo automático seguirá as configurações do seu sistema\n                </p>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-4\">\n                <Label>Densidade da interface</Label>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"p-4 border border-border rounded-lg cursor-pointer hover:border-primary\">\n                    <div className=\"text-sm font-medium\">Compacta</div>\n                    <div className=\"text-xs text-muted-foreground\">Mais informações em menos espaço</div>\n                  </div>\n                  <div className=\"p-4 border border-primary bg-primary/5 rounded-lg cursor-pointer\">\n                    <div className=\"text-sm font-medium\">Normal</div>\n                    <div className=\"text-xs text-muted-foreground\">Equilibrio entre espaço e informação</div>\n                  </div>\n                  <div className=\"p-4 border border-border rounded-lg cursor-pointer hover:border-primary\">\n                    <div className=\"text-sm font-medium\">Espaçosa</div>\n                    <div className=\"text-xs text-muted-foreground\">Mais espaço para navegação</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Botão de Salvar Fixo */}\n      <div className=\"fixed bottom-6 right-6\">\n        <Button onClick={handleSave} size=\"lg\" className=\"shadow-lg\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          Salvar Configurações\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":18414},"client/src/pages/Team.tsx":{"content":"import TopBar from \"@/components/TopBar\";\n\nexport default function Team() {\n  return (\n    <>\n      <TopBar \n        title=\"Equipe\" \n        description=\"Gerenciar membros da equipe e suas funções\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 bg-gray-10\">\n        <div className=\"bg-white rounded-lg border border-gray-20 p-8 text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">Gerenciamento de Equipe</h3>\n          <p className=\"text-gray-50\">Esta página conterá recursos de gerenciamento de membros da equipe e atribuição de funções.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":639},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/index.ts":{"content":"import { configureStore } from '@reduxjs/toolkit';\nimport ticketReducer from './ticketSlice';\n\nexport const store = configureStore({\n  reducer: {\n    tickets: ticketReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","size_bytes":292},"client/src/store/ticketSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { TicketWithDetails } from '@shared/schema';\n\ninterface TicketState {\n  tickets: TicketWithDetails[];\n  loading: boolean;\n  error: string | null;\n  selectedTicket: TicketWithDetails | null;\n  filters: {\n    status: string[];\n    priority: string[];\n    assignee: string[];\n  };\n  searchQuery: string;\n}\n\nconst initialState: TicketState = {\n  tickets: [],\n  loading: false,\n  error: null,\n  selectedTicket: null,\n  filters: {\n    status: [],\n    priority: [],\n    assignee: [],\n  },\n  searchQuery: '',\n};\n\nconst ticketSlice = createSlice({\n  name: 'tickets',\n  initialState,\n  reducers: {\n    setTickets: (state, action: PayloadAction<TicketWithDetails[]>) => {\n      state.tickets = action.payload;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n    setSelectedTicket: (state, action: PayloadAction<TicketWithDetails | null>) => {\n      state.selectedTicket = action.payload;\n    },\n    updateTicket: (state, action: PayloadAction<TicketWithDetails>) => {\n      const index = state.tickets.findIndex(ticket => ticket.id === action.payload.id);\n      if (index !== -1) {\n        state.tickets[index] = action.payload;\n      }\n    },\n    addTicket: (state, action: PayloadAction<TicketWithDetails>) => {\n      state.tickets.unshift(action.payload);\n    },\n    removeTicket: (state, action: PayloadAction<string>) => {\n      state.tickets = state.tickets.filter(ticket => ticket.id !== action.payload);\n    },\n    setFilters: (state, action: PayloadAction<Partial<TicketState['filters']>>) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    setSearchQuery: (state, action: PayloadAction<string>) => {\n      state.searchQuery = action.payload;\n    },\n  },\n});\n\nexport const {\n  setTickets,\n  setLoading,\n  setError,\n  setSelectedTicket,\n  updateTicket,\n  addTicket,\n  removeTicket,\n  setFilters,\n  setSearchQuery,\n} = ticketSlice.actions;\n\nexport default ticketSlice.reducer;\n","size_bytes":2149},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\"\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"default\", size = \"default\", ...props }, ref) => {\n    return (\n      <button\n        className={cn(\n          \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n          {\n            \"bg-primary text-primary-foreground hover:bg-primary/90\":\n              variant === \"default\",\n            \"bg-destructive text-destructive-foreground hover:bg-destructive/90\":\n              variant === \"destructive\",\n            \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\":\n              variant === \"outline\",\n            \"bg-secondary text-secondary-foreground hover:bg-secondary/80\":\n              variant === \"secondary\",\n            \"hover:bg-accent hover:text-accent-foreground\": variant === \"ghost\",\n            \"text-primary underline-offset-4 hover:underline\": variant === \"link\",\n          },\n          {\n            \"h-10 px-4 py-2\": size === \"default\",\n            \"h-9 rounded-md px-3\": size === \"sm\",\n            \"h-11 rounded-md px-8\": size === \"lg\",\n            \"h-10 w-10\": size === \"icon\",\n          },\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button }","size_bytes":1784},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }","size_bytes":2220},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport type {\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n} from \"react-hook-form\"\nimport { Controller, FormProvider, useFormContext } from \"react-hook-form\"\nimport { cn } from \"@/lib/utils\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<\"label\">,\n  React.ComponentPropsWithoutRef<\"label\">\n>(({ className, ...props }, ref) => {\n  const { formItemId } = useFormField()\n\n  return (\n    <label\n      ref={ref}\n      className={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        className\n      )}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <div\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}","size_bytes":4000},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":822},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\nconst SelectGroup = SelectPrimitive.Group\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5611},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}","size_bytes":4837},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}","size_bytes":771},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\nconst Tooltip = TooltipPrimitive.Root\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","size_bytes":1141},"client/src/components/users/ActivityMonitor.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Button from '@/components/Button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Icon from '@/components/AppIcon';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n}\n\ninterface ActivityEntry {\n  id: string;\n  userId: string;\n  userName: string;\n  userRole: string;\n  type: string;\n  action: string;\n  target?: string;\n  timestamp: string;\n  ipAddress: string;\n  userAgent: string;\n  location: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface ActivityMonitorProps {\n  onClose: () => void;\n  users: User[];\n}\n\nexport default function ActivityMonitor({\n  onClose,\n  users\n}: ActivityMonitorProps) {\n  const [activities, setActivities] = useState<ActivityEntry[]>([]);\n  const [filteredActivities, setFilteredActivities] = useState<ActivityEntry[]>([]);\n  const [filters, setFilters] = useState({\n    user: 'all',\n    type: 'all',\n    severity: 'all',\n    timeRange: 'today'\n  });\n  const [isLive, setIsLive] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // Mock activity data\n  const mockActivities: ActivityEntry[] = [\n    {\n      id: '1',\n      userId: '1',\n      userName: 'João Silva Santos',\n      userRole: 'admin',\n      type: 'authentication',\n      action: 'Login realizado com sucesso',\n      timestamp: new Date().toISOString(),\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'low'\n    },\n    {\n      id: '2',\n      userId: '2',\n      userName: 'Maria Santos Oliveira',\n      userRole: 'operator',\n      type: 'ticket',\n      action: 'Ticket #1234 foi resolvido',\n      target: 'Ticket #1234',\n      timestamp: new Date(Date.now() - 300000).toISOString(),\n      ipAddress: '192.168.1.101',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'medium'\n    },\n    {\n      id: '3',\n      userId: '1',\n      userName: 'João Silva Santos',\n      userRole: 'admin',\n      type: 'user_management',\n      action: 'Novo usuário criado: Carlos Lima',\n      target: 'Carlos Lima',\n      timestamp: new Date(Date.now() - 600000).toISOString(),\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'high'\n    },\n    {\n      id: '4',\n      userId: '3',\n      userName: 'Carlos Eduardo Lima',\n      userRole: 'user',\n      type: 'authentication',\n      action: 'Tentativa de login falhada (senha incorreta)',\n      timestamp: new Date(Date.now() - 900000).toISOString(),\n      ipAddress: '192.168.1.102',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'Rio de Janeiro, RJ',\n      severity: 'critical'\n    },\n    {\n      id: '5',\n      userId: '2',\n      userName: 'Maria Santos Oliveira',\n      userRole: 'operator',\n      type: 'settings',\n      action: 'Configurações de perfil atualizadas',\n      timestamp: new Date(Date.now() - 1200000).toISOString(),\n      ipAddress: '192.168.1.101',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'low'\n    }\n  ];\n\n  useEffect(() => {\n    setActivities(mockActivities);\n    setFilteredActivities(mockActivities);\n  }, []);\n\n  // Auto refresh simulation\n  useEffect(() => {\n    if (!autoRefresh || !isLive) return;\n\n    const interval = setInterval(() => {\n      // Simulate new activity\n      const newActivity: ActivityEntry = {\n        id: Date.now().toString(),\n        userId: users[Math.floor(Math.random() * users.length)].id,\n        userName: users[Math.floor(Math.random() * users.length)].name,\n        userRole: users[Math.floor(Math.random() * users.length)].role,\n        type: ['authentication', 'ticket', 'settings', 'user_management'][Math.floor(Math.random() * 4)],\n        action: 'Nova atividade simulada',\n        timestamp: new Date().toISOString(),\n        ipAddress: `192.168.1.${Math.floor(Math.random() * 255)}`,\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n        location: ['São Paulo, SP', 'Rio de Janeiro, RJ', 'Belo Horizonte, MG'][Math.floor(Math.random() * 3)],\n        severity: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as 'low' | 'medium' | 'high'\n      };\n\n      setActivities(prev => [newActivity, ...prev.slice(0, 49)]); // Keep only 50 most recent\n    }, 10000); // Every 10 seconds\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, isLive, users]);\n\n  // Apply filters\n  useEffect(() => {\n    let filtered = [...activities];\n\n    if (filters.user) {\n      filtered = filtered.filter(activity => activity.userId === filters.user);\n    }\n\n    if (filters.type) {\n      filtered = filtered.filter(activity => activity.type === filters.type);\n    }\n\n    if (filters.severity) {\n      filtered = filtered.filter(activity => activity.severity === filters.severity);\n    }\n\n    const now = new Date();\n    const timeRangeFilter = (activity: ActivityEntry) => {\n      const activityTime = new Date(activity.timestamp);\n      const diffInMs = now.getTime() - activityTime.getTime();\n      \n      switch (filters.timeRange) {\n        case 'today':\n          return diffInMs <= 24 * 60 * 60 * 1000;\n        case 'week':\n          return diffInMs <= 7 * 24 * 60 * 60 * 1000;\n        case 'month':\n          return diffInMs <= 30 * 24 * 60 * 60 * 1000;\n        default:\n          return true;\n      }\n    };\n\n    filtered = filtered.filter(timeRangeFilter);\n    setFilteredActivities(filtered);\n  }, [activities, filters]);\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Agora mesmo';\n    if (diffInMinutes < 60) return `${diffInMinutes} min atrás`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h atrás`;\n    \n    return date.toLocaleString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'authentication': return 'LogIn';\n      case 'ticket': return 'Ticket';\n      case 'user_management': return 'Users';\n      case 'settings': return 'Settings';\n      default: return 'Activity';\n    }\n  };\n\n  const getActivityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'text-red-600 bg-red-50 dark:bg-red-900/20';\n      case 'high': return 'text-orange-600 bg-orange-50 dark:bg-orange-900/20';\n      case 'medium': return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20';\n      case 'low': return 'text-green-600 bg-green-50 dark:bg-green-900/20';\n      default: return 'text-slate-600 bg-slate-50 dark:bg-slate-700';\n    }\n  };\n\n  const getSeverityLabel = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'Crítica';\n      case 'high': return 'Alta';\n      case 'medium': return 'Média';\n      case 'low': return 'Baixa';\n      default: return severity;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'authentication': return 'Autenticação';\n      case 'ticket': return 'Tickets';\n      case 'user_management': return 'Usuários';\n      case 'settings': return 'Configurações';\n      default: return type;\n    }\n  };\n\n  const exportActivities = () => {\n    const csv = [\n      ['Timestamp', 'Usuário', 'Função', 'Tipo', 'Ação', 'Severidade', 'IP', 'Localização'].join(','),\n      ...filteredActivities.map(activity => [\n        activity.timestamp,\n        activity.userName,\n        activity.userRole,\n        getTypeLabel(activity.type),\n        activity.action,\n        getSeverityLabel(activity.severity),\n        activity.ipAddress,\n        activity.location\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `atividades-usuarios-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center justify-center w-10 h-10 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n              <Icon name=\"Activity\" size={20} className=\"text-blue-600 dark:text-blue-400\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">\n                Monitor de Atividade dos Usuários\n              </h2>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Acompanhe em tempo real as ações realizadas pelos usuários\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full ${isLive ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`}></div>\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {isLive ? 'Ao Vivo' : 'Pausado'}\n              </span>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsLive(!isLive)}\n              iconName={isLive ? \"Pause\" : \"Play\"}\n            />\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportActivities}\n              iconName=\"Download\"\n            />\n            \n            <Button\n              variant=\"ghost\"\n              onClick={onClose}\n              iconName=\"X\"\n            />\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"p-4 border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <Select value={filters.user} onValueChange={(value) => setFilters({...filters, user: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os usuários\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os usuários</SelectItem>\n                  {users.map(user => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Select value={filters.type} onValueChange={(value) => setFilters({...filters, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os tipos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os tipos</SelectItem>\n                  <SelectItem value=\"authentication\">Autenticação</SelectItem>\n                  <SelectItem value=\"ticket\">Tickets</SelectItem>\n                  <SelectItem value=\"user_management\">Usuários</SelectItem>\n                  <SelectItem value=\"settings\">Configurações</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Select value={filters.severity} onValueChange={(value) => setFilters({...filters, severity: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas severidades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas severidades</SelectItem>\n                  <SelectItem value=\"critical\">Crítica</SelectItem>\n                  <SelectItem value=\"high\">Alta</SelectItem>\n                  <SelectItem value=\"medium\">Média</SelectItem>\n                  <SelectItem value=\"low\">Baixa</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Select value={filters.timeRange} onValueChange={(value) => setFilters({...filters, timeRange: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"today\">Hoje</SelectItem>\n                  <SelectItem value=\"week\">Esta semana</SelectItem>\n                  <SelectItem value=\"month\">Este mês</SelectItem>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAutoRefresh(!autoRefresh)}\n                iconName={autoRefresh ? \"Pause\" : \"Play\"}\n                className=\"flex-1\"\n              >\n                {autoRefresh ? 'Pausar' : 'Iniciar'}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Activity List */}\n        <div className=\"p-6 max-h-[calc(90vh-12rem)] overflow-y-auto\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n              Atividades Recentes ({filteredActivities.length})\n            </h3>\n            <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Atualizado {formatTimestamp(new Date().toISOString())}\n            </div>\n          </div>\n\n          {filteredActivities.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Icon name=\"Activity\" size={48} className=\"text-slate-400 dark:text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">\n                Nenhuma atividade encontrada\n              </h3>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                Não há atividades que correspondam aos filtros aplicados.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredActivities.map(activity => (\n                <div\n                  key={activity.id}\n                  className={`flex items-start space-x-4 p-4 rounded-lg border transition-all duration-200 ${getActivityColor(activity.severity)}`}\n                >\n                  <div className=\"flex-shrink-0 mt-1\">\n                    <Icon name={getActivityIcon(activity.type) as any} size={16} />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                          {activity.userName}\n                        </span>\n                        <span className=\"text-xs px-2 py-1 bg-white dark:bg-slate-800 rounded text-slate-600 dark:text-slate-400\">\n                          {activity.userRole}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-2 text-xs text-slate-600 dark:text-slate-400\">\n                        <span>{getSeverityLabel(activity.severity)}</span>\n                        <span>•</span>\n                        <span>{formatTimestamp(activity.timestamp)}</span>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-slate-800 dark:text-slate-200 mt-1\">\n                      {activity.action}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-slate-600 dark:text-slate-400\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"MapPin\" size={12} />\n                        <span>{activity.location}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"Globe\" size={12} />\n                        <span>{activity.ipAddress}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"Tag\" size={12} />\n                        <span>{getTypeLabel(activity.type)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17491},"client/src/components/NewSidebar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport Icon from './AppIcon';\nimport Button from './Button';\n\ninterface SidebarProps {\n  isOpen?: boolean;\n  onClose: () => void;\n  isCollapsed?: boolean;\n  onToggleCollapse: () => void;\n  onOpenTicketModal: () => void;\n}\n\nconst NewSidebar: React.FC<SidebarProps> = ({ \n  isOpen = false, \n  onClose, \n  isCollapsed = false, \n  onToggleCollapse,\n  onOpenTicketModal \n}) => {\n  const [location, setLocation] = useLocation();\n  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);\n  \n  const navigate = (path: string) => setLocation(path);\n\n  const navigationItems = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      path: '/',\n      icon: 'LayoutDashboard',\n      description: 'Visão geral e métricas'\n    },\n    {\n      id: 'tickets',\n      label: 'Tickets',\n      icon: 'Ticket',\n      description: 'Gerenciar tickets',\n      submenu: [\n        { label: 'Kanban Board', path: '/tickets', icon: 'Kanban' },\n        { label: 'Criar Ticket', action: 'modal', icon: 'Plus' }\n      ]\n    },\n    {\n      id: 'monitoring',\n      label: 'SLA Monitor',\n      path: '/sla',\n      icon: 'Clock',\n      description: 'Acompanhar performance'\n    },\n    {\n      id: 'reports',\n      label: 'Relatórios Avançados',\n      path: '/reports',\n      icon: 'BarChart3',\n      description: 'Análises e insights'\n    },\n    {\n      id: 'administration',\n      label: 'Administração',\n      icon: 'Settings',\n      description: 'Gerenciar sistema',\n      submenu: [\n        { label: 'Gerenciar Usuários', path: '/users', icon: 'Users' },\n        { label: 'Departamentos', path: '/departments', icon: 'Building2' },\n        { label: 'Categorias', path: '/categories', icon: 'FolderTree' },\n        { label: 'Formulários', path: '/forms', icon: 'FileText' },\n        { label: 'Campos Customizáveis', path: '/fields', icon: 'Settings2' },\n        { label: 'Sistema de Aprovações', path: '/approvals', icon: 'CheckCircle' },\n        { label: 'Configuração SLA', path: '/sla-config', icon: 'Clock' },\n        { label: 'Status e Prioridades', path: '/config', icon: 'Settings' }\n      ]\n    }\n  ];\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    if (window.innerWidth < 1024) {\n      onClose();\n    }\n  };\n\n  const handleSubmenuToggle = (itemId: string) => {\n    if (isCollapsed) return;\n    setActiveSubmenu(activeSubmenu === itemId ? null : itemId);\n  };\n\n  const isActivePath = (path: string) => {\n    return location === path;\n  };\n\n  const isActiveParent = (item: any) => {\n    if (item?.path && isActivePath(item?.path)) return true;\n    if (item?.submenu) {\n      return item?.submenu?.some((subItem: any) => isActivePath(subItem?.path));\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    // Auto-expand active parent menu\n    const activeParentItem = navigationItems?.find(item => isActiveParent(item));\n    if (activeParentItem && activeParentItem?.submenu && !isCollapsed) {\n      setActiveSubmenu(activeParentItem?.id);\n    }\n  }, [location, isCollapsed]);\n\n  const sidebarWidth = isCollapsed ? 'w-16' : 'w-60';\n  const sidebarClasses = `\n    fixed top-16 left-0 h-full bg-card border-r border-border shadow-enterprise-lg z-30\n    transition-all duration-300 ease-in-out\n    ${sidebarWidth}\n    lg:translate-x-0\n    ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\n  `;\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-20 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Collapse Toggle Button - External */}\n      <button\n        onClick={onToggleCollapse}\n        className=\"fixed bg-white border border-gray-300 rounded-full p-2 shadow-lg hover:shadow-xl transition-all duration-300 z-50 hover:bg-gray-50\"\n        title={isCollapsed ? 'Expandir sidebar' : 'Recolher sidebar'}\n        style={{ \n          top: '5rem',\n          left: isCollapsed ? '4.5rem' : '15.5rem',\n          transform: 'translateX(-50%)'\n        }}\n      >\n        <Icon name={isCollapsed ? \"ChevronRight\" : \"ChevronLeft\"} size={16} />\n      </button>\n      \n      {/* Sidebar */}\n      <aside className={sidebarClasses}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className={`flex items-center border-b border-border ${isCollapsed ? 'justify-center p-2' : 'justify-between p-4'}`}>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-lg\">\n                <Icon name=\"Ticket\" size={20} color=\"white\" />\n              </div>\n              {!isCollapsed && (\n                <div>\n                  <h1 className=\"text-lg font-semibold text-foreground\">TicketFlow Pro</h1>\n                  <p className=\"text-xs text-muted-foreground\">Enterprise Edition</p>\n                </div>\n              )}\n            </div>\n\n            {/* Close Button (Mobile only when not collapsed) */}\n            {!isCollapsed && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"lg:hidden transition-enterprise\"\n              >\n                <Icon name=\"X\" size={16} />\n              </Button>\n            )}\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n            {navigationItems?.map((item) => (\n              <div key={item?.id}>\n                {/* Main Navigation Item */}\n                <div\n                  className={`\n                    group relative flex items-center rounded-lg transition-enterprise cursor-pointer\n                    ${isActiveParent(item) \n                      ? 'bg-primary text-primary-foreground' \n                      : 'text-foreground hover:bg-muted'\n                    }\n                    ${isCollapsed ? 'justify-center p-3' : 'p-3'}\n                  `}\n                  onClick={() => {\n                    if (item?.path) {\n                      handleNavigation(item?.path);\n                    } else if (item?.submenu) {\n                      handleSubmenuToggle(item?.id);\n                    }\n                  }}\n                >\n                  <div className={`flex items-center justify-center ${isCollapsed ? 'w-6 h-6' : ''}`}>\n                    <Icon \n                      name={item?.icon} \n                      size={isCollapsed ? 18 : 20} \n                      className={`\n                        ${isCollapsed ? '' : 'mr-3'} \n                        ${isActiveParent(item) ? 'text-primary-foreground' : ''}\n                      `}\n                    />\n                  </div>\n                  \n                  {!isCollapsed && (\n                    <>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{item?.label}</div>\n                        {item?.description && (\n                          <div className={`text-xs ${\n                            isActiveParent(item) ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                          }`}>\n                            {item?.description}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {item?.submenu && (\n                        <Icon \n                          name={activeSubmenu === item?.id ? \"ChevronDown\" : \"ChevronRight\"} \n                          size={16}\n                          className={`transition-transform ${\n                            isActiveParent(item) ? 'text-primary-foreground' : ''\n                          }`}\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {/* Tooltip for Collapsed State */}\n                  {isCollapsed && (\n                    <div className=\"absolute left-full ml-3 px-3 py-2 bg-gray-900 text-white rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 min-w-48\">\n                      <div className=\"text-sm font-medium mb-1\">{item?.label}</div>\n                      {item?.description && (\n                        <div className=\"text-xs opacity-80 mb-2\">{item?.description}</div>\n                      )}\n                      {/* Submenu items em tooltip */}\n                      {item?.submenu && (\n                        <div className=\"space-y-1 border-t border-gray-700 pt-2\">\n                          {item?.submenu?.map((subItem: any) => (\n                            <div \n                              key={subItem?.path || subItem?.action} \n                              className=\"text-xs opacity-80 cursor-pointer hover:opacity-100 p-1 rounded hover:bg-gray-800\"\n                              onClick={() => {\n                                if (subItem?.action === 'modal') {\n                                  onOpenTicketModal();\n                                } else {\n                                  handleNavigation(subItem?.path);\n                                }\n                              }}\n                            >\n                              {subItem?.label}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Submenu */}\n                {item?.submenu && !isCollapsed && activeSubmenu === item?.id && (\n                  <div className=\"ml-6 mt-2 space-y-1 border-l-2 border-border pl-4\">\n                    {item?.submenu?.map((subItem: any) => (\n                      <div\n                        key={subItem?.path || subItem?.action}\n                        className={`\n                          flex items-center p-2 rounded-md text-sm transition-enterprise cursor-pointer\n                          ${isActivePath(subItem?.path)\n                            ? 'bg-primary/10 text-primary font-medium' \n                            : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                          }\n                        `}\n                        onClick={() => {\n                          if (subItem?.action === 'modal') {\n                            onOpenTicketModal();\n                          } else {\n                            handleNavigation(subItem?.path);\n                          }\n                        }}\n                      >\n                        <Icon name={subItem?.icon} size={16} className=\"mr-3\" />\n                        {subItem?.label}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border\">\n            {!isCollapsed ? (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"HelpCircle\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  className=\"w-full justify-start transition-enterprise\"\n                >\n                  Ajuda & Suporte\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"LogOut\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  className=\"w-full justify-start text-error hover:text-error hover:bg-error/10 transition-enterprise\"\n                  onClick={() => handleNavigation('/login')}\n                >\n                  Sair\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-full transition-enterprise group relative\"\n                >\n                  <Icon name=\"HelpCircle\" size={16} />\n                  <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                    Ajuda & Suporte\n                  </div>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-full text-error hover:text-error hover:bg-error/10 transition-enterprise group relative\"\n                  onClick={() => handleNavigation('/login')}\n                >\n                  <Icon name=\"LogOut\" size={16} />\n                  <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                    Sair\n                  </div>\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n};\n\nexport default NewSidebar;","size_bytes":13203},"client/src/components/tickets/AssignmentControls.tsx":{"content":"import React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport Icon from '@/components/AppIcon';\n\ninterface Operator {\n  id: string;\n  name: string;\n  department: string;\n  specialties: string[];\n  currentTickets: number;\n  status: 'online' | 'busy' | 'offline';\n  serviceDeskId: string;\n}\n\ninterface ServiceDesk {\n  id: string;\n  name: string;\n  activeOperators: number;\n  defaultSla: number;\n}\n\ninterface AssignmentControlsProps {\n  formData: any;\n  onFormChange: (field: string, value: any) => void;\n  errors: any;\n  operators: Operator[];\n  serviceDesks: ServiceDesk[];\n  userRole: string;\n}\n\nexport default function AssignmentControls({\n  formData,\n  onFormChange,\n  errors,\n  operators,\n  serviceDesks,\n  userRole\n}: AssignmentControlsProps) {\n  const handleInputChange = (field: string, value: any) => {\n    onFormChange(field, value);\n  };\n\n  const filteredOperators = formData?.serviceDesk ? \n    operators?.filter(op => op?.serviceDeskId === formData?.serviceDesk) : [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'text-green-600';\n      case 'busy': return 'text-yellow-600';\n      case 'offline': return 'text-red-600';\n      default: return 'text-slate-500';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'online': return 'CheckCircle';\n      case 'busy': return 'Clock';\n      case 'offline': return 'XCircle';\n      default: return 'Circle';\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg\">\n          <Icon name=\"Users\" size={20} className=\"text-indigo-600 dark:text-indigo-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Atribuição e Roteamento\n          </h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Configure como o chamado será distribuído e tratado\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {/* Service Desk Selection */}\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Mesa de Atendimento *\n          </label>\n          <Select \n            value={formData?.serviceDesk || ''} \n            onValueChange={(value) => {\n              handleInputChange('serviceDesk', value);\n              handleInputChange('assignedOperator', '');\n            }}\n          >\n            <SelectTrigger className={errors?.serviceDesk ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione a mesa de atendimento\" />\n            </SelectTrigger>\n            <SelectContent>\n              {serviceDesks?.map(desk => (\n                <SelectItem key={desk?.id} value={desk?.id}>\n                  <div className=\"flex items-center justify-between w-full\">\n                    <div>\n                      <div className=\"font-medium\">{desk?.name}</div>\n                      <div className=\"text-xs text-slate-500\">\n                        {desk?.activeOperators} operadores ativos • SLA padrão: {desk?.defaultSla}h\n                      </div>\n                    </div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors?.serviceDesk && (\n            <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n              {errors?.serviceDesk}\n            </p>\n          )}\n        </div>\n\n        {/* Assignment Options */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                Atribuição Automática\n              </label>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Sistema escolhe automaticamente o melhor operador disponível\n              </p>\n            </div>\n            <Switch\n              checked={formData?.autoAssign || false}\n              onCheckedChange={(checked) => {\n                handleInputChange('autoAssign', checked);\n                if (checked) {\n                  handleInputChange('assignedOperator', '');\n                }\n              }}\n            />\n          </div>\n\n          {/* Manual Assignment */}\n          {!formData?.autoAssign && (\n            <div>\n              <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n                Operador Específico\n              </label>\n              <Select \n                value={formData?.assignedOperator || ''} \n                onValueChange={(value) => handleInputChange('assignedOperator', value)}\n                disabled={!formData?.serviceDesk || formData?.autoAssign}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione um operador (opcional)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"auto\">\n                    <span className=\"text-slate-500\">Deixar para distribuição automática</span>\n                  </SelectItem>\n                  {filteredOperators?.map(operator => (\n                    <SelectItem key={operator?.id} value={operator?.id}>\n                      <div className=\"flex items-center space-x-3 w-full\">\n                        <Icon \n                          name={getStatusIcon(operator?.status) as any} \n                          size={12} \n                          className={getStatusColor(operator?.status)} \n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-medium\">{operator?.name}</span>\n                            <span className=\"text-xs text-slate-500\">\n                              {operator?.currentTickets} chamados\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-slate-500\">\n                            {operator?.department} • {operator?.specialties?.join(', ')}\n                          </div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n        </div>\n\n        {/* Advanced Options */}\n        <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n          <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-4\">\n            Configurações Avançadas\n          </h4>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                  Notificação por E-mail\n                </label>\n                <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                  Enviar e-mail para o solicitante quando o chamado for criado\n                </p>\n              </div>\n              <Switch\n                checked={formData?.emailNotification !== false}\n                onCheckedChange={(checked) => handleInputChange('emailNotification', checked)}\n              />\n            </div>\n\n            {userRole === 'admin' && (\n              <>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                      Chamado Interno\n                    </label>\n                    <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Marcar como chamado interno da equipe\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData?.internalTicket || false}\n                    onCheckedChange={(checked) => handleInputChange('internalTicket', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                      Pular Validações\n                    </label>\n                    <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Ignorar algumas validações automáticas do sistema\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData?.skipValidations || false}\n                    onCheckedChange={(checked) => handleInputChange('skipValidations', checked)}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Auto Assignment Preview */}\n        {formData?.autoAssign && formData?.serviceDesk && (\n          <div className=\"p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg border border-indigo-200 dark:border-indigo-800\">\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Cpu\" size={16} className=\"text-indigo-600 dark:text-indigo-400 mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-1\">\n                  Critérios de Atribuição Automática\n                </h4>\n                <ul className=\"text-sm text-slate-600 dark:text-slate-400 space-y-1\">\n                  <li>• Especialidade do operador na categoria selecionada</li>\n                  <li>• Carga atual de trabalho (número de chamados em aberto)</li>\n                  <li>• Status de disponibilidade (online/ocupado)</li>\n                  <li>• Balanceamento de carga entre a equipe</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Operator Availability */}\n        {formData?.serviceDesk && !formData?.autoAssign && (\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <Icon name=\"Users\" size={16} className=\"text-slate-600 dark:text-slate-400\" />\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                Status da Equipe\n              </h4>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                  {filteredOperators?.filter(op => op?.status === 'online')?.length}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Disponíveis</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-yellow-600 dark:text-yellow-400\">\n                  {filteredOperators?.filter(op => op?.status === 'busy')?.length}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Ocupados</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-slate-600 dark:text-slate-400\">\n                  {filteredOperators?.reduce((acc, op) => acc + op?.currentTickets, 0)}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Chamados Ativos</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-blue-600 dark:text-blue-400\">\n                  {Math.round(filteredOperators?.reduce((acc, op) => acc + op?.currentTickets, 0) / Math.max(filteredOperators?.length, 1))}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Média por Operador</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12423},"client/src/components/users/FilterPanel.tsx":{"content":"import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface FilterPanelProps {\n  filters: {\n    status: string;\n    role: string;\n    department: string;\n    lastLogin: string;\n    search: string;\n  };\n  onFiltersChange: (filters: any) => void;\n  departments: Array<{\n    id: string;\n    name: string;\n    userCount: number;\n  }>;\n  roles: Array<{\n    id: string;\n    name: string;\n    description: string;\n  }>;\n  userStats: {\n    total: number;\n    active: number;\n    inactive: number;\n    admins: number;\n    operators: number;\n    regularUsers: number;\n  };\n}\n\nexport default function FilterPanel({\n  filters,\n  onFiltersChange,\n  departments,\n  roles,\n  userStats\n}: FilterPanelProps) {\n  const handleFilterChange = (key: string, value: string) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value\n    });\n  };\n\n  const clearFilters = () => {\n    onFiltersChange({\n      status: 'all',\n      role: 'all',\n      department: 'all',\n      lastLogin: 'all',\n      search: ''\n    });\n  };\n\n  const hasActiveFilters = Object.entries(filters).some(([key, value]) => \n    key === 'search' ? value !== '' : value !== 'all'\n  );\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n          Filtros\n        </h3>\n        {hasActiveFilters && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={clearFilters}\n            iconName=\"X\"\n            iconPosition=\"left\"\n          >\n            Limpar\n          </Button>\n        )}\n      </div>\n\n      {/* Search */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Buscar\n        </label>\n        <div className=\"relative\">\n          <Icon name=\"Search\" size={16} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Nome ou email...\"\n            value={filters.search}\n            onChange={(e) => handleFilterChange('search', e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Status Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Status\n        </label>\n        <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Todos os status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos os status</SelectItem>\n            <SelectItem value=\"active\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span>Ativo ({userStats.active})</span>\n              </div>\n            </SelectItem>\n            <SelectItem value=\"inactive\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                <span>Inativo ({userStats.inactive})</span>\n              </div>\n            </SelectItem>\n            <SelectItem value=\"pending\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                <span>Pendente</span>\n              </div>\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Role Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Função\n        </label>\n        <Select value={filters.role} onValueChange={(value) => handleFilterChange('role', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Todas as funções\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todas as funções</SelectItem>\n            {roles.map(role => (\n              <SelectItem key={role.id} value={role.id}>\n                <div>\n                  <div className=\"font-medium\">{role.name}</div>\n                  <div className=\"text-xs text-slate-500\">{role.description}</div>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Department Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Departamento\n        </label>\n        <Select value={filters.department} onValueChange={(value) => handleFilterChange('department', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Todos os departamentos\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos os departamentos</SelectItem>\n            {departments.map(dept => (\n              <SelectItem key={dept.id} value={dept.name}>\n                <div className=\"flex items-center justify-between w-full\">\n                  <span>{dept.name}</span>\n                  <span className=\"text-xs text-slate-500\">({dept.userCount})</span>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Last Login Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Último Login\n        </label>\n        <Select value={filters.lastLogin} onValueChange={(value) => handleFilterChange('lastLogin', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Qualquer período\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Qualquer período</SelectItem>\n            <SelectItem value=\"today\">Hoje</SelectItem>\n            <SelectItem value=\"week\">Esta semana</SelectItem>\n            <SelectItem value=\"month\">Este mês</SelectItem>\n            <SelectItem value=\"older\">Mais de 30 dias</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n        <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-3\">\n          Estatísticas Rápidas\n        </h4>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Users\" size={14} className=\"text-slate-500\" />\n              <span className=\"text-slate-600 dark:text-slate-400\">Total</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.total}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-slate-600 dark:text-slate-400\">Ativos</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.active}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Shield\" size={14} className=\"text-purple-500\" />\n              <span className=\"text-slate-600 dark:text-slate-400\">Admins</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.admins}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Headphones\" size={14} className=\"text-blue-500\" />\n              <span className=\"text-slate-600 dark:text-slate-400\">Operadores</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.operators}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Department Breakdown */}\n      <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n        <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-3\">\n          Por Departamento\n        </h4>\n        <div className=\"space-y-2\">\n          {departments.slice(0, 5).map(dept => (\n            <div key={dept.id} className=\"flex items-center justify-between text-sm\">\n              <span \n                className=\"text-slate-600 dark:text-slate-400 truncate cursor-pointer hover:text-slate-900 dark:hover:text-slate-100\"\n                onClick={() => handleFilterChange('department', dept.name)}\n              >\n                {dept.name}\n              </span>\n              <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                {dept.userCount}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Active Filters Summary */}\n      {hasActiveFilters && (\n        <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n          <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2\">\n            Filtros Ativos\n          </h4>\n          <div className=\"space-y-1\">\n            {filters.search && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Busca: \"{filters.search}\"\n              </div>\n            )}\n            {filters.status && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Status: {filters.status === 'active' ? 'Ativo' : filters.status === 'inactive' ? 'Inativo' : 'Pendente'}\n              </div>\n            )}\n            {filters.role && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Função: {roles.find(r => r.id === filters.role)?.name}\n              </div>\n            )}\n            {filters.department && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Depto: {filters.department}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10737},"client/src/pages/UserManagement.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport UserDetailsModal from '@/components/UserDetailsModal';\nimport { \n  Users, \n  Plus, \n  Search, \n  Shield, \n  MoreVertical,\n  Eye,\n  Lock,\n  Unlock,\n  Key,\n  UserX,\n  UserCheck,\n  Clock,\n  Activity\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  isActive: boolean;\n  isBlocked: boolean;\n  lastLoginAt: string | null;\n  createdAt: string;\n  departmentId?: string;\n}\n\n// Modal de Alteração de Senha\nfunction PasswordChangeModal({ \n  user, \n  isOpen, \n  onClose, \n  onSuccess \n}: { \n  user: User | null; \n  isOpen: boolean; \n  onClose: () => void; \n  onSuccess: () => void; \n}) {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const { toast } = useToast();\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async ({ userId, password }: { userId: string, password: string }) => {\n      return apiRequest(`/api/users/${userId}/change-password`, \"PUT\", { password });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Senha alterada\",\n        description: \"A senha do usuário foi alterada com sucesso.\",\n      });\n      onSuccess();\n      onClose();\n      setNewPassword('');\n      setConfirmPassword('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao alterar senha\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!newPassword || !confirmPassword) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, preencha todos os campos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Erro\",\n        description: \"As senhas não coincidem.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Erro\",\n        description: \"A senha deve ter pelo menos 6 caracteres.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user) {\n      changePasswordMutation.mutate({ userId: user.id, password: newPassword });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Key className=\"w-5 h-5\" />\n            Alterar Senha - {user?.name}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"newPassword\">Nova Senha</Label>\n            <Input\n              id=\"newPassword\"\n              type=\"password\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              placeholder=\"Digite a nova senha\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"confirmPassword\">Confirmar Senha</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              placeholder=\"Confirme a nova senha\"\n            />\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleSubmit}\n            disabled={changePasswordMutation.isPending}\n          >\n            {changePasswordMutation.isPending ? 'Alterando...' : 'Alterar Senha'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [passwordModalOpen, setPasswordModalOpen] = useState(false);\n  const [selectedUserForPassword, setSelectedUserForPassword] = useState<User | null>(null);\n  const [userDetailsModalOpen, setUserDetailsModalOpen] = useState(false);\n  const [selectedUserForDetails, setSelectedUserForDetails] = useState<string | null>(null);\n\n  // Fetch users\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Block/Unblock user mutation\n  const toggleBlockMutation = useMutation({\n    mutationFn: async ({ userId, block }: { userId: string, block: boolean }) => {\n      return apiRequest(`/api/users/${userId}/block`, \"PUT\", { block });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuário atualizado\",\n        description: \"Status do usuário foi alterado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao alterar status do usuário\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/users/${userId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuário removido\",\n        description: \"O usuário foi removido com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao remover usuário\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'Administrador';\n      case 'supervisor':\n        return 'Supervisor';\n      case 'colaborador':\n        return 'Colaborador';\n      default:\n        return role;\n    }\n  };\n\n  const getRoleBadgeClass = (role: string): string => {\n    switch (role) {\n      case 'admin':\n        return 'bg-purple-100 text-purple-800';\n      case 'supervisor':\n        return 'bg-blue-100 text-blue-800';\n      case 'colaborador':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return 'Nunca';\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Filter users\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = selectedRole === 'all' || user.role === selectedRole;\n    const matchesStatus = selectedStatus === 'all' || \n                         (selectedStatus === 'active' && user.isActive && !user.isBlocked) ||\n                         (selectedStatus === 'blocked' && user.isBlocked) ||\n                         (selectedStatus === 'inactive' && !user.isActive);\n    \n    return matchesSearch && matchesRole && matchesStatus;\n  });\n\n  const handlePasswordChange = (user: User) => {\n    setSelectedUserForPassword(user);\n    setPasswordModalOpen(true);\n  };\n\n  const handleToggleBlock = (user: User) => {\n    toggleBlockMutation.mutate({ \n      userId: user.id, \n      block: !user.isBlocked \n    });\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    deleteUserMutation.mutate(userId);\n  };\n\n  const handleViewUser = (userId: string) => {\n    setSelectedUserForDetails(userId);\n    setUserDetailsModalOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const activeUsers = users.filter(u => u.isActive && !u.isBlocked).length;\n  const blockedUsers = users.filter(u => u.isBlocked).length;\n  const adminUsers = users.filter(u => u.role === 'admin').length;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <div className=\"p-2 bg-primary/10 rounded-lg\">\n          <Users className=\"w-6 h-6 text-primary\" />\n        </div>\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            Gerenciamento de Usuários\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Controle total sobre usuários e segurança do sistema\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Usuários</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{users.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Usuários cadastrados</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Usuários Ativos</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{activeUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Usuários ativos no sistema</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Usuários Bloqueados</CardTitle>\n            <UserX className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{blockedUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Usuários com acesso bloqueado</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Administradores</CardTitle>\n            <Shield className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{adminUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Usuários com privilégios admin</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Buscar por nome ou email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={selectedRole} onValueChange={setSelectedRole}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por função\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as funções</SelectItem>\n                <SelectItem value=\"admin\">Administrador</SelectItem>\n                <SelectItem value=\"supervisor\">Supervisor</SelectItem>\n                <SelectItem value=\"colaborador\">Colaborador</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os status</SelectItem>\n                <SelectItem value=\"active\">Ativos</SelectItem>\n                <SelectItem value=\"blocked\">Bloqueados</SelectItem>\n                <SelectItem value=\"inactive\">Inativos</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Usuários ({filteredUsers.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Usuário</TableHead>\n                <TableHead>Função</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Último Acesso</TableHead>\n                <TableHead className=\"text-right\">Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredUsers.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarFallback className=\"bg-gradient-to-br from-[#2c4257] to-[#6b8fb0] text-white text-sm\">\n                          {user.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"font-medium\">{user.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getRoleBadgeVariant(user.role)}>\n                      {getRoleLabel(user.role)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-col space-y-1\">\n                      {user.isBlocked ? (\n                        <Badge variant=\"outline\" className=\"text-red-600 border-red-200 w-fit\">\n                          <UserX className=\"w-3 h-3 mr-1\" />\n                          Bloqueado\n                        </Badge>\n                      ) : user.isActive ? (\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200 w-fit\">\n                          <UserCheck className=\"w-3 h-3 mr-1\" />\n                          Ativo\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-gray-600 border-gray-200 w-fit\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Inativo\n                        </Badge>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {formatDate(user.lastLoginAt)}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => handleViewUser(user.id)}>\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          Visualizar\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem onClick={() => handlePasswordChange(user)}>\n                          <Key className=\"w-4 h-4 mr-2\" />\n                          Alterar Senha\n                        </DropdownMenuItem>\n                        \n                        <DropdownMenuItem onClick={() => handleToggleBlock(user)}>\n                          {user.isBlocked ? (\n                            <>\n                              <Unlock className=\"w-4 h-4 mr-2\" />\n                              Desbloquear\n                            </>\n                          ) : (\n                            <>\n                              <Lock className=\"w-4 h-4 mr-2\" />\n                              Bloquear\n                            </>\n                          )}\n                        </DropdownMenuItem>\n                        \n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <DropdownMenuItem \n                              onSelect={(e) => e.preventDefault()}\n                              className=\"text-red-600\"\n                            >\n                              <UserX className=\"w-4 h-4 mr-2\" />\n                              Deletar Usuário\n                            </DropdownMenuItem>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Confirmar exclusão</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Tem certeza que deseja deletar o usuário <strong>{user.name}</strong>? \n                                Esta ação não pode ser desfeita e todos os dados relacionados serão removidos.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteUser(user.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Deletar\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          \n          {filteredUsers.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Users className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n              <p className=\"text-gray-500\">Nenhum usuário encontrado</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Password Change Modal */}\n      <PasswordChangeModal\n        user={selectedUserForPassword}\n        isOpen={passwordModalOpen}\n        onClose={() => {\n          setPasswordModalOpen(false);\n          setSelectedUserForPassword(null);\n        }}\n        onSuccess={() => {\n          queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n        }}\n      />\n\n      {/* User Details Modal */}\n      <UserDetailsModal\n        userId={selectedUserForDetails}\n        isOpen={userDetailsModalOpen}\n        onClose={() => {\n          setUserDetailsModalOpen(false);\n          setSelectedUserForDetails(null);\n        }}\n      />\n    </div>\n  );\n}","size_bytes":20955},"client/src/components/users/UserDataGrid.tsx":{"content":"import React from 'react';\nimport UserCard from '@/components/users/UserCard';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n  createdAt: string;\n  avatar?: string | null;\n  phone?: string;\n  extension?: string;\n  location?: string;\n  manager?: string | null;\n  permissions?: string[];\n  ticketsAssigned?: number;\n  ticketsResolved?: number;\n  averageResolutionTime?: string;\n  satisfactionRating?: number;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  userCount: number;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface UserDataGridProps {\n  users: User[];\n  selectedUsers: string[];\n  onUserSelect: (userId: string) => void;\n  onUserMultiSelect: (userIds: string[]) => void;\n  onUserEdit: (userId: string) => void;\n  onUserDelete: (userId: string) => void;\n  viewMode: 'grid' | 'list';\n  departments: Department[];\n  roles: Role[];\n}\n\nexport default function UserDataGrid({\n  users,\n  selectedUsers,\n  onUserSelect,\n  onUserMultiSelect,\n  onUserEdit,\n  onUserDelete,\n  viewMode,\n  departments,\n  roles\n}: UserDataGridProps) {\n  const handleSelectAll = () => {\n    if (selectedUsers.length === users.length) {\n      onUserMultiSelect([]);\n    } else {\n      onUserMultiSelect(users.map(u => u.id));\n    }\n  };\n\n  const handleUserCheck = (userId: string) => {\n    const newSelection = selectedUsers.includes(userId)\n      ? selectedUsers.filter(id => id !== userId)\n      : [...selectedUsers, userId];\n    onUserMultiSelect(newSelection);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getRoleName = (roleId: string) => {\n    return roles.find(r => r.id === roleId)?.name || roleId;\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'administrador': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';\n      case 'supervisor': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'colaborador': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'inactive': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  if (users.length === 0) {\n    return (\n      <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-12 text-center\">\n        <Icon name=\"Users\" size={48} className=\"text-slate-400 dark:text-slate-600 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">\n          Nenhum usuário encontrado\n        </h3>\n        <p className=\"text-slate-600 dark:text-slate-400 mb-6\">\n          Não há usuários que correspondam aos filtros aplicados.\n        </p>\n        <Button iconName=\"Plus\" iconPosition=\"left\">\n          Criar Primeiro Usuário\n        </Button>\n      </div>\n    );\n  }\n\n  if (viewMode === 'grid') {\n    return (\n      <div className=\"space-y-4\">\n        {/* Selection Header */}\n        {users.length > 0 && (\n          <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Checkbox\n                checked={selectedUsers.length === users.length && users.length > 0}\n                onCheckedChange={handleSelectAll}\n              />\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {selectedUsers.length > 0 \n                  ? `${selectedUsers.length} de ${users.length} selecionado(s)`\n                  : `Selecionar todos (${users.length})`\n                }\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* User Cards Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {users.map(user => (\n            <UserCard\n              key={user.id}\n              user={user}\n              isSelected={selectedUsers.includes(user.id)}\n              onSelect={() => onUserSelect(user.id)}\n              onCheck={() => handleUserCheck(user.id)}\n              onEdit={() => onUserEdit(user.id)}\n              onDelete={() => onUserDelete(user.id)}\n              departments={departments}\n              roles={roles}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // List View\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 overflow-hidden\">\n      {/* Table Header */}\n      <div className=\"border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\n        <div className=\"grid grid-cols-12 gap-4 p-4 text-sm font-medium text-slate-900 dark:text-slate-100\">\n          <div className=\"col-span-1 flex items-center\">\n            <Checkbox\n              checked={selectedUsers.length === users.length && users.length > 0}\n              onCheckedChange={handleSelectAll}\n            />\n          </div>\n          <div className=\"col-span-3\">Usuário</div>\n          <div className=\"col-span-2\">Função</div>\n          <div className=\"col-span-2\">Departamento</div>\n          <div className=\"col-span-1\">Status</div>\n          <div className=\"col-span-2\">Último Login</div>\n          <div className=\"col-span-1\">Ações</div>\n        </div>\n      </div>\n\n      {/* Table Body */}\n      <div className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n        {users.map(user => (\n          <div\n            key={user.id}\n            className={`grid grid-cols-12 gap-4 p-4 hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors ${\n              selectedUsers.includes(user.id) ? 'bg-blue-50 dark:bg-blue-900/10' : ''\n            }`}\n          >\n            <div className=\"col-span-1 flex items-center\">\n              <Checkbox\n                checked={selectedUsers.includes(user.id)}\n                onCheckedChange={() => handleUserCheck(user.id)}\n              />\n            </div>\n            \n            <div className=\"col-span-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-shrink-0\">\n                  {user.avatar ? (\n                    <img\n                      src={user.avatar}\n                      alt={user.name}\n                      className=\"w-10 h-10 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-10 h-10 bg-slate-100 dark:bg-slate-700 rounded-full flex items-center justify-center\">\n                      <Icon name=\"User\" size={16} className=\"text-slate-500 dark:text-slate-400\" />\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <button\n                    onClick={() => onUserSelect(user.id)}\n                    className=\"text-sm font-medium text-slate-900 dark:text-slate-100 hover:text-blue-600 dark:hover:text-blue-400 text-left\"\n                  >\n                    {user.name}\n                  </button>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"col-span-2 flex items-center\">\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>\n                {getRoleName(user.role)}\n              </span>\n            </div>\n            \n            <div className=\"col-span-2 flex items-center\">\n              <span className=\"text-sm text-slate-900 dark:text-slate-100\">\n                {user.department}\n              </span>\n            </div>\n            \n            <div className=\"col-span-1 flex items-center\">\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(user.status)}`}>\n                {getStatusLabel(user.status)}\n              </span>\n            </div>\n            \n            <div className=\"col-span-2 flex items-center\">\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {formatDate(user.lastLogin)}\n              </span>\n            </div>\n            \n            <div className=\"col-span-1 flex items-center space-x-1\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => onUserSelect(user.id)}\n                iconName=\"Eye\"\n                title=\"Visualizar usuário\"\n              />\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => onUserEdit(user.id)}\n                iconName=\"Edit\"\n                title=\"Editar usuário\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Table Footer */}\n      <div className=\"border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700 p-4\">\n        <div className=\"flex items-center justify-between text-sm text-slate-600 dark:text-slate-400\">\n          <span>\n            {selectedUsers.length > 0 && `${selectedUsers.length} selecionado(s) • `}\n            Mostrando {users.length} usuário(s)\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            <Button size=\"sm\" variant=\"outline\" disabled iconName=\"ChevronLeft\">\n              Anterior\n            </Button>\n            <span className=\"px-3 py-1 text-xs\">Página 1 de 1</span>\n            <Button size=\"sm\" variant=\"outline\" disabled iconName=\"ChevronRight\">\n              Próxima\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10733},"client/src/components/users/UserDetailsPanel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Calendar, \n  Shield, \n  Activity, \n  BarChart3, \n  Clock, \n  CheckCircle, \n  Star, \n  Edit, \n  Save, \n  X, \n  Settings,\n  Award,\n  Target,\n  TrendingUp,\n  Users,\n  Ticket\n} from 'lucide-react';\n\ninterface UserType {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n  createdAt: string;\n  avatar?: string | null;\n  phone?: string;\n  extension?: string;\n  location?: string;\n  manager?: string | null;\n  permissions?: string[];\n  ticketsAssigned?: number;\n  ticketsResolved?: number;\n  averageResolutionTime?: string;\n  satisfactionRating?: number;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  userCount: number;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface UserDetailsPanelProps {\n  userId: string;\n  onClose: () => void;\n  user?: UserType;\n  departments: Department[];\n  roles: Role[];\n  isEditing?: boolean;\n  onUserUpdate?: (updatedUser: any) => void;\n}\n\nexport default function UserDetailsPanel({\n  userId,\n  onClose,\n  user,\n  departments,\n  roles,\n  isEditing: initialIsEditing = false,\n  onUserUpdate\n}: UserDetailsPanelProps) {\n  const [isEditing, setIsEditing] = useState(initialIsEditing);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n    extension: user?.extension || '',\n    role: user?.role || '',\n    department: user?.department || '',\n    status: user?.status || 'active',\n    location: user?.location || '',\n    manager: user?.manager || ''\n  });\n\n  useEffect(() => {\n    setIsEditing(initialIsEditing);\n  }, [initialIsEditing]);\n\n  if (!user) {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <User className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Usuário não encontrado</h3>\n            <p className=\"text-slate-600 dark:text-slate-400 mb-6\">\n              O usuário selecionado não pôde ser carregado.\n            </p>\n            <Button onClick={onClose} className=\"w-full\">Fechar</Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleSave = async () => {\n    try {\n      console.log('Salvando dados do usuário:', formData);\n      \n      // Usar userId do prop ao invés de user.id\n      const userIdToUpdate = userId || user?.id;\n      \n      if (!userIdToUpdate) {\n        throw new Error('ID do usuário não encontrado');\n      }\n\n      // Fazer chamada para API de atualização de usuário  \n      const response = await fetch(`/api/users/${userIdToUpdate}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          email: formData.email,\n          role: formData.role,\n          departmentId: formData.department,\n          phone: formData.phone,\n          extension: formData.extension,\n          location: formData.location\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const updatedUser = await response.json();\n      console.log('Usuário atualizado com sucesso:', updatedUser);\n      \n      setIsEditing(false);\n      setHasUnsavedChanges(false);\n      \n      // Atualizar formData com os dados salvos\n      setFormData({\n        name: updatedUser.name,\n        email: updatedUser.email,\n        phone: updatedUser.phone || '',\n        extension: updatedUser.extension || '',\n        role: updatedUser.role,\n        department: updatedUser.departmentId || '',\n        status: updatedUser.status || 'active',\n        location: updatedUser.location || '',\n        manager: updatedUser.manager || ''\n      });\n      \n      // Notificar componente pai da atualização\n      if (onUserUpdate) {\n        onUserUpdate(updatedUser);\n      }\n      \n      alert('Dados do usuário salvos com sucesso!');\n    } catch (error) {\n      console.error('Erro na requisição:', error);\n      alert(`Erro ao salvar usuário: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);\n    }\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n      extension: user?.extension || '',\n      role: user?.role || '',\n      department: user?.department || '',\n      status: user?.status || 'active',\n      location: user?.location || '',\n      manager: user?.manager || ''\n    });\n    setIsEditing(false);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getRoleName = (roleId: string) => {\n    switch (roleId) {\n      case 'administrador': return 'Administrador';\n      case 'supervisor': return 'Supervisor';\n      case 'colaborador': return 'Colaborador';\n      default: return roleId;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'inactive': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'administrador': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';\n      case 'supervisor': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'colaborador': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  // Mock performance data\n  const performanceData = [\n    { month: 'Jan', tickets: 45, satisfaction: 4.5 },\n    { month: 'Fev', tickets: 52, satisfaction: 4.7 },\n    { month: 'Mar', tickets: 48, satisfaction: 4.6 },\n    { month: 'Abr', tickets: 61, satisfaction: 4.8 },\n    { month: 'Mai', tickets: 55, satisfaction: 4.7 },\n    { month: 'Jun', tickets: 67, satisfaction: 4.9 }\n  ];\n\n  const weeklyActivity = [\n    { day: 'Seg', hours: 8.5 },\n    { day: 'Ter', hours: 7.2 },\n    { day: 'Qua', hours: 8.8 },\n    { day: 'Qui', hours: 6.5 },\n    { day: 'Sex', hours: 8.0 },\n    { day: 'Sáb', hours: 2.5 },\n    { day: 'Dom', hours: 0 }\n  ];\n\n  const recentActivity = [\n    { \n      id: '1', \n      type: 'ticket_resolved', \n      icon: CheckCircle,\n      title: 'Ticket #1234 resolvido', \n      description: 'Problema de rede solucionado com sucesso', \n      timestamp: '2024-01-15T14:30:00Z',\n      color: 'text-green-600'\n    },\n    { \n      id: '2', \n      type: 'login', \n      icon: Activity,\n      title: 'Login realizado', \n      description: 'Acesso ao sistema às 09:00', \n      timestamp: '2024-01-15T09:00:00Z',\n      color: 'text-blue-600'\n    },\n    { \n      id: '3', \n      type: 'ticket_assigned', \n      icon: Users,\n      title: 'Novo ticket atribuído', \n      description: 'Ticket #1235 - Solicitação de acesso', \n      timestamp: '2024-01-14T16:45:00Z',\n      color: 'text-orange-600'\n    },\n    { \n      id: '4', \n      type: 'profile_updated', \n      icon: Settings,\n      title: 'Perfil atualizado', \n      description: 'Informações de contato modificadas', \n      timestamp: '2024-01-14T11:20:00Z',\n      color: 'text-purple-600'\n    }\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-2xl w-full max-w-6xl max-h-[95vh] overflow-hidden\">\n        {/* Header com Gradiente OPUS */}\n        <div className=\"relative p-6\" style={{ background: 'linear-gradient(90deg, #2c4257 0%, #6b8fb0 100%)' }}>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                {user.avatar ? (\n                  <img\n                    src={user.avatar}\n                    alt={user.name}\n                    className=\"w-20 h-20 rounded-full object-cover border-4 border-white/20\"\n                  />\n                ) : (\n                  <div className=\"w-20 h-20 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white text-2xl font-bold border-4 border-white/20\">\n                    {getInitials(user.name)}\n                  </div>\n                )}\n                <div className={`absolute -bottom-1 -right-1 w-6 h-6 rounded-full border-4 border-white ${\n                  user.status === 'active' ? 'bg-green-500' : \n                  user.status === 'inactive' ? 'bg-red-500' : 'bg-yellow-500'\n                }`}></div>\n              </div>\n              \n              <div className=\"text-white\">\n                <h1 className=\"text-3xl font-bold\">{user.name}</h1>\n                <div className=\"flex items-center space-x-4 mt-2\">\n                  <Badge className={`${getRoleColor(user.role)} text-sm font-medium`}>\n                    <Shield className=\"w-3 h-3 mr-1\" />\n                    {getRoleName(user.role)}\n                  </Badge>\n                  <Badge className={`${getStatusColor(user.status)} text-sm font-medium`}>\n                    {getStatusLabel(user.status)}\n                  </Badge>\n                </div>\n                <p className=\"text-white/80 mt-1 flex items-center\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {user.email}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              {!isEditing ? (\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setIsEditing(true)}\n                  className=\"bg-white/20 border-white/30 text-white hover:bg-white/30\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Editar\n                </Button>\n              ) : (\n                <>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={handleCancel}\n                    className=\"bg-white/20 border-white/30 text-white hover:bg-white/30\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Cancelar\n                  </Button>\n                  <Button\n                    onClick={handleSave}\n                    className=\"bg-green-600 hover:bg-green-700 text-white border-0\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Salvar\n                  </Button>\n                </>\n              )}\n              \n              <Button\n                variant=\"ghost\"\n                onClick={onClose}\n                className=\"text-white hover:bg-white/20\"\n                size=\"sm\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"max-h-[calc(95vh-8rem)] overflow-y-auto\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800/50\">\n              <TabsList className=\"grid w-full grid-cols-4 bg-transparent\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Informações\n                </TabsTrigger>\n                <TabsTrigger value=\"performance\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Performance\n                </TabsTrigger>\n                <TabsTrigger value=\"activity\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  Atividade\n                </TabsTrigger>\n                <TabsTrigger value=\"permissions\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Permissões\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <div className=\"p-6\">\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                {/* Estatísticas Rápidas */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                          <Ticket className=\"w-5 h-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.ticketsAssigned || 0}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Tickets Ativos</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.ticketsResolved || 0}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Resolvidos</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center\">\n                          <Clock className=\"w-5 h-5 text-orange-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.averageResolutionTime || '0h'}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Tempo Médio</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg flex items-center justify-center\">\n                          <Star className=\"w-5 h-5 text-yellow-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.satisfactionRating || '0.0'}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Satisfação</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Informações Pessoais e Profissionais */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <User className=\"w-5 h-5\" />\n                        <span>Informações Pessoais</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Nome Completo\n                        </label>\n                        {isEditing ? (\n                          <Input\n                            value={formData.name}\n                            onChange={(e) => setFormData({...formData, name: e.target.value})}\n                          />\n                        ) : (\n                          <p className=\"text-slate-600 dark:text-slate-400\">{user.name}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Email\n                        </label>\n                        {isEditing ? (\n                          <Input\n                            type=\"email\"\n                            value={formData.email}\n                            onChange={(e) => setFormData({...formData, email: e.target.value})}\n                          />\n                        ) : (\n                          <p className=\"text-slate-600 dark:text-slate-400\">{user.email}</p>\n                        )}\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                            Telefone\n                          </label>\n                          {isEditing ? (\n                            <Input\n                              value={formData.phone}\n                              onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                            />\n                          ) : (\n                            <p className=\"text-slate-600 dark:text-slate-400\">{user.phone || 'Não informado'}</p>\n                          )}\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                            Ramal\n                          </label>\n                          {isEditing ? (\n                            <Input\n                              value={formData.extension}\n                              onChange={(e) => setFormData({...formData, extension: e.target.value})}\n                            />\n                          ) : (\n                            <p className=\"text-slate-600 dark:text-slate-400\">{user.extension || 'Não informado'}</p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Localização\n                        </label>\n                        {isEditing ? (\n                          <Input\n                            value={formData.location}\n                            onChange={(e) => setFormData({...formData, location: e.target.value})}\n                          />\n                        ) : (\n                          <div className=\"flex items-center text-slate-600 dark:text-slate-400\">\n                            <MapPin className=\"w-4 h-4 mr-2\" />\n                            {user.location || 'Não informado'}\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Shield className=\"w-5 h-5\" />\n                        <span>Informações Profissionais</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Função\n                        </label>\n                        {isEditing ? (\n                          <Select value={formData.role} onValueChange={(value) => setFormData({...formData, role: value})}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {roles.map(role => (\n                                <SelectItem key={role.id} value={role.id}>\n                                  {role.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <Badge className={`${getRoleColor(user.role)} text-sm`}>\n                            {getRoleName(user.role)}\n                          </Badge>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Departamento\n                        </label>\n                        {isEditing ? (\n                          <Select value={formData.department} onValueChange={(value) => setFormData({...formData, department: value})}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {departments.map(dept => (\n                                <SelectItem key={dept.id} value={dept.name}>\n                                  {dept.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <p className=\"text-slate-600 dark:text-slate-400\">{user.department}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Status\n                        </label>\n                        {isEditing ? (\n                          <Select value={formData.status} onValueChange={(value) => setFormData({...formData, status: value})}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"active\">Ativo</SelectItem>\n                              <SelectItem value=\"inactive\">Inativo</SelectItem>\n                              <SelectItem value=\"pending\">Pendente</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <Badge className={`${getStatusColor(user.status)} text-sm`}>\n                            {getStatusLabel(user.status)}\n                          </Badge>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Gerente\n                        </label>\n                        <p className=\"text-slate-600 dark:text-slate-400\">{user.manager || 'Não informado'}</p>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Membro desde\n                        </label>\n                        <div className=\"flex items-center text-slate-600 dark:text-slate-400\">\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          {formatDate(user.createdAt)}\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Último acesso\n                        </label>\n                        <div className=\"flex items-center text-slate-600 dark:text-slate-400\">\n                          <Activity className=\"w-4 h-4 mr-2\" />\n                          {formatDate(user.lastLogin)}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"performance\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <TrendingUp className=\"w-5 h-5\" />\n                        <span>Performance Mensal</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <LineChart data={performanceData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"month\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line type=\"monotone\" dataKey=\"tickets\" stroke=\"#3b82f6\" strokeWidth={2} />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-5 h-5\" />\n                        <span>Atividade Semanal</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={weeklyActivity}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"day\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"hours\" fill=\"#10b981\" radius={[4, 4, 0, 0]} />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Métricas de Performance */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                          <Target className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Meta Mensal</p>\n                          <p className=\"text-2xl font-bold\">85%</p>\n                          <p className=\"text-sm text-green-600\">+5% vs mês anterior</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                          <Award className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Qualidade</p>\n                          <p className=\"text-2xl font-bold\">4.8/5</p>\n                          <p className=\"text-sm text-green-600\">Excelente</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                          <Clock className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Eficiência</p>\n                          <p className=\"text-2xl font-bold\">92%</p>\n                          <p className=\"text-sm text-green-600\">Acima da média</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"activity\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Activity className=\"w-5 h-5\" />\n                      <span>Atividade Recente</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {recentActivity.map((activity) => {\n                        const IconComponent = activity.icon;\n                        return (\n                          <div key={activity.id} className=\"flex items-start space-x-4 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\n                            <div className={`w-10 h-10 rounded-full flex items-center justify-center bg-slate-100 dark:bg-slate-800`}>\n                              <IconComponent className={`w-5 h-5 ${activity.color}`} />\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">\n                                {activity.title}\n                              </h4>\n                              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                                {activity.description}\n                              </p>\n                              <p className=\"text-xs text-slate-500 dark:text-slate-500 mt-1\">\n                                {formatDate(activity.timestamp)}\n                              </p>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"permissions\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Shield className=\"w-5 h-5\" />\n                      <span>Permissões do Sistema</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Gerenciar Usuários</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Criar, editar e excluir usuários</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('users.write')} />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Visualizar Relatórios</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Acesso aos relatórios do sistema</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('reports.read')} />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Gerenciar Tickets</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Criar e editar tickets</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('tickets.write')} />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Configurações do Sistema</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Acesso às configurações administrativas</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('admin.settings')} />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":35613},"client/src/components/Header.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport Icon from './AppIcon';\nimport Button from './Button';\nimport SimpleTicketModal from './SimpleTicketModal';\nimport { ThemeToggle } from './ThemeToggle';\nimport NotificationSystem, { useNotifications } from './NotificationSystem';\nimport { Bell } from 'lucide-react';\nimport { Badge } from './ui/badge';\n\ninterface HeaderProps {\n  onSidebarToggle: () => void;\n  isSidebarCollapsed?: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = ({ onSidebarToggle, isSidebarCollapsed = false }) => {\n  const [location, setLocation] = useLocation();\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isNotificationOpen, setIsNotificationOpen] = useState(false);\n  const { unreadCount } = useNotifications();\n  \n  const navigate = (path: string) => setLocation(path);\n\n  const primaryNavItems = [\n    { label: 'Dashboard', path: '/', icon: 'LayoutDashboard' },\n    { label: 'Tickets', path: '/tickets', icon: 'Ticket' },\n    { label: 'Criar Ticket', path: 'CREATE_MODAL', icon: 'Plus' },\n    { label: 'SLA Monitor', path: '/sla', icon: 'Clock' },\n  ];\n\n  const secondaryNavItems = [\n    { label: 'Gerenciar Usuários', path: '/users', icon: 'Users' },\n  ];\n\n  const handleNavigation = (path: string) => {\n    if (path === 'CREATE_MODAL') {\n      setIsCreateModalOpen(true);\n    } else {\n      navigate(path);\n    }\n    setIsMoreMenuOpen(false);\n  };\n\n  const isActivePath = (path: string) => {\n    if (path === 'CREATE_MODAL') return false;\n    return location === path;\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-40 bg-card border-b border-border shadow-enterprise\">\n      <div className=\"flex items-center justify-between h-16 px-4\">\n        {/* Left Section - Logo e Menu Mobile */}\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onSidebarToggle}\n            className=\"lg:hidden\"\n          >\n            <Icon name=\"Menu\" size={20} />\n          </Button>\n          \n          {/* Logo do Grupo OPUS - apenas a logo */}\n          <div className=\"flex items-center\">\n            <img \n              src=\"/logo-opus.png\" \n              alt=\"Grupo OPUS\" \n              className=\"w-20 h-auto object-contain\"\n            />\n          </div>\n        </div>\n\n        {/* Center Section - Primary Navigation (Desktop) */}\n        <nav className=\"hidden lg:flex items-center space-x-1\">\n          {primaryNavItems?.map((item) => (\n            <Button\n              key={item?.path}\n              variant={isActivePath(item?.path) ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => handleNavigation(item?.path)}\n              iconName={item?.icon}\n              iconPosition=\"left\"\n              iconSize={16}\n              className=\"transition-enterprise\"\n            >\n              {item?.label}\n            </Button>\n          ))}\n        </nav>\n\n        {/* Right Section - More Menu and User Actions */}\n        <div className=\"flex items-center space-x-2\">\n          {/* More Menu */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMoreMenuOpen(!isMoreMenuOpen)}\n              iconName=\"MoreHorizontal\"\n              iconSize={16}\n              className=\"transition-enterprise\"\n            >\n              Mais\n            </Button>\n            \n            {isMoreMenuOpen && (\n              <div className=\"absolute right-0 top-full mt-2 w-48 bg-popover border border-border rounded-lg shadow-enterprise-lg z-50\">\n                <div className=\"py-2\">\n                  {secondaryNavItems?.map((item) => (\n                    <button\n                      key={item?.path}\n                      onClick={() => handleNavigation(item?.path)}\n                      className={`w-full flex items-center space-x-3 px-4 py-2 text-sm transition-enterprise hover:bg-muted ${\n                        isActivePath(item?.path) ? 'bg-muted text-primary' : 'text-foreground'\n                      }`}\n                    >\n                      <Icon name={item?.icon} size={16} />\n                      <span>{item?.label}</span>\n                    </button>\n                  ))}\n                  <div className=\"border-t border-border my-2\"></div>\n                  <button \n                    onClick={() => {\n                      window.open('https://docs.ticketflow.com', '_blank');\n                      setIsMoreMenuOpen(false);\n                    }}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-foreground hover:bg-muted transition-enterprise\"\n                  >\n                    <Icon name=\"HelpCircle\" size={16} />\n                    <span>Ajuda</span>\n                  </button>\n                  <button \n                    onClick={() => {\n                      // Clear authentication data\n                      localStorage.removeItem('authToken');\n                      localStorage.removeItem('currentUser');\n                      // Redirect to login\n                      window.location.href = '/login';\n                    }}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-enterprise\"\n                  >\n                    <Icon name=\"LogOut\" size={16} />\n                    <span>Sair</span>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* User Profile */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleNavigation('/profile')}\n            iconName=\"User\"\n            iconSize={16}\n            className=\"transition-enterprise\"\n          >\n            Perfil\n          </Button>\n\n          {/* Theme Toggle */}\n          <ThemeToggle />\n\n          {/* Notifications */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsNotificationOpen(!isNotificationOpen)}\n              className=\"relative transition-enterprise\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell size={18} />\n              {unreadCount > 0 && (\n                <Badge \n                  variant=\"destructive\" \n                  className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                  data-testid=\"badge-notification-count\"\n                >\n                  {unreadCount > 9 ? '9+' : unreadCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile Navigation Menu */}\n      <div className=\"lg:hidden border-t border-border bg-card\">\n        <nav className=\"flex overflow-x-auto px-4 py-2 space-x-1\">\n          {primaryNavItems?.map((item) => (\n            <Button\n              key={item?.path}\n              variant={isActivePath(item?.path) ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => handleNavigation(item?.path)}\n              iconName={item?.icon}\n              iconPosition=\"left\"\n              iconSize={14}\n              className=\"whitespace-nowrap transition-enterprise\"\n            >\n              {item?.label}\n            </Button>\n          ))}\n        </nav>\n      </div>\n      \n      {/* Overlay for More Menu */}\n      {isMoreMenuOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsMoreMenuOpen(false)}\n        />\n      )}\n      \n      {/* SimpleTicketModal */}\n      <SimpleTicketModal \n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n\n      {/* Notification System */}\n      <NotificationSystem\n        isOpen={isNotificationOpen}\n        onClose={() => setIsNotificationOpen(false)}\n      />\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":8099},"client/src/pages/Categories.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Plus, Edit2, Trash2, Clock, Target, Users, Building2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Category {\n  id: string;\n  name: string;\n  description?: string;\n  departmentId: string;\n  slaHours: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n}\n\nfunction Categories() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    departmentId: '',\n    slaHours: 24,\n    isActive: true\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar categorias\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Buscar departamentos\n  const { data: departments = [], isLoading: departmentsLoading } = useQuery<Department[]>({\n    queryKey: ['/api/departments'],\n  });\n\n  // Mutations\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: any) => {\n      return await apiRequest('/api/categories', 'POST', categoryData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setIsModalOpen(false);\n      resetForm();\n      toast({\n        title: 'Categoria criada',\n        description: 'Nova categoria foi criada com sucesso.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro',\n        description: error.message || 'Erro ao criar categoria.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, ...categoryData }: any) => {\n      return await apiRequest(`/api/categories/${id}`, 'PUT', categoryData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setIsModalOpen(false);\n      setEditingCategory(null);\n      resetForm();\n      toast({\n        title: 'Categoria atualizada',\n        description: 'Categoria foi atualizada com sucesso.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro',\n        description: error.message || 'Erro ao atualizar categoria.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (categoryId: string) => {\n      return await apiRequest(`/api/categories/${categoryId}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({\n        title: 'Categoria excluída',\n        description: 'Categoria foi excluída com sucesso.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro',\n        description: error.message || 'Erro ao excluir categoria.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      departmentId: '',\n      slaHours: 24,\n      isActive: true\n    });\n  };\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    setFormData({\n      name: category.name,\n      description: category.description || '',\n      departmentId: category.departmentId,\n      slaHours: category.slaHours,\n      isActive: category.isActive\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: 'Erro',\n        description: 'Nome da categoria é obrigatório.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!formData.departmentId) {\n      toast({\n        title: 'Erro',\n        description: 'Departamento é obrigatório.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, ...formData });\n    } else {\n      createCategoryMutation.mutate(formData);\n    }\n  };\n\n  const getDepartmentName = (departmentId: string) => {\n    const department = departments.find(d => d.id === departmentId);\n    return department?.name || 'Departamento não encontrado';\n  };\n\n  const handleDelete = (categoryId: string) => {\n    if (confirm('Tem certeza que deseja excluir esta categoria?')) {\n      deleteCategoryMutation.mutate(categoryId);\n    }\n  };\n\n  if (categoriesLoading || departmentsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center\">Carregando categorias...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Gerenciamento de Categorias</h1>\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\" onClick={() => {\n              setEditingCategory(null);\n              resetForm();\n            }}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nova Categoria\n            </Button>\n          </DialogTrigger>\n          \n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? 'Editar Categoria' : 'Nova Categoria'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome da Categoria *</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Ex: Suporte Técnico\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Descrição</Label>\n                <Input\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Descrição da categoria\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"department\">Departamento *</Label>\n                <Select \n                  value={formData.departmentId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, departmentId: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um departamento\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {departments.map((dept) => (\n                      <SelectItem key={dept.id} value={dept.id}>\n                        {dept.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"slaHours\">SLA (horas) *</Label>\n                <Input\n                  id=\"slaHours\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.slaHours}\n                  onChange={(e) => setFormData(prev => ({ ...prev, slaHours: parseInt(e.target.value) || 24 }))}\n                  placeholder=\"24\"\n                  required\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isActive\"\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                />\n                <Label htmlFor=\"isActive\">Categoria ativa</Label>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsModalOpen(false)}\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={createCategoryMutation.isPending || updateCategoryMutation.isPending}\n                >\n                  {editingCategory ? 'Atualizar' : 'Criar'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Lista de Categorias */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Categorias Cadastradas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {categories.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                Nenhuma categoria cadastrada ainda.\n              </div>\n            ) : (\n              <div className=\"grid gap-4\">\n                {categories.map((category) => (\n                  <div key={category.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h3 className=\"font-medium text-gray-900\">{category.name}</h3>\n                          {category.description && (\n                            <p className=\"text-sm text-gray-600\">{category.description}</p>\n                          )}\n                          <div className=\"flex items-center space-x-4 mt-2\">\n                            <div className=\"flex items-center text-sm text-gray-500\">\n                              <Building2 className=\"w-4 h-4 mr-1\" />\n                              {getDepartmentName(category.departmentId)}\n                            </div>\n                            <div className=\"flex items-center text-sm text-gray-500\">\n                              <Clock className=\"w-4 h-4 mr-1\" />\n                              {category.slaHours}h SLA\n                            </div>\n                            <Badge variant={category.isActive ? \"default\" : \"secondary\"}>\n                              {category.isActive ? 'Ativo' : 'Inativo'}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(category)}\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(category.id)}\n                          disabled={deleteCategoryMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Categories;","size_bytes":12286},"client/src/components/TicketModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Eye, Edit, Save, X, Paperclip, MessageCircle, Clock, User, \n  FileText, Image, Download, Upload, Calendar, AlertCircle,\n  CheckCircle, Pause, Play, MoreHorizontal, Send\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\n\ninterface TicketModalProps {\n  ticket: any;\n  children: React.ReactNode;\n  onUpdate?: (ticket: any) => void;\n}\n\nexport function TicketModal({ ticket, children, onUpdate }: TicketModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTicket, setEditedTicket] = useState(ticket);\n  const [newComment, setNewComment] = useState('');\n  const [newTag, setNewTag] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar comentários do ticket\n  const { data: comments, isLoading: commentsLoading } = useQuery<any[]>({\n    queryKey: ['/api/tickets', ticket.id, 'comments'],\n    enabled: isOpen && !!ticket.id,\n  });\n\n  // Buscar usuários para saber quem está logado\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n    enabled: isOpen,\n  });\n\n  // Buscar configurações de status e prioridade\n  const { data: statusConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/status'],\n    enabled: isOpen,\n  });\n\n  const { data: priorityConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/priority'],\n    enabled: isOpen,\n  });\n\n  // Buscar departamentos\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n    enabled: isOpen,\n  });\n\n  // Buscar categorias com SLA\n  const { data: categories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n    enabled: isOpen,\n  });\n\n  // Usuário atual (assumindo que é o primeiro admin para demo)\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Buscar regras SLA configuradas\n  const { data: slaRules } = useQuery<any[]>({\n    queryKey: ['/api/sla/rules'],\n    enabled: isOpen,\n  });\n\n  // Calcular SLA baseado na hierarquia: Regras SLA → Categorias → Configurações de Prioridade → Fallback\n  const calculateSLA = () => {\n    let slaHours = 24; // Fallback padrão\n    let source = \"(padrão)\";\n\n    // 1. Primeiro, tentar encontrar uma regra SLA específica\n    if (slaRules && slaRules.length > 0) {\n      const matchingRule = slaRules.find(rule => {\n        const matchesDepartment = !rule.departmentId || rule.departmentId === editedTicket.responsibleDepartmentId;\n        const matchesCategory = !rule.category || rule.category === editedTicket.category;\n        const matchesPriority = !rule.priority || rule.priority === editedTicket.priority;\n        return matchesDepartment && matchesCategory && matchesPriority && rule.isActive;\n      });\n\n      if (matchingRule) {\n        slaHours = matchingRule.timeHours;\n        source = \"(regra SLA)\";\n      }\n    }\n\n    // 2. Se não encontrou regra SLA, usar SLA da categoria\n    if (source === \"(padrão)\" && editedTicket.category) {\n      const categoryConfig = categories?.find(c => c.name === editedTicket.category);\n      if (categoryConfig && categoryConfig.slaHours) {\n        slaHours = categoryConfig.slaHours;\n        source = \"(categoria)\";\n      }\n    }\n\n    // 3. Se não encontrou categoria, usar configuração de prioridade\n    if (source === \"(padrão)\") {\n      const priorityConfig = priorityConfigs?.find(p => p.value === editedTicket.priority);\n      if (priorityConfig && priorityConfig.slaHours) {\n        slaHours = priorityConfig.slaHours;\n        source = \"(prioridade)\";\n      }\n    }\n\n    const createdAt = new Date(editedTicket.createdAt);\n    const now = new Date();\n    const elapsed = now.getTime() - createdAt.getTime();\n    const slaTarget = slaHours * 60 * 60 * 1000; // Convert hours to milliseconds\n    \n    const percentage = Math.min((elapsed / slaTarget) * 100, 100);\n    const timeRemaining = slaTarget - elapsed;\n    const isViolation = timeRemaining < 0;\n\n    return { \n      percentage: Math.max(percentage, 0), \n      timeRemaining: Math.abs(timeRemaining), \n      isViolation,\n      slaHours,\n      source\n    };\n  };\n\n  const slaData = calculateSLA();\n\n  // Função para formatar tempo restante\n  const formatTimeRemaining = (ms: number, isViolation: boolean) => {\n    const hours = Math.floor(ms / (1000 * 60 * 60));\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (isViolation) {\n      return `Vencido há ${hours}h ${minutes}m`;\n    }\n    return `${hours}h ${minutes}m restantes`;\n  };\n\n  // Mutation para criar comentário\n  const createCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!currentUser) throw new Error('Usuário não encontrado');\n      \n      return apiRequest(`/api/tickets/${ticket.id}/comments`, 'POST', {\n        content,\n        userId: currentUser.id,\n        ticketId: ticket.id,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets', ticket.id, 'comments'] });\n      setNewComment('');\n      toast({\n        title: 'Comentário adicionado',\n        description: 'Seu comentário foi adicionado com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao adicionar comentário. Tente novamente.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation para salvar ticket\n  const saveTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(`/api/tickets/${ticket.id}`, 'PATCH', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      setIsEditing(false);\n      if (onUpdate) onUpdate(editedTicket);\n      toast({\n        title: 'Ticket atualizado',\n        description: 'As alterações foram salvas com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao salvar alterações. Tente novamente.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSave = () => {\n    saveTicketMutation.mutate(editedTicket);\n  };\n\n  const handleCancel = () => {\n    setEditedTicket(ticket);\n    setIsEditing(false);\n  };\n\n  const handleAddComment = () => {\n    if (!newComment.trim()) return;\n    createCommentMutation.mutate(newComment);\n  };\n\n  // Função para converter cor hex para classes de badge\n  const hexToBadgeClasses = (hex: string) => {\n    const colorMap: Record<string, string> = {\n      '#3b82f6': 'border-blue-200 text-blue-800 bg-blue-50',\n      '#f59e0b': 'border-amber-200 text-amber-800 bg-amber-50',\n      '#10b981': 'border-emerald-200 text-emerald-800 bg-emerald-50',\n      '#6b7280': 'border-gray-200 text-gray-800 bg-gray-50',\n      '#8b5cf6': 'border-violet-200 text-violet-800 bg-violet-50',\n      '#ef4444': 'border-red-200 text-red-800 bg-red-50',\n      '#dc2626': 'border-red-200 text-red-800 bg-red-50',\n      '#f87171': 'border-red-200 text-red-800 bg-red-50',\n      '#f97316': 'border-orange-200 text-orange-800 bg-orange-50',\n      '#06b6d4': 'border-cyan-200 text-cyan-800 bg-cyan-50',\n      '#84cc16': 'border-lime-200 text-lime-800 bg-lime-50',\n      '#ec4899': 'border-pink-200 text-pink-800 bg-pink-50',\n    };\n    return colorMap[hex] || 'border-gray-200 text-gray-800 bg-gray-50';\n  };\n\n  const getStatusColor = (status: string) => {\n    const config = statusConfigs?.find(s => s.value === status || s.name === status);\n    if (config?.color) {\n      return hexToBadgeClasses(config.color);\n    }\n    return 'border-gray-200 text-gray-800 bg-gray-50';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority || p.name === priority);\n    if (config?.color) {\n      return hexToBadgeClasses(config.color);\n    }\n    return 'border-gray-200 text-gray-800 bg-gray-50';\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      // Aqui você adicionaria a lógica para upload dos arquivos\n      console.log('Uploading files:', files);\n    }\n  };\n\n  // Função para adicionar nova tag\n  const handleAddTag = () => {\n    if (!newTag.trim()) return;\n    \n    const currentTags = editedTicket.tags || [];\n    \n    // Verificar se a tag já existe (não case-sensitive)\n    if (currentTags.some((tag: string) => tag.toLowerCase() === newTag.toLowerCase())) {\n      toast({\n        title: 'Tag já existe',\n        description: 'Esta tag já foi adicionada ao ticket.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    // Adicionar nova tag\n    setEditedTicket({\n      ...editedTicket,\n      tags: [...currentTags, newTag.trim()]\n    });\n    \n    setNewTag('');\n    \n    toast({\n      title: 'Tag adicionada',\n      description: `A tag \"${newTag.trim()}\" foi adicionada com sucesso.`,\n    });\n  };\n\n  // Função para remover tag\n  const handleRemoveTag = (indexToRemove: number) => {\n    const currentTags = editedTicket.tags || [];\n    const tagToRemove = currentTags[indexToRemove];\n    \n    const updatedTags = currentTags.filter((_: string, index: number) => index !== indexToRemove);\n    \n    setEditedTicket({\n      ...editedTicket,\n      tags: updatedTags\n    });\n    \n    toast({\n      title: 'Tag removida',\n      description: `A tag \"${tagToRemove}\" foi removida com sucesso.`,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <DialogTitle className=\"flex items-center space-x-3\">\n            <span className=\"text-xl font-bold\">Chamado {ticket.ticketNumber}</span>\n            <Badge variant=\"outline\" className={`${getStatusColor(editedTicket.status)}`}>\n              {statusConfigs?.find(s => s.value === editedTicket.status)?.name || editedTicket.status}\n            </Badge>\n            <Badge variant=\"outline\" className={`${getPriorityColor(editedTicket.priority)}`}>\n              {priorityConfigs?.find(p => p.value === editedTicket.priority)?.name || editedTicket.priority}\n            </Badge>\n          </DialogTitle>\n          <div className=\"flex items-center space-x-2\">\n            {isEditing ? (\n              <>\n                <Button size=\"sm\" onClick={handleSave} disabled={saveTicketMutation.isPending}>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveTicketMutation.isPending ? 'Salvando...' : 'Salvar'}\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={handleCancel}>\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancelar\n                </Button>\n              </>\n            ) : (\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setIsEditing(true)}>\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Editar\n              </Button>\n            )}\n          </div>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"details\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\n            <TabsTrigger value=\"comments\">Comentários</TabsTrigger>\n            <TabsTrigger value=\"attachments\">Anexos</TabsTrigger>\n            <TabsTrigger value=\"history\">Histórico</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"details\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Informações Principais */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Informações Principais</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Título</Label>\n                    {isEditing ? (\n                      <Input\n                        value={editedTicket.subject}\n                        onChange={(e) => setEditedTicket({...editedTicket, subject: e.target.value})}\n                        className=\"mt-1\"\n                      />\n                    ) : (\n                      <p className=\"mt-1 text-sm text-gray-900\">{editedTicket.subject}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Descrição</Label>\n                    {isEditing ? (\n                      <Textarea\n                        value={editedTicket.description || ''}\n                        onChange={(e) => setEditedTicket({...editedTicket, description: e.target.value})}\n                        className=\"mt-1\"\n                        rows={3}\n                      />\n                    ) : (\n                      <p className=\"mt-1 text-sm text-gray-700\">{editedTicket.description}</p>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Status</Label>\n                      {isEditing ? (\n                        <Select value={editedTicket.status} onValueChange={(value) => setEditedTicket({...editedTicket, status: value})}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {statusConfigs?.map(status => (\n                              <SelectItem key={status.value} value={status.value}>\n                                {status.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <p className=\"mt-1 text-sm text-gray-700\">{statusConfigs?.find(s => s.value === editedTicket.status)?.name || editedTicket.status}</p>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Prioridade</Label>\n                      {isEditing ? (\n                        <Select value={editedTicket.priority} onValueChange={(value) => setEditedTicket({...editedTicket, priority: value})}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {priorityConfigs?.map(priority => (\n                              <SelectItem key={priority.value} value={priority.value}>\n                                {priority.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <p className=\"mt-1 text-sm text-gray-700\">{priorityConfigs?.find(p => p.value === editedTicket.priority)?.name || editedTicket.priority}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Departamento Solicitante</Label>\n                      {isEditing ? (\n                        <Select value={editedTicket.requesterDepartmentId || \"\"} onValueChange={(value) => setEditedTicket({...editedTicket, requesterDepartmentId: value})}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Selecione um departamento\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {departments?.map(dept => (\n                              <SelectItem key={dept.id} value={dept.id}>\n                                {dept.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <p className=\"mt-1 text-sm text-gray-700\">\n                          {departments?.find(d => d.id === editedTicket.requesterDepartmentId)?.name || 'Não informado'}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Departamento Responsável</Label>\n                      {isEditing ? (\n                        <Select value={editedTicket.responsibleDepartmentId || \"\"} onValueChange={(value) => setEditedTicket({...editedTicket, responsibleDepartmentId: value})}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Selecione um departamento\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {departments?.map(dept => (\n                              <SelectItem key={dept.id} value={dept.id}>\n                                {dept.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <p className=\"mt-1 text-sm text-gray-700\">\n                          {departments?.find(d => d.id === editedTicket.responsibleDepartmentId)?.name || 'Não informado'}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">SLA</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Progresso SLA</span>\n                        <span className={slaData.isViolation ? 'text-red-600 font-semibold' : slaData.percentage > 80 ? 'text-yellow-600 font-semibold' : 'text-green-600'}>\n                          {Math.round(slaData.percentage)}%\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full transition-all ${\n                            slaData.isViolation \n                              ? 'bg-red-500 dark:bg-red-600' \n                              : slaData.percentage > 80 \n                                ? 'bg-yellow-500 dark:bg-yellow-600'\n                                : 'bg-green-500 dark:bg-green-600'\n                          }`}\n                          style={{ width: `${Math.min(slaData.percentage, 100)}%` }}\n                        />\n                      </div>\n                      <div className=\"flex justify-between text-xs\">\n                        <span className=\"text-gray-500\">\n                          SLA: {slaData.slaHours}h {slaData.source}\n                        </span>\n                        <span className={slaData.isViolation ? 'text-red-600 font-medium' : 'text-gray-500'}>\n                          {formatTimeRemaining(slaData.timeRemaining, slaData.isViolation)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Atribuições */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Atribuições</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Responsável</Label>\n                    <div className=\"mt-2 flex items-center space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                          {editedTicket.assignedToUser?.name?.charAt(0) || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"text-sm font-medium\">{editedTicket.assignedToUser?.name || 'Não atribuído'}</p>\n                        <p className=\"text-xs text-gray-500\">{editedTicket.department?.name || 'Sem departamento'}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Solicitante</Label>\n                    <p className=\"mt-1 text-sm text-gray-700\">{editedTicket.createdByUser?.name || 'Desconhecido'}</p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Data de Criação</Label>\n                    <div className=\"mt-1 flex items-center space-x-2\">\n                      <Calendar className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-sm text-gray-700\">{new Date(editedTicket.createdAt).toLocaleDateString('pt-BR')}</span>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Tags</Label>\n                    {isEditing ? (\n                      <div className=\"mt-2 space-y-2\">\n                        {/* Tags existentes - editáveis */}\n                        <div className=\"flex flex-wrap gap-1\">\n                          {editedTicket.tags?.map((tag: string, index: number) => (\n                            <Badge \n                              key={index} \n                              variant=\"secondary\" \n                              className=\"text-xs flex items-center gap-1 pr-1\"\n                            >\n                              {tag}\n                              <X \n                                className=\"w-3 h-3 cursor-pointer hover:text-red-600\" \n                                onClick={() => handleRemoveTag(index)}\n                              />\n                            </Badge>\n                          ))}\n                        </div>\n                        \n                        {/* Campo para nova tag */}\n                        <div className=\"flex gap-2\">\n                          <Input\n                            placeholder=\"Nova tag\"\n                            value={newTag}\n                            onChange={(e) => setNewTag(e.target.value)}\n                            className=\"text-xs h-8\"\n                            onKeyPress={(e) => {\n                              if (e.key === 'Enter') {\n                                e.preventDefault();\n                                handleAddTag();\n                              }\n                            }}\n                          />\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={handleAddTag}\n                            className=\"h-8 text-xs\"\n                          >\n                            Adicionar\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"mt-2 flex flex-wrap gap-1\">\n                        {editedTicket.tags?.length > 0 ? (\n                          editedTicket.tags.map((tag: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))\n                        ) : (\n                          <p className=\"text-xs text-gray-500\">Nenhuma tag adicionada</p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"comments\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <MessageCircle className=\"w-5 h-5\" />\n                  <span>Comentários ({comments?.length || 0})</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Lista de comentários */}\n                <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                  {commentsLoading ? (\n                    <p className=\"text-center text-gray-500\">Carregando comentários...</p>\n                  ) : comments?.length === 0 ? (\n                    <p className=\"text-center text-gray-500\">Nenhum comentário ainda</p>\n                  ) : (\n                    comments?.map((comment: any) => (\n                      <div key={comment.id} className=\"border-l-2 border-blue-200 pl-4 py-2\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Avatar className=\"w-6 h-6\">\n                            <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                              {comment.user?.name?.charAt(0) || 'U'}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-sm font-medium\">{comment.user?.name}</span>\n                          <span className=\"text-xs text-gray-500\">\n                            {format(new Date(comment.createdAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-700\">{comment.content}</p>\n                      </div>\n                    ))\n                  )}\n                </div>\n\n                {/* Adicionar novo comentário */}\n                <div className=\"border-t pt-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                        {currentUser?.name?.charAt(0) || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 space-y-2\">\n                      <Textarea\n                        placeholder=\"Adicione um comentário...\"\n                        value={newComment}\n                        onChange={(e) => setNewComment(e.target.value)}\n                        className=\"min-h-[80px]\"\n                      />\n                      <div className=\"flex justify-end\">\n                        <Button \n                          size=\"sm\" \n                          onClick={handleAddComment}\n                          disabled={!newComment.trim() || createCommentMutation.isPending}\n                        >\n                          <Send className=\"w-4 h-4 mr-2\" />\n                          {createCommentMutation.isPending ? 'Enviando...' : 'Comentar'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"attachments\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Paperclip className=\"w-5 h-5\" />\n                  <span>Anexos (0)</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8\">\n                  <div className=\"text-center\">\n                    <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-sm text-gray-500 mb-2\">Arraste arquivos aqui ou clique para selecionar</p>\n                    <input\n                      type=\"file\"\n                      multiple\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 cursor-pointer\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Selecionar Arquivos\n                    </label>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  <span>Histórico</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Ticket criado</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {format(new Date(editedTicket.createdAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {editedTicket.updatedAt && editedTicket.updatedAt !== editedTicket.createdAt && (\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">Ticket atualizado</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {format(new Date(editedTicket.updatedAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":31519},"client/src/pages/SLAConfiguration.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Plus, Edit2, Trash2, Target, Settings } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface SLARule {\n  id: string;\n  name: string;\n  departmentId?: string;\n  departmentName?: string;\n  category?: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  timeHours: number;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport default function SLAConfiguration() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingSLA, setEditingSLA] = useState<SLARule | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    departmentId: '',\n    category: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical',\n    timeHours: 24,\n    isActive: true\n  });\n\n  const [slaType, setSlaType] = useState<'category' | 'department' | 'priority'>('category');\n\n  // Buscar departamentos\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n  });\n\n  // Buscar categorias\n  const { data: categories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Buscar regras SLA do banco de dados\n  const { data: slaRules, isLoading } = useQuery<any[]>({\n    queryKey: ['/api/sla/rules'],\n  });\n\n  // Mutation para criar/atualizar SLA\n  const saveSLAMutation = useMutation({\n    mutationFn: async (data: Partial<SLARule>) => {\n      const method = editingSLA ? 'PUT' : 'POST';\n      const url = editingSLA ? `/api/sla/rules/${editingSLA.id}` : '/api/sla/rules';\n      return apiRequest(url, method, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sla/rules'] });\n      resetForm();\n      toast({\n        title: 'SLA salvo',\n        description: 'Regra SLA foi salva com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao salvar regra SLA.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation para deletar SLA\n  const deleteSLAMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/sla/rules/${id}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sla/rules'] });\n      toast({\n        title: 'SLA removido',\n        description: 'Regra SLA foi removida com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao remover regra SLA.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      departmentId: '',\n      category: '',\n      priority: 'medium',\n      timeHours: 24,\n      isActive: true\n    });\n    setSlaType('category');\n    setEditingSLA(null);\n    setIsCreateModalOpen(false);\n  };\n\n  const handleEdit = (sla: SLARule) => {\n    setEditingSLA(sla);\n    setFormData({\n      name: sla.name,\n      departmentId: sla.departmentId || '',\n      category: sla.category || '',\n      priority: sla.priority,\n      timeHours: sla.timeHours || 24,\n      isActive: sla.isActive\n    });\n    \n    // Determinar o tipo baseado nos campos preenchidos\n    if (sla.departmentId && !sla.category) {\n      setSlaType('department');\n    } else if (sla.category && !sla.departmentId) {\n      setSlaType('category');\n    } else {\n      setSlaType('priority');\n    }\n    \n    setIsCreateModalOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validação baseada no tipo de SLA\n    if (slaType === 'category' && !formData.category) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"Categoria é obrigatória para SLA por categoria\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (slaType === 'department' && !formData.departmentId) {\n      toast({\n        title: \"Erro de validação\", \n        description: \"Departamento é obrigatório para SLA por departamento\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (slaType === 'priority' && !formData.priority) {\n      toast({\n        title: \"Erro de validação\", \n        description: \"Prioridade é obrigatória para SLA por prioridade\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Preparar dados baseado no tipo de SLA\n    const submitData = {\n      name: formData.name,\n      timeHours: formData.timeHours,\n      isActive: formData.isActive,\n      departmentId: slaType === 'department' ? formData.departmentId : null,\n      category: slaType === 'category' ? formData.category : null,\n      priority: slaType === 'priority' ? formData.priority : null\n    };\n    \n    saveSLAMutation.mutate(submitData);\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const colors = {\n      low: 'bg-green-100 text-green-800',\n      medium: 'bg-yellow-100 text-yellow-800',\n      high: 'bg-orange-100 text-orange-800',\n      critical: 'bg-red-100 text-red-800',\n    };\n\n    const labels = {\n      low: 'Baixa',\n      medium: 'Média',\n      high: 'Alta',\n      critical: 'Crítica',\n    };\n\n    return (\n      <Badge className={colors[priority as keyof typeof colors]}>\n        {labels[priority as keyof typeof labels]}\n      </Badge>\n    );\n  };\n\n  const formatTime = (hours: number) => {\n    if (hours < 1) return `${hours * 60}min`;\n    if (hours < 24) return `${hours}h`;\n    return `${Math.floor(hours / 24)}d ${hours % 24}h`;\n  };\n\n  const getSLAType = (sla: SLARule) => {\n    if (sla.departmentId && !sla.category) return 'Por Departamento';\n    if (sla.category && !sla.departmentId) return 'Por Categoria';\n    if (!sla.departmentId && !sla.category) return 'Por Prioridade';\n    return 'Indefinido';\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Configuração de SLAs</h1>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Configure os acordos de nível de serviço por departamento, categoria e prioridade\n          </p>\n        </div>\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nova Regra SLA\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingSLA ? 'Editar Regra SLA' : 'Nova Regra SLA'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome da Regra</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"Ex: SLA TI - Alta Prioridade\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"slaType\">Tipo de SLA</Label>\n                <Select\n                  value={slaType}\n                  onValueChange={(value: 'category' | 'department' | 'priority') => setSlaType(value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"category\">Por Categoria</SelectItem>\n                    <SelectItem value=\"department\">Por Departamento</SelectItem>\n                    <SelectItem value=\"priority\">Por Prioridade</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {slaType === 'department' && (\n                <div>\n                  <Label htmlFor=\"departmentId\">Departamento *</Label>\n                  <Select\n                    value={formData.departmentId}\n                    onValueChange={(value) => setFormData({...formData, departmentId: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar departamento\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments?.map((dept) => (\n                        <SelectItem key={dept.id} value={dept.id}>\n                          {dept.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {slaType === 'category' && (\n                <div>\n                  <Label htmlFor=\"category\">Categoria *</Label>\n                  <Select\n                    value={formData.category}\n                    onValueChange={(value) => setFormData({...formData, category: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar categoria\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories?.map((cat) => (\n                        <SelectItem key={cat.id} value={cat.name}>\n                          {cat.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {slaType === 'priority' && (\n                <div>\n                  <Label htmlFor=\"priority\">Prioridade *</Label>\n                  <Select\n                    value={formData.priority}\n                    onValueChange={(value: any) => setFormData({...formData, priority: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar prioridade\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Baixa</SelectItem>\n                      <SelectItem value=\"medium\">Média</SelectItem>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                      <SelectItem value=\"critical\">Crítica</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"timeHours\">Tempo SLA (horas)</Label>\n                <Input\n                  id=\"timeHours\"\n                  type=\"number\"\n                  step=\"0.5\"\n                  min=\"1\"\n                  value={formData.timeHours}\n                  onChange={(e) => setFormData({...formData, timeHours: parseFloat(e.target.value)})}\n                  required\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={saveSLAMutation.isPending}>\n                  {saveSLAMutation.isPending ? 'Salvando...' : editingSLA ? 'Atualizar' : 'Criar'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5\" />\n              <span>Regras SLA Configuradas</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"mt-2 text-sm text-gray-500\">Carregando regras SLA...</p>\n              </div>\n            ) : slaRules && slaRules.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>Tipo</TableHead>\n                    <TableHead>Critério</TableHead>\n                    <TableHead>Tempo SLA</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"w-[100px]\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {slaRules.map((sla) => (\n                    <TableRow key={sla.id}>\n                      <TableCell className=\"font-medium\">{sla.name}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{getSLAType(sla)}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        {sla.departmentId && sla.departmentName && sla.departmentName}\n                        {sla.category && sla.category}\n                        {!sla.departmentId && !sla.category && getPriorityBadge(sla.priority)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-1\">\n                          <Target className=\"w-4 h-4 text-green-500\" />\n                          <span>{formatTime(sla.timeHours)}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={sla.isActive ? 'default' : 'secondary'}>\n                          {sla.isActive ? 'Ativo' : 'Inativo'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"w-8 h-8\"\n                            onClick={() => handleEdit(sla)}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"w-8 h-8 text-red-600 hover:text-red-700\"\n                            onClick={() => deleteSLAMutation.mutate(sla.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Settings className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <p className=\"mt-2 text-sm text-gray-500\">\n                  Nenhuma regra SLA configurada\n                </p>\n                <Button\n                  className=\"mt-4\"\n                  onClick={() => setIsCreateModalOpen(true)}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Criar primeira regra\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16009},"client/src/components/CreateTicketModalNew.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Paperclip, X, Upload } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CreateTicketModalNewProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface DynamicField {\n  id: string;\n  label: string;\n  type: 'text' | 'email' | 'select' | 'textarea' | 'number' | 'tel';\n  placeholder?: string;\n  required?: boolean;\n  options?: string[];\n}\n\n// Configurações de campos dinâmicos por categoria\nconst DYNAMIC_FIELDS_CONFIG: Record<string, DynamicField[]> = {\n  'Suporte Técnico': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true, \n      options: ['Instalação de Software', 'Problemas de Hardware', 'Problemas de Rede', 'Outros'] },\n    { id: 'equipamento', label: 'Equipamento/Sistema', type: 'text', placeholder: 'Ex: Notebook Dell, Sistema XYZ', required: true },\n    { id: 'urgencia_negocio', label: 'Urgência do Negócio', type: 'select', required: true,\n      options: ['Baixa', 'Média', 'Alta', 'Crítica'] }\n  ],\n  'Recursos Humanos': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Férias', 'Licença', 'Benefícios', 'Folha de Pagamento', 'Outros'] },\n    { id: 'cpf_solicitante', label: 'Qual CPF do solicitante?', type: 'text', placeholder: '000.000.000-00', required: true },\n    { id: 'email_solicitante', label: 'Qual e-mail?', type: 'email', placeholder: '(Email) Pressione Enter ou Tab', required: true },\n    { id: 'celular_solicitante', label: 'Número do Celular do solicitante', type: 'tel', required: true },\n    { id: 'centro_custo', label: 'Qual Centro de Custo do solicitante?', type: 'text', required: true },\n    { id: 'superior_direto', label: 'Superior Direto', type: 'text', required: true }\n  ],\n  'Financeiro': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Contas a Pagar', 'Contas a Receber', 'Reembolso', 'Orçamento', 'Outros'] },\n    { id: 'valor_envolvido', label: 'Valor Envolvido', type: 'number', placeholder: 'R$ 0,00', required: true },\n    { id: 'centro_custo', label: 'Centro de Custo', type: 'text', required: true },\n    { id: 'aprovador', label: 'Aprovador Responsável', type: 'text', required: true }\n  ],\n  'Jurídico': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Contrato', 'Assessoria Legal', 'Compliance', 'Outros'] },\n    { id: 'prazo_resposta', label: 'Prazo para Resposta', type: 'select', required: true,\n      options: ['24 horas', '48 horas', '1 semana', '2 semanas', 'Não urgente'] },\n    { id: 'area_direito', label: 'Área do Direito', type: 'select', required: true,\n      options: ['Trabalhista', 'Tributário', 'Civil', 'Empresarial', 'Outros'] }\n  ],\n  'Marketing': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Campanha', 'Material Gráfico', 'Evento', 'Mídias Sociais', 'Outros'] },\n    { id: 'prazo_entrega', label: 'Prazo de Entrega', type: 'text', placeholder: 'Ex: 15 dias', required: true },\n    { id: 'publico_alvo', label: 'Público Alvo', type: 'text', required: true },\n    { id: 'orcamento_estimado', label: 'Orçamento Estimado', type: 'number', placeholder: 'R$ 0,00' }\n  ]\n};\n\nexport default function CreateTicketModalNew({ isOpen, onClose }: CreateTicketModalNewProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Estados do formulário\n  const [formData, setFormData] = useState({\n    subject: '',\n    description: '',\n    requesterDepartment: '',\n    primaryCategory: '',\n    secondaryCategory: '',\n    requesterName: '',\n    requesterEmail: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical',\n    dynamicFields: {} as Record<string, string>\n  });\n  \n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [subcategories, setSubcategories] = useState<string[]>([]);\n\n  // Buscar dados necessários\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n    enabled: isOpen,\n  });\n\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n    enabled: isOpen,\n  });\n\n  const { data: categories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n    enabled: isOpen,\n  });\n\n  // Usuário atual\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Atualizar subcategorias quando categoria primária muda\n  useEffect(() => {\n    if (formData.primaryCategory) {\n      // Simular subcategorias baseadas na categoria primária\n      const mockSubcategories: Record<string, string[]> = {\n        'Tecnologia': ['Suporte Técnico', 'Desenvolvimento', 'Infraestrutura'],\n        'Custos': ['Cartão Clara', 'Reembolso Protheus'],\n        'Departamento Pessoal': ['Folha de Pagamento', 'Benefícios', 'Admissão/Demissão'],\n        'Jurídico': ['Contratos', 'Assessoria Legal', 'Compliance'],\n        'Marketing': ['Campanhas', 'Material Gráfico', 'Eventos'],\n        'Qualidade': ['Auditoria', 'Processos', 'Melhorias']\n      };\n      \n      setSubcategories(mockSubcategories[formData.primaryCategory] || []);\n      setFormData(prev => ({ \n        ...prev, \n        secondaryCategory: '',\n        dynamicFields: {} // Reset dynamic fields when category changes\n      }));\n    }\n  }, [formData.primaryCategory]);\n\n  // Obter campos dinâmicos baseados na categoria secundária\n  const getDynamicFields = (): DynamicField[] => {\n    if (!formData.secondaryCategory) return [];\n    return DYNAMIC_FIELDS_CONFIG[formData.secondaryCategory] || [];\n  };\n\n  // Mutation para criar ticket\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!currentUser) {\n        throw new Error('Usuário não encontrado');\n      }\n\n      const ticketData = {\n        subject: data.subject,\n        description: data.description,\n        priority: data.priority,\n        category: data.secondaryCategory,\n        responsibleDepartmentId: departments?.find(d => d.name === data.primaryCategory)?.id || null,\n        requesterDepartmentId: currentUser.departmentId || null,\n        createdBy: currentUser.id,\n        assignedTo: null,\n        customFields: {\n          requesterName: data.requesterName,\n          requesterEmail: data.requesterEmail,\n          ...data.dynamicFields\n        }\n      };\n\n      return apiRequest('/api/tickets', 'POST', ticketData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Sucesso',\n        description: 'Ticket criado com sucesso',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n      handleReset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro',\n        description: error.message || 'Erro ao criar ticket',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleReset = () => {\n    setFormData({\n      subject: '',\n      description: '',\n      requesterDepartment: '',\n      primaryCategory: '',\n      secondaryCategory: '',\n      requesterName: '',\n      requesterEmail: '',\n      priority: 'medium',\n      dynamicFields: {}\n    });\n    setSelectedFiles([]);\n    setSubcategories([]);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validações básicas\n    if (!formData.subject.trim()) {\n      toast({ title: 'Erro', description: 'Assunto é obrigatório', variant: 'destructive' });\n      return;\n    }\n    \n    if (!formData.description.trim()) {\n      toast({ title: 'Erro', description: 'Descrição é obrigatória', variant: 'destructive' });\n      return;\n    }\n    \n    if (!formData.primaryCategory) {\n      toast({ title: 'Erro', description: 'Categoria Primária é obrigatória', variant: 'destructive' });\n      return;\n    }\n    \n    if (!formData.secondaryCategory) {\n      toast({ title: 'Erro', description: 'Categoria Secundária é obrigatória', variant: 'destructive' });\n      return;\n    }\n\n    // Validar campos dinâmicos obrigatórios\n    const dynamicFields = getDynamicFields();\n    for (const field of dynamicFields) {\n      if (field.required && !formData.dynamicFields[field.id]) {\n        toast({ \n          title: 'Erro', \n          description: `${field.label} é obrigatório`, \n          variant: 'destructive' \n        });\n        return;\n      }\n    }\n\n    createTicketMutation.mutate(formData);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleDynamicFieldChange = (fieldId: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      dynamicFields: {\n        ...prev.dynamicFields,\n        [fieldId]: value\n      }\n    }));\n  };\n\n  const primaryCategories = ['Custos', 'Departamento Pessoal', 'Jurídico', 'Marketing', 'Qualidade', 'Tecnologia'];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Novo Ticket\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Assunto */}\n          <div>\n            <Label htmlFor=\"subject\" className=\"text-sm font-medium\">\n              Assunto <span className=\"text-red-500\">*</span>\n            </Label>\n            <Input\n              id=\"subject\"\n              value={formData.subject}\n              onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n              className=\"mt-1\"\n              required\n            />\n          </div>\n\n          {/* Descrição */}\n          <div>\n            <Label htmlFor=\"description\" className=\"text-sm font-medium\">\n              Descrição <span className=\"text-red-500\">*</span>\n            </Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"mt-1 min-h-[100px]\"\n              required\n            />\n          </div>\n\n          {/* Setor do Solicitante */}\n          <div>\n            <Label htmlFor=\"requesterDepartment\" className=\"text-sm font-medium\">\n              Setor do Solicitante <span className=\"text-red-500\">*</span>\n            </Label>\n            <Select\n              value={formData.requesterDepartment}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, requesterDepartment: value }))}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments?.map((dept) => (\n                  <SelectItem key={dept.id} value={dept.name}>\n                    {dept.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Categoria Primária */}\n          <div>\n            <Label htmlFor=\"primaryCategory\" className=\"text-sm font-medium\">\n              Categoria Primária <span className=\"text-red-500\">*</span>\n            </Label>\n            <Select\n              value={formData.primaryCategory}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, primaryCategory: value }))}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione...\" />\n              </SelectTrigger>\n              <SelectContent>\n                <div className=\"p-2\">\n                  <Input placeholder=\"Pesquisar\" className=\"mb-2\" />\n                </div>\n                {primaryCategories.map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Categoria Secundária */}\n          <div>\n            <Label htmlFor=\"secondaryCategory\" className=\"text-sm font-medium\">\n              Categoria Secundária <span className=\"text-red-500\">*</span>\n              <span className=\"text-red-600 text-xs ml-2\">\n                (Para abertura do ticket, é obrigatório a seleção do último nível das categorias que estão sinalizadas na cor verde)\n              </span>\n            </Label>\n            <Select\n              value={formData.secondaryCategory}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, secondaryCategory: value }))}\n              disabled={!formData.primaryCategory}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder={\n                  formData.primaryCategory ? \"Selecione...\" : \"Selecione uma categoria primária antes\"\n                } />\n              </SelectTrigger>\n              <SelectContent>\n                <div className=\"p-2\">\n                  <Input placeholder=\"Pesquisar\" className=\"mb-2\" />\n                </div>\n                {subcategories.map((subcat) => (\n                  <SelectItem key={subcat} value={subcat}>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n                      {subcat}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Nome do Solicitante */}\n          <div>\n            <Label htmlFor=\"requesterName\" className=\"text-sm font-medium\">\n              Nome do Solicitante (Completo) <span className=\"text-red-500\">*</span>\n            </Label>\n            <Input\n              id=\"requesterName\"\n              value={formData.requesterName}\n              onChange={(e) => setFormData(prev => ({ ...prev, requesterName: e.target.value }))}\n              className=\"mt-1\"\n              placeholder=\"Felipe\"\n              required\n            />\n          </div>\n\n          {/* Contato Email */}\n          <div>\n            <Label htmlFor=\"requesterEmail\" className=\"text-sm font-medium\">\n              Contato Email <span className=\"text-red-500\">*</span>\n              <span className=\"text-red-600 text-xs ml-2\">\n                (Após digitar o e-mail, pressione Enter ou Tab)\n              </span>\n            </Label>\n            <div className=\"mt-1 flex items-center space-x-2\">\n              <Badge variant=\"secondary\" className=\"bg-blue-900 text-white text-xs px-2 py-1\">\n                FELIPE.LACERDA@GRUPOOPUS.COM\n              </Badge>\n              <Input\n                id=\"requesterEmail\"\n                type=\"email\"\n                value={formData.requesterEmail}\n                onChange={(e) => setFormData(prev => ({ ...prev, requesterEmail: e.target.value }))}\n                placeholder=\"(Email) Pressione Enter ou Tab\"\n                className=\"flex-1\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Campos Dinâmicos */}\n          {getDynamicFields().map((field) => (\n            <div key={field.id}>\n              <Label htmlFor={field.id} className=\"text-sm font-medium\">\n                {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n              </Label>\n              {field.type === 'select' ? (\n                <Select\n                  value={formData.dynamicFields[field.id] || ''}\n                  onValueChange={(value) => handleDynamicFieldChange(field.id, value)}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Selecione uma opção\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {field.options?.map((option) => (\n                      <SelectItem key={option} value={option}>\n                        {option}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              ) : field.type === 'textarea' ? (\n                <Textarea\n                  id={field.id}\n                  value={formData.dynamicFields[field.id] || ''}\n                  onChange={(e) => handleDynamicFieldChange(field.id, e.target.value)}\n                  placeholder={field.placeholder}\n                  className=\"mt-1\"\n                  required={field.required}\n                />\n              ) : (\n                <Input\n                  id={field.id}\n                  type={field.type}\n                  value={formData.dynamicFields[field.id] || ''}\n                  onChange={(e) => handleDynamicFieldChange(field.id, e.target.value)}\n                  placeholder={field.placeholder}\n                  className=\"mt-1\"\n                  required={field.required}\n                />\n              )}\n            </div>\n          ))}\n\n          {/* Prioridade */}\n          <div>\n            <Label htmlFor=\"priority\" className=\"text-sm font-medium\">Prioridade</Label>\n            <Select\n              value={formData.priority}\n              onValueChange={(value: any) => setFormData(prev => ({ ...prev, priority: value }))}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione uma opção\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Baixa</SelectItem>\n                <SelectItem value=\"medium\">Média</SelectItem>\n                <SelectItem value=\"high\">Alta</SelectItem>\n                <SelectItem value=\"critical\">Crítica</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Anexos */}\n          <div>\n            <Label className=\"text-sm font-medium\">\n              Anexo <Badge variant=\"outline\" className=\"ml-2\">i</Badge>\n            </Label>\n            <div className=\"mt-2 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n              <input\n                type=\"file\"\n                multiple\n                onChange={handleFileSelect}\n                className=\"hidden\"\n                id=\"file-upload\"\n              />\n              <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                <Upload className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                <p className=\"text-sm text-gray-600\">Clique aqui para carregar seu arquivo.</p>\n              </label>\n            </div>\n            \n            {/* Lista de arquivos selecionados */}\n            {selectedFiles.length > 0 && (\n              <div className=\"mt-2 space-y-2\">\n                {selectedFiles.map((file, index) => (\n                  <div key={index} className=\"flex items-center justify-between bg-gray-50 p-2 rounded\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Paperclip className=\"h-4 w-4 text-gray-500\" />\n                      <span className=\"text-sm\">{file.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({(file.size / 1024 / 1024).toFixed(1)} MB)\n                      </span>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(index)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Botões */}\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={createTicketMutation.isPending}>\n              {createTicketMutation.isPending ? 'Criando...' : 'Criar Ticket'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":21052},"client/src/components/TicketFinalizationModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\n\ninterface TicketFinalizationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (finalizationData: FinalizationData) => void;\n  ticket: {\n    id: string;\n    subject: string;\n    createdAt?: string;\n  };\n}\n\ninterface FinalizationData {\n  comment: string;\n  hoursSpent: string;\n  equipmentRemoved: string;\n  materialsUsed: string;\n  extraCharge: boolean;\n  chargeType: string;\n}\n\nexport default function TicketFinalizationModal({ \n  isOpen, \n  onClose, \n  onConfirm, \n  ticket \n}: TicketFinalizationModalProps) {\n  const [formData, setFormData] = useState<FinalizationData>({\n    comment: '',\n    hoursSpent: '04:30',\n    equipmentRemoved: '',\n    materialsUsed: '',\n    extraCharge: false,\n    chargeType: 'Selecione'\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      await onConfirm(formData);\n      onClose();\n    } catch (error) {\n      console.error('Erro ao finalizar ticket:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const updateFormField = (field: keyof FinalizationData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-5\">\n      <div \n        className=\"bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-hidden shadow-2xl\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-red-50 to-pink-50\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-bold text-red-600 mb-1\">\n                Finalizar Ticket {ticket.id}\n              </h2>\n              <p className=\"text-sm text-gray-600\">{ticket.subject}</p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <svg className=\"w-5 h-5 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <form onSubmit={handleSubmit} className=\"overflow-y-auto max-h-[calc(90vh-140px)]\">\n          <div className=\"p-6 space-y-6\">\n            \n            {/* Comentário */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Comentário de Finalização *\n              </label>\n              <textarea\n                value={formData.comment}\n                onChange={(e) => updateFormField('comment', e.target.value)}\n                placeholder=\"Descreva como o problema foi resolvido...\"\n                required\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[100px] focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Horas - Travado */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Apontamento de Horas (Calculado automaticamente)\n              </label>\n              <div className=\"flex items-center p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n                <svg className=\"w-5 h-5 text-gray-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <input\n                  type=\"text\"\n                  value={formData.hoursSpent}\n                  readOnly\n                  className=\"bg-transparent border-none text-gray-600 font-semibold cursor-not-allowed flex-1\"\n                />\n              </div>\n            </div>\n\n            {/* Equipamentos */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Equipamentos Retirados\n              </label>\n              <textarea\n                value={formData.equipmentRemoved}\n                onChange={(e) => updateFormField('equipmentRemoved', e.target.value)}\n                placeholder=\"Liste os equipamentos retirados, se houver...\"\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[80px] focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Materiais */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Materiais Utilizados\n              </label>\n              <textarea\n                value={formData.materialsUsed}\n                onChange={(e) => updateFormField('materialsUsed', e.target.value)}\n                placeholder=\"Liste os materiais utilizados...\"\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[80px] focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Cobrança Avulsa */}\n            <div>\n              <label className=\"flex items-center text-sm font-medium text-gray-700 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.extraCharge}\n                  onChange={(e) => updateFormField('extraCharge', e.target.checked)}\n                  className=\"mr-3 w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500\"\n                />\n                Cobrança Avulsa\n              </label>\n              \n              {formData.extraCharge && (\n                <div className=\"mt-3\">\n                  <select\n                    value={formData.chargeType}\n                    onChange={(e) => updateFormField('chargeType', e.target.value)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"Selecione\">Selecione o tipo de cobrança</option>\n                    <option value=\"Serviço Extra\">Serviço Extra</option>\n                    <option value=\"Hora Extra\">Hora Extra</option>\n                    <option value=\"Material Adicional\">Material Adicional</option>\n                    <option value=\"Deslocamento\">Deslocamento</option>\n                  </select>\n                </div>\n              )}\n            </div>\n\n          </div>\n\n          {/* Footer */}\n          <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors\"\n            >\n              Cancelar\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || !formData.comment.trim()}\n              className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n                isSubmitting || !formData.comment.trim()\n                  ? 'bg-gray-400 text-white cursor-not-allowed'\n                  : 'bg-red-600 text-white hover:bg-red-700'\n              }`}\n            >\n              {isSubmitting ? 'Finalizando...' : 'Finalizar Ticket'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":7766},"client/src/pages/ConfigurationPage.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Trash2, Edit, Plus, Save, X, Settings, Palette, Clock } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface StatusConfig {\n  id: string;\n  name: string;\n  value: string;\n  color: string;\n  order: number;\n  isActive: boolean;\n  isDefault: boolean;\n}\n\ninterface PriorityConfig {\n  id: string;\n  name: string;\n  value: string;\n  color: string;\n  slaHours: number;\n  order: number;\n  isActive: boolean;\n  isDefault: boolean;\n}\n\nexport default function ConfigurationPage() {\n  const [statusEditModal, setStatusEditModal] = useState<{ isOpen: boolean; status: StatusConfig | null }>({\n    isOpen: false,\n    status: null\n  });\n  const [priorityEditModal, setPriorityEditModal] = useState<{ isOpen: boolean; priority: PriorityConfig | null }>({\n    isOpen: false,\n    priority: null\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar configurações\n  const { data: statusConfigs = [], isLoading: statusLoading } = useQuery<StatusConfig[]>({\n    queryKey: ['/api/config/status'],\n  });\n\n  const { data: priorityConfigs = [], isLoading: priorityLoading } = useQuery<PriorityConfig[]>({\n    queryKey: ['/api/config/priority'],\n  });\n\n  // Mutations para status\n  const updateStatusMutation = useMutation({\n    mutationFn: async (status: StatusConfig) => {\n      const response = await fetch(`/api/config/status/${status.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(status),\n      });\n      if (!response.ok) throw new Error('Failed to update status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/status'] });\n      setStatusEditModal({ isOpen: false, status: null });\n      toast({\n        title: 'Status atualizado',\n        description: 'Configuração de status salva com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao atualizar status.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createStatusMutation = useMutation({\n    mutationFn: async (status: Omit<StatusConfig, 'id'>) => {\n      const response = await fetch('/api/config/status', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(status),\n      });\n      if (!response.ok) throw new Error('Failed to create status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/status'] });\n      setStatusEditModal({ isOpen: false, status: null });\n      toast({\n        title: 'Status criado',\n        description: 'Novo status criado com sucesso.',\n      });\n    },\n  });\n\n  const deleteStatusMutation = useMutation({\n    mutationFn: async (statusId: string) => {\n      const response = await fetch(`/api/config/status/${statusId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/status'] });\n      toast({\n        title: 'Status removido',\n        description: 'Status removido com sucesso.',\n      });\n    },\n  });\n\n  // Mutations para prioridades\n  const updatePriorityMutation = useMutation({\n    mutationFn: async (priority: PriorityConfig) => {\n      const response = await fetch(`/api/config/priority/${priority.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(priority),\n      });\n      if (!response.ok) throw new Error('Failed to update priority');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/priority'] });\n      setPriorityEditModal({ isOpen: false, priority: null });\n      toast({\n        title: 'Prioridade atualizada',\n        description: 'Configuração de prioridade salva com sucesso.',\n      });\n    },\n  });\n\n  const createPriorityMutation = useMutation({\n    mutationFn: async (priority: Omit<PriorityConfig, 'id'>) => {\n      const response = await fetch('/api/config/priority', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(priority),\n      });\n      if (!response.ok) throw new Error('Failed to create priority');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/priority'] });\n      setPriorityEditModal({ isOpen: false, priority: null });\n      toast({\n        title: 'Prioridade criada',\n        description: 'Nova prioridade criada com sucesso.',\n      });\n    },\n  });\n\n  const deletePriorityMutation = useMutation({\n    mutationFn: async (priorityId: string) => {\n      const response = await fetch(`/api/config/priority/${priorityId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete priority');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/priority'] });\n      toast({\n        title: 'Prioridade removida',\n        description: 'Prioridade removida com sucesso.',\n      });\n    },\n  });\n\n  const getColorPreview = (color: string) => (\n    <div\n      className=\"w-6 h-6 rounded-full border border-gray-300\"\n      style={{ backgroundColor: color }}\n    />\n  );\n\n  const colorOptions = [\n    { value: '#dc2626', label: 'Vermelho', preview: '#dc2626' },\n    { value: '#f59e0b', label: 'Laranja', preview: '#f59e0b' },\n    { value: '#eab308', label: 'Amarelo', preview: '#eab308' },\n    { value: '#10b981', label: 'Verde', preview: '#10b981' },\n    { value: '#3b82f6', label: 'Azul', preview: '#3b82f6' },\n    { value: '#8b5cf6', label: 'Roxo', preview: '#8b5cf6' },\n    { value: '#6b7280', label: 'Cinza', preview: '#6b7280' },\n  ];\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Settings className=\"w-6 h-6\" />\n          Configurações do Sistema\n        </h1>\n        <p className=\"text-gray-600 mt-2\">\n          Gerencie status, prioridades e outras configurações do sistema de tickets.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"status\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"status\">Status de Tickets</TabsTrigger>\n          <TabsTrigger value=\"priority\">Prioridades</TabsTrigger>\n        </TabsList>\n\n        {/* Status Configuration */}\n        <TabsContent value=\"status\" className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Palette className=\"w-5 h-5\" />\n                Configurações de Status\n              </CardTitle>\n              <Dialog open={statusEditModal.isOpen} onOpenChange={(open) => \n                setStatusEditModal({ isOpen: open, status: open ? statusEditModal.status : null })\n              }>\n                <DialogTrigger asChild>\n                  <Button \n                    onClick={() => setStatusEditModal({ \n                      isOpen: true, \n                      status: {\n                        id: '',\n                        name: '',\n                        value: '',\n                        color: '#3b82f6',\n                        order: statusConfigs.length + 1,\n                        isActive: true,\n                        isDefault: false\n                      }\n                    })}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Novo Status\n                  </Button>\n                </DialogTrigger>\n                <StatusEditModal\n                  status={statusEditModal.status}\n                  onSave={(status) => {\n                    if (status.id) {\n                      updateStatusMutation.mutate(status);\n                    } else {\n                      const { id, ...newStatus } = status;\n                      createStatusMutation.mutate(newStatus);\n                    }\n                  }}\n                  colorOptions={colorOptions}\n                />\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              {statusLoading ? (\n                <div>Carregando...</div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {statusConfigs\n                    .sort((a, b) => a.order - b.order)\n                    .map((status) => (\n                    <div key={status.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        {getColorPreview(status.color)}\n                        <div>\n                          <div className=\"font-medium\">{status.name}</div>\n                          <div className=\"text-sm text-gray-500\">Valor: {status.value}</div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {status.isDefault && (\n                            <Badge variant=\"secondary\">Padrão</Badge>\n                          )}\n                          {!status.isActive && (\n                            <Badge variant=\"outline\">Inativo</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setStatusEditModal({ isOpen: true, status })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deleteStatusMutation.mutate(status.id)}\n                          disabled={status.isDefault}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Priority Configuration */}\n        <TabsContent value=\"priority\" className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Configurações de Prioridade\n              </CardTitle>\n              <Dialog open={priorityEditModal.isOpen} onOpenChange={(open) => \n                setPriorityEditModal({ isOpen: open, priority: open ? priorityEditModal.priority : null })\n              }>\n                <DialogTrigger asChild>\n                  <Button \n                    onClick={() => setPriorityEditModal({ \n                      isOpen: true, \n                      priority: {\n                        id: '',\n                        name: '',\n                        value: '',\n                        color: '#3b82f6',\n                        slaHours: 24,\n                        order: priorityConfigs.length + 1,\n                        isActive: true,\n                        isDefault: false\n                      }\n                    })}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nova Prioridade\n                  </Button>\n                </DialogTrigger>\n                <PriorityEditModal\n                  priority={priorityEditModal.priority}\n                  onSave={(priority) => {\n                    if (priority.id) {\n                      updatePriorityMutation.mutate(priority);\n                    } else {\n                      const { id, ...newPriority } = priority;\n                      createPriorityMutation.mutate(newPriority);\n                    }\n                  }}\n                  colorOptions={colorOptions}\n                />\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              {priorityLoading ? (\n                <div>Carregando...</div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {priorityConfigs\n                    .sort((a, b) => a.order - b.order)\n                    .map((priority) => (\n                    <div key={priority.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        {getColorPreview(priority.color)}\n                        <div>\n                          <div className=\"font-medium\">{priority.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Valor: {priority.value} • SLA: {priority.slaHours}h\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {priority.isDefault && (\n                            <Badge variant=\"secondary\">Padrão</Badge>\n                          )}\n                          {!priority.isActive && (\n                            <Badge variant=\"outline\">Inativo</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setPriorityEditModal({ isOpen: true, priority })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deletePriorityMutation.mutate(priority.id)}\n                          disabled={priority.isDefault}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Modal para edição de status\nfunction StatusEditModal({ \n  status, \n  onSave, \n  colorOptions \n}: { \n  status: StatusConfig | null; \n  onSave: (status: StatusConfig) => void; \n  colorOptions: Array<{ value: string; label: string; preview: string }>;\n}) {\n  const [editedStatus, setEditedStatus] = useState<StatusConfig | null>(status);\n\n  React.useEffect(() => {\n    setEditedStatus(status);\n  }, [status]);\n\n  if (!editedStatus) return null;\n\n  return (\n    <DialogContent className=\"max-w-md\">\n      <DialogHeader>\n        <DialogTitle>\n          {editedStatus.id ? 'Editar Status' : 'Novo Status'}\n        </DialogTitle>\n      </DialogHeader>\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"statusName\">Nome</Label>\n          <Input\n            id=\"statusName\"\n            value={editedStatus.name}\n            onChange={(e) => setEditedStatus({ ...editedStatus, name: e.target.value })}\n            placeholder=\"Ex: Em Andamento\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"statusValue\">Valor (identificador)</Label>\n          <Input\n            id=\"statusValue\"\n            value={editedStatus.value}\n            onChange={(e) => setEditedStatus({ ...editedStatus, value: e.target.value })}\n            placeholder=\"Ex: in_progress\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"statusColor\">Cor</Label>\n          <Select\n            value={editedStatus.color}\n            onValueChange={(value) => setEditedStatus({ ...editedStatus, color: value })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {colorOptions.map((color) => (\n                <SelectItem key={color.value} value={color.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: color.preview }}\n                    />\n                    {color.label}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"statusOrder\">Ordem</Label>\n          <Input\n            id=\"statusOrder\"\n            type=\"number\"\n            value={editedStatus.order}\n            onChange={(e) => setEditedStatus({ ...editedStatus, order: parseInt(e.target.value) || 1 })}\n          />\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"statusActive\"\n            checked={editedStatus.isActive}\n            onCheckedChange={(checked) => setEditedStatus({ ...editedStatus, isActive: checked })}\n          />\n          <Label htmlFor=\"statusActive\">Ativo</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"statusDefault\"\n            checked={editedStatus.isDefault}\n            onCheckedChange={(checked) => setEditedStatus({ ...editedStatus, isDefault: checked })}\n          />\n          <Label htmlFor=\"statusDefault\">Padrão</Label>\n        </div>\n        <div className=\"flex justify-end gap-2\">\n          <Button\n            onClick={() => onSave(editedStatus)}\n            disabled={!editedStatus.name || !editedStatus.value}\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Salvar\n          </Button>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}\n\n// Modal para edição de prioridade\nfunction PriorityEditModal({ \n  priority, \n  onSave, \n  colorOptions \n}: { \n  priority: PriorityConfig | null; \n  onSave: (priority: PriorityConfig) => void; \n  colorOptions: Array<{ value: string; label: string; preview: string }>;\n}) {\n  const [editedPriority, setEditedPriority] = useState<PriorityConfig | null>(priority);\n\n  React.useEffect(() => {\n    setEditedPriority(priority);\n  }, [priority]);\n\n  if (!editedPriority) return null;\n\n  return (\n    <DialogContent className=\"max-w-md\">\n      <DialogHeader>\n        <DialogTitle>\n          {editedPriority.id ? 'Editar Prioridade' : 'Nova Prioridade'}\n        </DialogTitle>\n      </DialogHeader>\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"priorityName\">Nome</Label>\n          <Input\n            id=\"priorityName\"\n            value={editedPriority.name}\n            onChange={(e) => setEditedPriority({ ...editedPriority, name: e.target.value })}\n            placeholder=\"Ex: Alta\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"priorityValue\">Valor (identificador)</Label>\n          <Input\n            id=\"priorityValue\"\n            value={editedPriority.value}\n            onChange={(e) => setEditedPriority({ ...editedPriority, value: e.target.value })}\n            placeholder=\"Ex: high\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"priorityColor\">Cor</Label>\n          <Select\n            value={editedPriority.color}\n            onValueChange={(value) => setEditedPriority({ ...editedPriority, color: value })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {colorOptions.map((color) => (\n                <SelectItem key={color.value} value={color.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: color.preview }}\n                    />\n                    {color.label}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"prioritySla\">SLA (horas)</Label>\n          <Input\n            id=\"prioritySla\"\n            type=\"number\"\n            value={editedPriority.slaHours}\n            onChange={(e) => setEditedPriority({ ...editedPriority, slaHours: parseInt(e.target.value) || 24 })}\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"priorityOrder\">Ordem</Label>\n          <Input\n            id=\"priorityOrder\"\n            type=\"number\"\n            value={editedPriority.order}\n            onChange={(e) => setEditedPriority({ ...editedPriority, order: parseInt(e.target.value) || 1 })}\n          />\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"priorityActive\"\n            checked={editedPriority.isActive}\n            onCheckedChange={(checked) => setEditedPriority({ ...editedPriority, isActive: checked })}\n          />\n          <Label htmlFor=\"priorityActive\">Ativo</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"priorityDefault\"\n            checked={editedPriority.isDefault}\n            onCheckedChange={(checked) => setEditedPriority({ ...editedPriority, isDefault: checked })}\n          />\n          <Label htmlFor=\"priorityDefault\">Padrão</Label>\n        </div>\n        <div className=\"flex justify-end gap-2\">\n          <Button\n            onClick={() => onSave(editedPriority)}\n            disabled={!editedPriority.name || !editedPriority.value}\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Salvar\n          </Button>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}","size_bytes":22714},"attached_assets/ActivityMonitor_1754604173019.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst ActivityMonitor = () => {\n  const [activeTab, setActiveTab] = useState('sessions');\n\n  const activeSessions = [\n    {\n      id: 1,\n      usuario: 'Ana Silva',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150',\n      email: 'ana.silva@empresa.com',\n      ip: '192.168.1.100',\n      dispositivo: 'Chrome - Windows 11',\n      localizacao: 'São Paulo, SP',\n      inicioSessao: '07/08/2025 14:30',\n      ultimaAtividade: '18:45',\n      status: 'Ativo'\n    },\n    {\n      id: 2,\n      usuario: 'Carlos Santos',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150',\n      email: 'carlos.santos@empresa.com',\n      ip: '192.168.1.105',\n      dispositivo: 'Firefox - macOS',\n      localizacao: 'Rio de Janeiro, RJ',\n      inicioSessao: '07/08/2025 09:15',\n      ultimaAtividade: '18:42',\n      status: 'Ativo'\n    },\n    {\n      id: 3,\n      usuario: 'Maria Oliveira',\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150',\n      email: 'maria.oliveira@empresa.com',\n      ip: '192.168.1.110',\n      dispositivo: 'Safari - iPhone',\n      localizacao: 'Belo Horizonte, MG',\n      inicioSessao: '07/08/2025 16:20',\n      ultimaAtividade: '18:40',\n      status: 'Inativo'\n    }\n  ];\n\n  const systemUsage = [\n    { metric: 'Usuários Online', value: '23', change: '+5', trend: 'up' },\n    { metric: 'Sessões Ativas', value: '31', change: '+2', trend: 'up' },\n    { metric: 'Pico Diário', value: '45', change: '-3', trend: 'down' },\n    { metric: 'Tempo Médio', value: '4h 32m', change: '+15m', trend: 'up' }\n  ];\n\n  const securityEvents = [\n    {\n      id: 1,\n      tipo: 'Login Suspeito',\n      usuario: 'João Pereira',\n      descricao: 'Tentativa de login de localização não usual',\n      ip: '203.45.67.89',\n      timestamp: '07/08/2025 18:35',\n      severidade: 'Alta',\n      status: 'Investigando'\n    },\n    {\n      id: 2,\n      tipo: 'Múltiplas Tentativas',\n      usuario: 'Sistema',\n      descricao: '5 tentativas de login falharam para admin@empresa.com',\n      ip: '192.168.1.200',\n      timestamp: '07/08/2025 17:20',\n      severidade: 'Média',\n      status: 'Bloqueado'\n    },\n    {\n      id: 3,\n      tipo: 'Permissão Alterada',\n      usuario: 'Ana Silva',\n      descricao: 'Permissões de administrador concedidas a carlos.santos',\n      ip: '192.168.1.100',\n      timestamp: '07/08/2025 16:45',\n      severidade: 'Baixa',\n      status: 'Aprovado'\n    }\n  ];\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'Alta': return 'bg-error text-error-foreground';\n      case 'Média': return 'bg-warning text-warning-foreground';\n      case 'Baixa': return 'bg-success text-success-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Ativo': return 'text-success';\n      case 'Inativo': return 'text-muted-foreground';\n      case 'Investigando': return 'text-warning';\n      case 'Bloqueado': return 'text-error';\n      case 'Aprovado': return 'text-success';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const tabs = [\n    { id: 'sessions', label: 'Sessões Ativas', icon: 'Users', count: activeSessions?.length },\n    { id: 'usage', label: 'Uso do Sistema', icon: 'BarChart3', count: null },\n    { id: 'security', label: 'Eventos de Segurança', icon: 'Shield', count: securityEvents?.length }\n  ];\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Activity\" size={16} />\n          <h3 className=\"text-sm font-semibold text-foreground\">Monitor de Atividade</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n            <div className=\"w-2 h-2 bg-success rounded-full animate-pulse\"></div>\n            <span>Atualização em tempo real</span>\n          </div>\n          <Button variant=\"outline\" size=\"xs\" iconName=\"RefreshCw\" />\n        </div>\n      </div>\n      {/* Tabs */}\n      <div className=\"flex border-b border-border\">\n        {tabs?.map((tab) => (\n          <button\n            key={tab?.id}\n            onClick={() => setActiveTab(tab?.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-enterprise ${\n              activeTab === tab?.id\n                ? 'border-b-2 border-primary text-primary' :'text-muted-foreground hover:text-foreground'\n            }`}\n          >\n            <Icon name={tab?.icon} size={16} />\n            <span>{tab?.label}</span>\n            {tab?.count !== null && (\n              <span className=\"px-2 py-1 text-xs bg-muted text-muted-foreground rounded-full\">\n                {tab?.count}\n              </span>\n            )}\n          </button>\n        ))}\n      </div>\n      {/* Content */}\n      <div className=\"p-4\">\n        {activeTab === 'sessions' && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-sm font-medium text-foreground\">Sessões Ativas ({activeSessions?.length})</h4>\n              <Button variant=\"outline\" size=\"xs\" iconName=\"LogOut\" iconPosition=\"left\">\n                Encerrar Todas\n              </Button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {activeSessions?.map((session) => (\n                <div key={session?.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <Image\n                        src={session?.avatar}\n                        alt={session?.usuario}\n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                      <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-card ${\n                        session?.status === 'Ativo' ? 'bg-success' : 'bg-muted-foreground'\n                      }`}></div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">{session?.usuario}</div>\n                      <div className=\"text-xs text-muted-foreground\">{session?.email}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                    <div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"Monitor\" size={12} />\n                        <span>{session?.dispositivo}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 mt-1\">\n                        <Icon name=\"MapPin\" size={12} />\n                        <span>{session?.localizacao}</span>\n                      </div>\n                    </div>\n                    <div>\n                      <div>Início: {session?.inicioSessao}</div>\n                      <div className={getStatusColor(session?.status)}>\n                        Última: {session?.ultimaAtividade}\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"xs\"\n                      iconName=\"LogOut\"\n                      className=\"text-error hover:text-error\"\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'usage' && (\n          <div className=\"space-y-6\">\n            <h4 className=\"text-sm font-medium text-foreground\">Estatísticas de Uso</h4>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {systemUsage?.map((stat, index) => (\n                <div key={index} className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">{stat?.metric}</p>\n                      <p className=\"text-lg font-semibold text-foreground\">{stat?.value}</p>\n                    </div>\n                    <div className={`flex items-center space-x-1 text-xs ${\n                      stat?.trend === 'up' ? 'text-success' : 'text-error'\n                    }`}>\n                      <Icon name={stat?.trend === 'up' ? 'TrendingUp' : 'TrendingDown'} size={12} />\n                      <span>{stat?.change}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"space-y-4\">\n              <h5 className=\"text-sm font-medium text-foreground\">Atividade por Hora</h5>\n              <div className=\"h-32 bg-muted/50 rounded-lg flex items-end justify-center p-4\">\n                <div className=\"flex items-end space-x-1 h-full\">\n                  {[12, 8, 15, 22, 18, 25, 30, 28, 35, 32, 28, 20]?.map((height, index) => (\n                    <div\n                      key={index}\n                      className=\"bg-primary rounded-t flex-1 min-w-0\"\n                      style={{ height: `${height}%` }}\n                    ></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'security' && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-sm font-medium text-foreground\">Eventos de Segurança</h4>\n              <Button variant=\"outline\" size=\"xs\" iconName=\"Download\" iconPosition=\"left\">\n                Exportar Log\n              </Button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {securityEvents?.map((event) => (\n                <div key={event.id} className=\"p-4 border border-border rounded-lg\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getSeverityColor(event.severidade)}`}>\n                          {event.severidade}\n                        </span>\n                        <span className=\"text-sm font-medium text-foreground\">{event.tipo}</span>\n                      </div>\n                      <p className=\"text-sm text-foreground mb-2\">{event.descricao}</p>\n                      <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                        <span>Usuário: {event.usuario}</span>\n                        <span>IP: {event.ip}</span>\n                        <span>{event.timestamp}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`text-xs font-medium ${getStatusColor(event.status)}`}>\n                        {event.status}\n                      </span>\n                      <Button variant=\"outline\" size=\"xs\" iconName=\"Eye\" />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ActivityMonitor;","size_bytes":11846},"attached_assets/AppIcon_1754603553647.jsx":{"content":"import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { HelpCircle } from 'lucide-react';\n\nfunction Icon({\n    name,\n    size = 24,\n    color = \"currentColor\",\n    className = \"\",\n    strokeWidth = 2,\n    ...props\n}) {\n    const IconComponent = LucideIcons?.[name];\n\n    if (!IconComponent) {\n        return <HelpCircle size={size} color=\"gray\" strokeWidth={strokeWidth} className={className} {...props} />;\n    }\n\n    return <IconComponent\n        size={size}\n        color={color}\n        strokeWidth={strokeWidth}\n        className={className}\n        {...props}\n    />;\n}\nexport default Icon;","size_bytes":621},"attached_assets/AppImage_1754603553647.jsx":{"content":"import React from 'react';\n\nfunction Image({\n  src,\n  alt = \"Image Name\",\n  className = \"\",\n  ...props\n}) {\n\n  return (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      onError={(e) => {\n        e.target.src = \"/assets/images/no_image.png\"\n      }}\n      {...props}\n    />\n  );\n}\n\nexport default Image;\n","size_bytes":329},"attached_assets/App_1754603556932.jsx":{"content":"import React from \"react\";\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","size_bytes":130},"attached_assets/AssignmentControls_1754604173018.jsx":{"content":"import React, { useState } from 'react';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\n\nconst AssignmentControls = ({ \n  formData, \n  onFormChange, \n  errors, \n  operators, \n  serviceDesks,\n  userRole \n}) => {\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n\n  const handleInputChange = (field, value) => {\n    onFormChange(field, value);\n  };\n\n  const isManager = userRole === 'manager' || userRole === 'admin';\n\n  const getOperatorAvatar = (operatorId) => {\n    const operator = operators?.find(op => op?.id === operatorId);\n    return operator?.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${operatorId}`;\n  };\n\n  const getOperatorStatus = (operatorId) => {\n    const operator = operators?.find(op => op?.id === operatorId);\n    return operator?.status || 'offline';\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'online': return 'bg-green-500';\n      case 'busy': return 'bg-yellow-500';\n      case 'away': return 'bg-orange-500';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const filteredOperators = formData?.serviceDesk \n    ? operators?.filter(op => op?.serviceDeskId === formData?.serviceDesk)\n    : operators;\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6 shadow-enterprise\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center justify-center w-10 h-10 bg-secondary/10 rounded-lg\">\n            <Icon name=\"UserCheck\" size={20} className=\"text-secondary\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">Atribuição e Roteamento</h2>\n            <p className=\"text-sm text-muted-foreground\">Configure quem será responsável pelo atendimento</p>\n          </div>\n        </div>\n\n        {isManager && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}\n            iconName={showAdvancedOptions ? \"ChevronUp\" : \"ChevronDown\"}\n            iconPosition=\"right\"\n            iconSize={16}\n          >\n            Opções Avançadas\n          </Button>\n        )}\n      </div>\n      <div className=\"space-y-4\">\n        <Select\n          label=\"Mesa de Atendimento\"\n          placeholder=\"Selecione a mesa de atendimento\"\n          options={serviceDesks?.map(desk => ({\n            value: desk?.id,\n            label: desk?.name,\n            description: `${desk?.activeOperators} operadores ativos • SLA: ${desk?.defaultSla}h`\n          }))}\n          value={formData?.serviceDesk || ''}\n          onChange={(value) => {\n            handleInputChange('serviceDesk', value);\n            handleInputChange('assignedOperator', '');\n          }}\n          error={errors?.serviceDesk}\n          required\n          className=\"w-full\"\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Select\n            label=\"Operador Responsável\"\n            placeholder=\"Atribuição automática\"\n            options={filteredOperators?.map(operator => ({\n              value: operator?.id,\n              label: (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <Image\n                      src={getOperatorAvatar(operator?.id)}\n                      alt={operator?.name}\n                      className=\"w-6 h-6 rounded-full\"\n                    />\n                    <div className={`absolute -bottom-0.5 -right-0.5 w-3 h-3 rounded-full border-2 border-white ${getStatusColor(getOperatorStatus(operator?.id))}`}></div>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">{operator?.name}</span>\n                    <span className=\"text-xs text-muted-foreground ml-2\">({operator?.currentTickets} tickets)</span>\n                  </div>\n                </div>\n              ),\n              description: `${operator?.department} • ${operator?.specialties?.join(', ')}`\n            }))}\n            value={formData?.assignedOperator || ''}\n            onChange={(value) => handleInputChange('assignedOperator', value)}\n            error={errors?.assignedOperator}\n            disabled={!formData?.serviceDesk}\n            searchable\n            className=\"w-full\"\n          />\n\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium text-foreground\">Opções de Atribuição</label>\n            \n            <Checkbox\n              label=\"Atribuição automática\"\n              description=\"Sistema escolhe o melhor operador disponível\"\n              checked={formData?.autoAssign || false}\n              onChange={(e) => handleInputChange('autoAssign', e?.target?.checked)}\n            />\n            \n            <Checkbox\n              label=\"Notificar por email\"\n              description=\"Enviar notificação para o operador atribuído\"\n              checked={formData?.emailNotification || true}\n              onChange={(e) => handleInputChange('emailNotification', e?.target?.checked)}\n            />\n          </div>\n        </div>\n\n        {/* Advanced Options for Managers */}\n        {isManager && showAdvancedOptions && (\n          <div className=\"mt-6 p-4 bg-muted/50 rounded-lg border border-border\">\n            <h4 className=\"text-sm font-medium text-foreground mb-4\">Configurações Avançadas</h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Select\n                label=\"SLA Personalizado\"\n                placeholder=\"Usar SLA padrão\"\n                options={[\n                  { value: '1', label: '1 hora', description: 'Crítico' },\n                  { value: '4', label: '4 horas', description: 'Alto' },\n                  { value: '8', label: '8 horas', description: 'Médio' },\n                  { value: '24', label: '24 horas', description: 'Baixo' },\n                  { value: '72', label: '72 horas', description: 'Planejado' }\n                ]}\n                value={formData?.customSla || ''}\n                onChange={(value) => handleInputChange('customSla', value)}\n                className=\"w-full\"\n              />\n\n              <Select\n                label=\"Roteamento Especial\"\n                placeholder=\"Roteamento padrão\"\n                options={[\n                  { value: 'escalation', label: 'Escalação Automática', description: 'Escala se não atendido em 2h' },\n                  { value: 'round_robin', label: 'Round Robin', description: 'Distribui igualmente entre operadores' },\n                  { value: 'skill_based', label: 'Por Especialidade', description: 'Baseado nas competências' },\n                  { value: 'workload', label: 'Por Carga de Trabalho', description: 'Menor número de tickets' }\n                ]}\n                value={formData?.routingRule || ''}\n                onChange={(value) => handleInputChange('routingRule', value)}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div className=\"mt-4 space-y-3\">\n              <Checkbox\n                label=\"Criar múltiplos tickets\"\n                description=\"Permite criação em lote com as mesmas configurações\"\n                checked={formData?.bulkCreation || false}\n                onChange={(e) => handleInputChange('bulkCreation', e?.target?.checked)}\n              />\n              \n              <Checkbox\n                label=\"Pular validações automáticas\"\n                description=\"Bypass de verificações de duplicatas e regras de negócio\"\n                checked={formData?.skipValidations || false}\n                onChange={(e) => handleInputChange('skipValidations', e?.target?.checked)}\n              />\n              \n              <Checkbox\n                label=\"Ticket interno\"\n                description=\"Visível apenas para operadores e administradores\"\n                checked={formData?.internalTicket || false}\n                onChange={(e) => handleInputChange('internalTicket', e?.target?.checked)}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Assignment Preview */}\n        {(formData?.serviceDesk || formData?.assignedOperator) && (\n          <div className=\"mt-6 p-4 bg-primary/5 rounded-lg border border-primary/20\">\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-medium text-foreground mb-2\">Resumo da Atribuição</h4>\n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  {formData?.serviceDesk && (\n                    <p>• Mesa: {serviceDesks?.find(d => d?.id === formData?.serviceDesk)?.name}</p>\n                  )}\n                  {formData?.assignedOperator ? (\n                    <p>• Operador: {operators?.find(o => o?.id === formData?.assignedOperator)?.name}</p>\n                  ) : (\n                    <p>• Atribuição: Automática baseada na disponibilidade</p>\n                  )}\n                  {formData?.customSla && (\n                    <p>• SLA: {formData?.customSla} horas</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AssignmentControls;","size_bytes":9669},"attached_assets/BulkActionsPanel_1754604173019.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport Input from '../../../components/ui/Input';\n\nconst BulkActionsPanel = ({ selectedUsers, onBulkAction, onClose }) => {\n  const [activeAction, setActiveAction] = useState('');\n  const [actionData, setActionData] = useState({});\n\n  const bulkActions = [\n    { value: 'status', label: 'Alterar Status', icon: 'UserCheck' },\n    { value: 'department', label: 'Alterar Departamento', icon: 'Building' },\n    { value: 'role', label: 'Alterar Função', icon: 'Shield' },\n    { value: 'permissions', label: 'Aplicar Permissões', icon: 'Key' },\n    { value: 'export', label: 'Exportar Dados', icon: 'Download' },\n    { value: 'delete', label: 'Excluir Usuários', icon: 'Trash2' }\n  ];\n\n  const statusOptions = [\n    { value: 'Ativo', label: 'Ativo' },\n    { value: 'Inativo', label: 'Inativo' },\n    { value: 'Suspenso', label: 'Suspenso' },\n    { value: 'Pendente', label: 'Pendente' }\n  ];\n\n  const departmentOptions = [\n    { value: 'TI', label: 'Tecnologia da Informação' },\n    { value: 'Suporte', label: 'Suporte Técnico' },\n    { value: 'Vendas', label: 'Vendas' },\n    { value: 'Marketing', label: 'Marketing' },\n    { value: 'RH', label: 'Recursos Humanos' },\n    { value: 'Financeiro', label: 'Financeiro' }\n  ];\n\n  const roleOptions = [\n    { value: 'Administrador', label: 'Administrador' },\n    { value: 'Supervisor', label: 'Supervisor' },\n    { value: 'Atendente', label: 'Atendente' },\n    { value: 'Usuário', label: 'Usuário' }\n  ];\n\n  const handleActionChange = (action) => {\n    setActiveAction(action);\n    setActionData({});\n  };\n\n  const handleExecute = () => {\n    onBulkAction(activeAction, actionData, selectedUsers);\n    onClose();\n  };\n\n  const renderActionForm = () => {\n    switch (activeAction) {\n      case 'status':\n        return (\n          <Select\n            label=\"Novo Status\"\n            options={statusOptions}\n            value={actionData?.status || ''}\n            onChange={(value) => setActionData({ ...actionData, status: value })}\n            placeholder=\"Selecione o status\"\n          />\n        );\n      \n      case 'department':\n        return (\n          <Select\n            label=\"Novo Departamento\"\n            options={departmentOptions}\n            value={actionData?.department || ''}\n            onChange={(value) => setActionData({ ...actionData, department: value })}\n            placeholder=\"Selecione o departamento\"\n            searchable\n          />\n        );\n      \n      case 'role':\n        return (\n          <Select\n            label=\"Nova Função\"\n            options={roleOptions}\n            value={actionData?.role || ''}\n            onChange={(value) => setActionData({ ...actionData, role: value })}\n            placeholder=\"Selecione a função\"\n          />\n        );\n      \n      case 'permissions':\n        return (\n          <div className=\"space-y-4\">\n            <Select\n              label=\"Template de Permissões\"\n              options={[\n                { value: 'admin', label: 'Administrador Completo' },\n                { value: 'supervisor', label: 'Supervisor de Equipe' },\n                { value: 'agent', label: 'Agente de Suporte' },\n                { value: 'readonly', label: 'Somente Leitura' }\n              ]}\n              value={actionData?.template || ''}\n              onChange={(value) => setActionData({ ...actionData, template: value })}\n              placeholder=\"Selecione um template\"\n            />\n            <div className=\"p-3 bg-muted/50 rounded-lg\">\n              <p className=\"text-xs text-muted-foreground\">\n                As permissões serão aplicadas substituindo as configurações atuais dos usuários selecionados.\n              </p>\n            </div>\n          </div>\n        );\n      \n      case 'export':\n        return (\n          <div className=\"space-y-4\">\n            <Select\n              label=\"Formato de Exportação\"\n              options={[\n                { value: 'csv', label: 'CSV (Excel)' },\n                { value: 'pdf', label: 'PDF' },\n                { value: 'json', label: 'JSON' }\n              ]}\n              value={actionData?.format || 'csv'}\n              onChange={(value) => setActionData({ ...actionData, format: value })}\n            />\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-foreground\">Campos a Exportar:</label>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                {['Nome', 'Email', 'Departamento', 'Função', 'Status', 'Data Criação']?.map((field) => (\n                  <label key={field} className=\"flex items-center space-x-2\">\n                    <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                    <span>{field}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n      \n      case 'delete':\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-error/10 border border-error/20 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <Icon name=\"AlertTriangle\" size={16} className=\"text-error mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-error\">Ação Irreversível</h4>\n                  <p className=\"text-xs text-error/80 mt-1\">\n                    Esta ação excluirá permanentemente {selectedUsers?.length} usuário(s) e todos os dados associados.\n                  </p>\n                </div>\n              </div>\n            </div>\n            <Input\n              label=\"Digite 'CONFIRMAR' para prosseguir\"\n              type=\"text\"\n              value={actionData?.confirmation || ''}\n              onChange={(e) => setActionData({ ...actionData, confirmation: e?.target?.value })}\n              placeholder=\"CONFIRMAR\"\n            />\n          </div>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  const canExecute = () => {\n    switch (activeAction) {\n      case 'status':\n        return actionData?.status;\n      case 'department':\n        return actionData?.department;\n      case 'role':\n        return actionData?.role;\n      case 'permissions':\n        return actionData?.template;\n      case 'export':\n        return actionData?.format;\n      case 'delete':\n        return actionData?.confirmation === 'CONFIRMAR';\n      default:\n        return false;\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Ações em Lote</h2>\n          <p className=\"text-sm text-muted-foreground\">\n            {selectedUsers?.length} usuário(s) selecionado(s)\n          </p>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onClose}\n          iconName=\"X\"\n          iconSize={16}\n        />\n      </div>\n      {/* Content */}\n      <div className=\"p-4 space-y-6\">\n        {/* Action Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-foreground mb-3\">\n            Selecione uma Ação\n          </label>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {bulkActions?.map((action) => (\n              <button\n                key={action?.value}\n                onClick={() => handleActionChange(action?.value)}\n                className={`flex items-center space-x-2 p-3 rounded-lg border transition-enterprise ${\n                  activeAction === action?.value\n                    ? 'border-primary bg-primary/10 text-primary' :'border-border hover:border-primary/50 hover:bg-muted/50'\n                }`}\n              >\n                <Icon name={action?.icon} size={16} />\n                <span className=\"text-sm font-medium\">{action?.label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Action Form */}\n        {activeAction && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium text-foreground\">\n              Configurar Ação: {bulkActions?.find(a => a?.value === activeAction)?.label}\n            </h3>\n            {renderActionForm()}\n          </div>\n        )}\n\n        {/* Selected Users Preview */}\n        <div>\n          <h3 className=\"text-sm font-medium text-foreground mb-2\">Usuários Selecionados</h3>\n          <div className=\"max-h-32 overflow-y-auto space-y-1\">\n            {selectedUsers?.slice(0, 5)?.map((userId) => (\n              <div key={userId} className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <Icon name=\"User\" size={12} />\n                <span>Usuário ID: {userId}</span>\n              </div>\n            ))}\n            {selectedUsers?.length > 5 && (\n              <p className=\"text-xs text-muted-foreground\">\n                ... e mais {selectedUsers?.length - 5} usuário(s)\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n      {/* Footer */}\n      <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n        <Button variant=\"outline\" onClick={onClose}>\n          Cancelar\n        </Button>\n        <Button\n          variant={activeAction === 'delete' ? 'destructive' : 'default'}\n          disabled={!canExecute()}\n          onClick={handleExecute}\n          iconName={activeAction === 'delete' ? 'Trash2' : 'Play'}\n          iconPosition=\"left\"\n        >\n          {activeAction === 'delete' ? 'Excluir Usuários' : 'Executar Ação'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BulkActionsPanel;","size_bytes":9881},"attached_assets/BulkActions_1754603675755.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst BulkActions = ({ \n  selectedTickets, \n  onBulkAction, \n  onClearSelection,\n  totalTickets \n}) => {\n  const [bulkAction, setBulkAction] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const bulkActionOptions = [\n    { value: '', label: 'Selecionar ação...' },\n    { value: 'move-todo', label: 'Mover para A Fazer' },\n    { value: 'move-attending', label: 'Mover para Em Atendimento' },\n    { value: 'move-paused', label: 'Mover para Pausado' },\n    { value: 'move-completed', label: 'Mover para Concluído' },\n    { value: 'assign-agent', label: 'Atribuir Agente' },\n    { value: 'change-priority', label: 'Alterar Prioridade' },\n    { value: 'add-comment', label: 'Adicionar Comentário' },\n    { value: 'export', label: 'Exportar Selecionados' },\n    { value: 'delete', label: 'Excluir Tickets' }\n  ];\n\n  const handleBulkAction = async () => {\n    if (!bulkAction || selectedTickets?.length === 0) return;\n\n    setIsProcessing(true);\n    try {\n      await onBulkAction(bulkAction, selectedTickets);\n      setBulkAction('');\n    } catch (error) {\n      console.error('Erro ao executar ação em lote:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSelectAll = () => {\n    // This would be handled by parent component\n    onBulkAction('select-all', []);\n  };\n\n  if (selectedTickets?.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50\">\n      <div className=\"bg-card border border-border rounded-lg shadow-enterprise-lg p-4 min-w-96\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-primary-foreground rounded-full\">\n              <Icon name=\"Check\" size={16} />\n            </div>\n            <div>\n              <h3 className=\"font-medium text-foreground\">\n                {selectedTickets?.length} ticket{selectedTickets?.length !== 1 ? 's' : ''} selecionado{selectedTickets?.length !== 1 ? 's' : ''}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                de {totalTickets} tickets totais\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            iconName=\"X\"\n            iconSize={16}\n            onClick={onClearSelection}\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-1\">\n            <Select\n              options={bulkActionOptions}\n              value={bulkAction}\n              onChange={setBulkAction}\n              placeholder=\"Selecionar ação...\"\n            />\n          </div>\n          \n          <Button\n            variant=\"default\"\n            iconName=\"Play\"\n            iconPosition=\"left\"\n            iconSize={16}\n            loading={isProcessing}\n            disabled={!bulkAction || isProcessing}\n            onClick={handleBulkAction}\n          >\n            Executar\n          </Button>\n        </div>\n\n        <div className=\"flex items-center justify-between mt-4 pt-3 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Square\"\n              iconPosition=\"left\"\n              iconSize={14}\n              onClick={handleSelectAll}\n            >\n              Selecionar Todos\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Download\"\n              iconPosition=\"left\"\n              iconSize={14}\n              onClick={() => onBulkAction('export', selectedTickets)}\n            >\n              Exportar\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n            <Icon name=\"Info\" size={14} />\n            <span>Use Shift+Click para seleção em lote</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BulkActions;","size_bytes":4353},"attached_assets/BulkActions_1754603788534.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport Input from '../../../components/ui/Input';\n\nconst BulkActions = ({ selectedTickets, onBulkAction, onClearSelection }) => {\n  const [showBulkDialog, setShowBulkDialog] = useState(false);\n  const [bulkAction, setBulkAction] = useState('');\n  const [bulkReason, setBulkReason] = useState('');\n  const [bulkAssignee, setBulkAssignee] = useState('');\n\n  const bulkActionOptions = [\n    { value: 'pause', label: 'Pausar SLA' },\n    { value: 'resume', label: 'Retomar SLA' },\n    { value: 'extend', label: 'Estender SLA' },\n    { value: 'reassign', label: 'Reatribuir Responsável' },\n    { value: 'escalate', label: 'Escalar Tickets' }\n  ];\n\n  const assigneeOptions = [\n    { value: 'carlos.silva', label: 'Carlos Silva' },\n    { value: 'ana.santos', label: 'Ana Santos' },\n    { value: 'pedro.oliveira', label: 'Pedro Oliveira' },\n    { value: 'maria.costa', label: 'Maria Costa' },\n    { value: 'joao.ferreira', label: 'João Ferreira' }\n  ];\n\n  const handleBulkAction = () => {\n    if (!bulkAction) return;\n\n    const actionData = {\n      action: bulkAction,\n      ticketIds: selectedTickets,\n      reason: bulkReason,\n      assignee: bulkAssignee\n    };\n\n    onBulkAction(actionData);\n    setShowBulkDialog(false);\n    setBulkAction('');\n    setBulkReason('');\n    setBulkAssignee('');\n  };\n\n  if (selectedTickets?.length === 0) return null;\n\n  return (\n    <>\n      <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-card border border-border rounded-lg shadow-enterprise-lg p-4 z-40\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"CheckSquare\" size={18} className=\"text-primary\" />\n            <span className=\"text-sm font-medium text-foreground\">\n              {selectedTickets?.length} ticket{selectedTickets?.length > 1 ? 's' : ''} selecionado{selectedTickets?.length > 1 ? 's' : ''}\n            </span>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowBulkDialog(true)}\n              iconName=\"Settings\"\n              iconPosition=\"left\"\n              iconSize={14}\n            >\n              Ações em Lote\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClearSelection}\n              iconName=\"X\"\n              iconSize={14}\n            >\n              Limpar Seleção\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Bulk Action Dialog */}\n      {showBulkDialog && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg p-6 w-full max-w-md shadow-enterprise-lg\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"font-semibold text-foreground\">Ações em Lote</h4>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowBulkDialog(false)}\n              >\n                <Icon name=\"X\" size={16} />\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Aplicar ação para {selectedTickets?.length} ticket{selectedTickets?.length > 1 ? 's' : ''}\n                </p>\n              </div>\n\n              <Select\n                label=\"Selecionar Ação\"\n                options={bulkActionOptions}\n                value={bulkAction}\n                onChange={setBulkAction}\n                placeholder=\"Escolha uma ação\"\n                required\n              />\n\n              {bulkAction === 'reassign' && (\n                <Select\n                  label=\"Novo Responsável\"\n                  options={assigneeOptions}\n                  value={bulkAssignee}\n                  onChange={setBulkAssignee}\n                  placeholder=\"Selecione o responsável\"\n                  required\n                />\n              )}\n\n              <Input\n                label=\"Motivo/Observação\"\n                type=\"text\"\n                placeholder=\"Digite o motivo para esta ação (opcional)\"\n                value={bulkReason}\n                onChange={(e) => setBulkReason(e?.target?.value)}\n              />\n\n              <div className=\"flex items-center justify-end space-x-2 pt-4\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowBulkDialog(false)}\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  variant=\"default\"\n                  onClick={handleBulkAction}\n                  disabled={!bulkAction}\n                  iconName=\"Check\"\n                  iconPosition=\"left\"\n                  iconSize={14}\n                >\n                  Aplicar Ação\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default BulkActions;","size_bytes":5339},"attached_assets/Button_1754603553648.jsx":{"content":"import React from 'react';\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"../../utils/cn\";\nimport Icon from '../AppIcon';\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n                success: \"bg-success text-success-foreground hover:bg-success/90\",\n                warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n                danger: \"bg-error text-error-foreground hover:bg-error/90\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n                xs: \"h-8 rounded-md px-2 text-xs\",\n                xl: \"h-12 rounded-md px-10 text-base\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nconst Button = React.forwardRef(({\n    className,\n    variant,\n    size,\n    asChild = false,\n    children,\n    loading = false,\n    iconName = null,\n    iconPosition = 'left',\n    iconSize = null,\n    fullWidth = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Icon size mapping based on button size\n    const iconSizeMap = {\n        xs: 12,\n        sm: 14,\n        default: 16,\n        lg: 18,\n        xl: 20,\n        icon: 16,\n    };\n\n    const calculatedIconSize = iconSize || iconSizeMap?.[size] || 16;\n\n    // Loading spinner\n    const LoadingSpinner = () => (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n        </svg>\n    );\n\n    // Icon rendering\n    const renderIcon = () => {\n        if (!iconName) return null;\n\n        return (\n            <Icon\n                name={iconName}\n                size={calculatedIconSize}\n                className={cn(\n                    children && iconPosition === 'left' && \"mr-2\",\n                    children && iconPosition === 'right' && \"ml-2\"\n                )}\n            />\n        );\n    };\n\n    return (\n        <Comp\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </Comp>\n    );\n});\n\nButton.displayName = \"Button\";\n\nexport default Button;","size_bytes":3737},"attached_assets/CategorizationSection_1754604173018.jsx":{"content":"import React from 'react';\nimport Select from '../../../components/ui/Select';\nimport Icon from '../../../components/AppIcon';\n\nconst CategorizationSection = ({ \n  formData, \n  onFormChange, \n  errors, \n  categories, \n  subjects, \n  ticketTypes,\n  priorities \n}) => {\n  const handleInputChange = (field, value) => {\n    onFormChange(field, value);\n  };\n\n  const filteredSubjects = formData?.category ? subjects?.filter(subject => subject?.categoryId === formData?.category) : [];\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'critical': return 'text-red-600';\n      case 'high': return 'text-orange-600';\n      case 'medium': return 'text-yellow-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getPriorityIcon = (priority) => {\n    switch (priority) {\n      case 'critical': return 'AlertTriangle';\n      case 'high': return 'ArrowUp';\n      case 'medium': return 'Minus';\n      case 'low': return 'ArrowDown';\n      default: return 'Circle';\n    }\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6 shadow-enterprise\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-accent/10 rounded-lg\">\n          <Icon name=\"Tag\" size={20} className=\"text-accent\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Categorização</h2>\n          <p className=\"text-sm text-muted-foreground\">Classifique o tipo e prioridade do chamado</p>\n        </div>\n      </div>\n      <div className=\"space-y-4\">\n        <Select\n          label=\"Categoria\"\n          placeholder=\"Selecione a categoria\"\n          options={categories?.map(category => ({\n            value: category?.id,\n            label: category?.name,\n            description: category?.description\n          }))}\n          value={formData?.category || ''}\n          onChange={(value) => {\n            handleInputChange('category', value);\n            handleInputChange('subject', '');\n          }}\n          error={errors?.category}\n          required\n          searchable\n          className=\"w-full\"\n        />\n\n        <Select\n          label=\"Assunto\"\n          placeholder=\"Selecione o assunto\"\n          options={filteredSubjects?.map(subject => ({\n            value: subject?.id,\n            label: subject?.name,\n            description: subject?.description\n          }))}\n          value={formData?.subject || ''}\n          onChange={(value) => handleInputChange('subject', value)}\n          error={errors?.subject}\n          required\n          disabled={!formData?.category}\n          searchable\n          className=\"w-full\"\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Select\n            label=\"Tipo do Chamado\"\n            placeholder=\"Selecione o tipo\"\n            options={ticketTypes?.map(type => ({\n              value: type?.id,\n              label: type?.name,\n              description: type?.description\n            }))}\n            value={formData?.ticketType || ''}\n            onChange={(value) => handleInputChange('ticketType', value)}\n            error={errors?.ticketType}\n            required\n            className=\"w-full\"\n          />\n\n          <Select\n            label=\"Prioridade\"\n            placeholder=\"Selecione a prioridade\"\n            options={priorities?.map(priority => ({\n              value: priority?.id,\n              label: (\n                <div className=\"flex items-center space-x-2\">\n                  <Icon name={getPriorityIcon(priority?.level)} size={16} className={getPriorityColor(priority?.level)} />\n                  <span>{priority?.name}</span>\n                </div>\n              ),\n              description: priority?.description\n            }))}\n            value={formData?.priority || ''}\n            onChange={(value) => handleInputChange('priority', value)}\n            error={errors?.priority}\n            required\n            className=\"w-full\"\n          />\n        </div>\n\n        {formData?.priority && (\n          <div className=\"p-4 bg-muted/50 rounded-lg border border-border\">\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-medium text-foreground mb-1\">Informações sobre a Prioridade</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {priorities?.find(p => p?.id === formData?.priority)?.slaInfo || 'SLA padrão será aplicado conforme configuração do sistema.'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CategorizationSection;","size_bytes":4835},"attached_assets/Checkbox_1754603553648.jsx":{"content":"import React from \"react\";\nimport { Check, Minus } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Checkbox = React.forwardRef(({\n    className,\n    id,\n    checked,\n    indeterminate = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    size = \"default\",\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const checkboxId = id || `checkbox-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Size variants\n    const sizeClasses = {\n        sm: \"h-4 w-4\",\n        default: \"h-4 w-4\",\n        lg: \"h-5 w-5\"\n    };\n\n    return (\n        <div className={cn(\"flex items-start space-x-2\", className)}>\n            <div className=\"relative flex items-center\">\n                <input\n                    type=\"checkbox\"\n                    ref={ref}\n                    id={checkboxId}\n                    checked={checked}\n                    disabled={disabled}\n                    required={required}\n                    className=\"sr-only\"\n                    {...props}\n                />\n\n                <label\n                    htmlFor={checkboxId}\n                    className={cn(\n                        \"peer shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground cursor-pointer transition-colors\",\n                        sizeClasses?.[size],\n                        checked && \"bg-primary text-primary-foreground border-primary\",\n                        indeterminate && \"bg-primary text-primary-foreground border-primary\",\n                        error && \"border-destructive\",\n                        disabled && \"cursor-not-allowed opacity-50\"\n                    )}\n                >\n                    {checked && !indeterminate && (\n                        <Check className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                    {indeterminate && (\n                        <Minus className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                </label>\n            </div>\n            {(label || description || error) && (\n                <div className=\"flex-1 space-y-1\">\n                    {label && (\n                        <label\n                            htmlFor={checkboxId}\n                            className={cn(\n                                \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\",\n                                error ? \"text-destructive\" : \"text-foreground\"\n                            )}\n                        >\n                            {label}\n                            {required && <span className=\"text-destructive ml-1\">*</span>}\n                        </label>\n                    )}\n\n                    {description && !error && (\n                        <p className=\"text-sm text-muted-foreground\">\n                            {description}\n                        </p>\n                    )}\n\n                    {error && (\n                        <p className=\"text-sm text-destructive\">\n                            {error}\n                        </p>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nCheckbox.displayName = \"Checkbox\";\n\n// Checkbox Group component\nconst CheckboxGroup = React.forwardRef(({\n    className,\n    children,\n    label,\n    description,\n    error,\n    required = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    return (\n        <fieldset\n            ref={ref}\n            disabled={disabled}\n            className={cn(\"space-y-3\", className)}\n            {...props}\n        >\n            {label && (\n                <legend className={cn(\n                    \"text-sm font-medium\",\n                    error ? \"text-destructive\" : \"text-foreground\"\n                )}>\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </legend>\n            )}\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            <div className=\"space-y-2\">\n                {children}\n            </div>\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </fieldset>\n    );\n});\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n\nexport { Checkbox, CheckboxGroup };","size_bytes":4756},"attached_assets/CompanyBranding_1754603785405.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst CompanyBranding = ({ companyName = \"TicketFlow Pro\", showHealthIndicator = true }) => {\n  const currentYear = new Date()?.getFullYear();\n  \n  return (\n    <div className=\"text-center space-y-6\">\n      {/* Logo and Brand */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center justify-center w-16 h-16 bg-primary rounded-2xl shadow-enterprise-lg\">\n            <Icon name=\"Ticket\" size={32} color=\"white\" />\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h1 className=\"text-2xl font-bold text-foreground\">{companyName}</h1>\n          <p className=\"text-sm text-muted-foreground\">Sistema Empresarial de Gestão de Tickets</p>\n          <div className=\"flex items-center justify-center space-x-2 text-xs text-muted-foreground\">\n            <span>Edição Enterprise</span>\n            <span>•</span>\n            <span>v2.1.4</span>\n          </div>\n        </div>\n      </div>\n\n      {/* System Status Indicators */}\n      {showHealthIndicator && (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-center space-x-4 text-xs\">\n            {/* System Health */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-success rounded-full animate-pulse\"></div>\n              <span className=\"text-muted-foreground\">Sistema Online</span>\n            </div>\n            \n            {/* Security Status */}\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Shield\" size={12} className=\"text-success\" />\n              <span className=\"text-muted-foreground\">Seguro</span>\n            </div>\n            \n            {/* LDAP Integration */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-warning rounded-full\"></div>\n              <span className=\"text-muted-foreground\">LDAP Conectado</span>\n            </div>\n          </div>\n\n          {/* Last Update */}\n          <div className=\"text-xs text-muted-foreground\">\n            Última atualização: 07/08/2025 às 18:52\n          </div>\n        </div>\n      )}\n\n      {/* Security Features */}\n      <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n        <div className=\"flex items-center justify-center space-x-2\">\n          <Icon name=\"Lock\" size={14} className=\"text-primary\" />\n          <span className=\"text-xs font-medium text-foreground\">Acesso Seguro</span>\n        </div>\n        <div className=\"flex items-center justify-center space-x-4 text-xs text-muted-foreground\">\n          <span>• Criptografia JWT</span>\n          <span>• Auditoria Completa</span>\n          <span>• Multi-empresa</span>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"text-xs text-muted-foreground space-y-1\">\n        <p>© {currentYear} TicketFlow Pro. Todos os direitos reservados.</p>\n        <p>Desenvolvido para excelência em atendimento ao cliente</p>\n      </div>\n    </div>\n  );\n};\n\nexport default CompanyBranding;","size_bytes":3169},"attached_assets/DashboardToolbar_1754603794888.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst DashboardToolbar = ({ \n  selectedTickets, \n  onBulkAction, \n  searchQuery, \n  onSearchChange,\n  onRefresh,\n  onExport \n}) => {\n  const [showBulkActions, setShowBulkActions] = useState(false);\n\n  const bulkActions = [\n    { id: 'assign', label: 'Atribuir', icon: 'User' },\n    { id: 'priority', label: 'Alterar Prioridade', icon: 'AlertTriangle' },\n    { id: 'status', label: 'Alterar Status', icon: 'Activity' },\n    { id: 'close', label: 'Fechar Tickets', icon: 'X' }\n  ];\n\n  const handleBulkAction = (actionId) => {\n    onBulkAction(actionId, selectedTickets);\n    setShowBulkActions(false);\n  };\n\n  return (\n    <div className=\"bg-card border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Left Section - Search and Filters */}\n        <div className=\"flex items-center space-x-4 flex-1\">\n          <div className=\"relative max-w-md\">\n            <Input\n              type=\"search\"\n              placeholder=\"Buscar tickets por ID, assunto ou solicitante...\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e?.target?.value)}\n              className=\"pl-10\"\n            />\n            <Icon \n              name=\"Search\" \n              size={16} \n              className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" \n            />\n          </div>\n\n          {/* Advanced Search Toggle */}\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"Filter\">\n            Filtros Avançados\n          </Button>\n        </div>\n\n        {/* Center Section - Bulk Actions */}\n        {selectedTickets?.length > 0 && (\n          <div className=\"flex items-center space-x-2 mx-4\">\n            <span className=\"text-sm text-muted-foreground\">\n              {selectedTickets?.length} ticket{selectedTickets?.length > 1 ? 's' : ''} selecionado{selectedTickets?.length > 1 ? 's' : ''}\n            </span>\n            <div className=\"relative\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                iconName=\"MoreHorizontal\"\n                onClick={() => setShowBulkActions(!showBulkActions)}\n              >\n                Ações em Lote\n              </Button>\n              \n              {showBulkActions && (\n                <div className=\"absolute top-full right-0 mt-2 w-48 bg-popover border border-border rounded-lg shadow-enterprise-lg z-50\">\n                  <div className=\"py-2\">\n                    {bulkActions?.map((action) => (\n                      <button\n                        key={action?.id}\n                        onClick={() => handleBulkAction(action?.id)}\n                        className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-foreground hover:bg-muted transition-enterprise\"\n                      >\n                        <Icon name={action?.icon} size={16} />\n                        <span>{action?.label}</span>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Right Section - Actions */}\n        <div className=\"flex items-center space-x-2\">\n          {/* Quick Stats */}\n          <div className=\"hidden lg:flex items-center space-x-4 mr-4\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-foreground\">23</div>\n              <div className=\"text-xs text-muted-foreground\">Abertos</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-600\">15</div>\n              <div className=\"text-xs text-muted-foreground\">Em Andamento</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-red-600\">7</div>\n              <div className=\"text-xs text-muted-foreground\">SLA Crítico</div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <Button variant=\"ghost\" size=\"sm\" iconName=\"RefreshCw\" onClick={onRefresh}>\n            Atualizar\n          </Button>\n          \n          <Button variant=\"ghost\" size=\"sm\" iconName=\"Download\" onClick={onExport}>\n            Exportar\n          </Button>\n\n          <Button variant=\"default\" size=\"sm\" iconName=\"Plus\">\n            Novo Ticket\n          </Button>\n\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n            <Icon name=\"Bell\" size={18} />\n            <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\n          </Button>\n\n          {/* Settings */}\n          <Button variant=\"ghost\" size=\"icon\">\n            <Icon name=\"Settings\" size={18} />\n          </Button>\n        </div>\n      </div>\n      {/* Integration Status Bar */}\n      <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-border\">\n        <div className=\"flex items-center space-x-6\">\n          {/* System Status */}\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n            <span className=\"text-xs text-muted-foreground\">Sistema Online</span>\n          </div>\n\n          {/* Integration Status */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Mail\" size={14} className=\"text-green-600\" />\n              <span className=\"text-xs text-muted-foreground\">Email Sync</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Database\" size={14} className=\"text-green-600\" />\n              <span className=\"text-xs text-muted-foreground\">CRM Sync</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Webhook\" size={14} className=\"text-yellow-600\" />\n              <span className=\"text-xs text-muted-foreground\">API Limitado</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Real-time Updates */}\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-xs text-muted-foreground\">\n            Última atualização: {new Date()?.toLocaleTimeString('pt-BR')}\n          </span>\n        </div>\n      </div>\n      {/* Overlay for Bulk Actions Menu */}\n      {showBulkActions && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setShowBulkActions(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DashboardToolbar;","size_bytes":6830},"attached_assets/DescriptionEditor_1754604173018.jsx":{"content":"import React, { useState, useRef } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst DescriptionEditor = ({ \n  formData, \n  onFormChange, \n  errors, \n  templates \n}) => {\n  const [showTemplates, setShowTemplates] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const textareaRef = useRef(null);\n\n  const handleDescriptionChange = (value) => {\n    onFormChange('description', value);\n  };\n\n  const insertTemplate = (template) => {\n    const currentDescription = formData?.description || '';\n    const newDescription = currentDescription + (currentDescription ? '\\n\\n' : '') + template?.content;\n    handleDescriptionChange(newDescription);\n    setShowTemplates(false);\n  };\n\n  const formatText = (format) => {\n    const textarea = textareaRef?.current;\n    if (!textarea) return;\n\n    const start = textarea?.selectionStart;\n    const end = textarea?.selectionEnd;\n    const selectedText = textarea?.value?.substring(start, end);\n    const beforeText = textarea?.value?.substring(0, start);\n    const afterText = textarea?.value?.substring(end);\n\n    let formattedText = selectedText;\n    \n    switch (format) {\n      case 'bold':\n        formattedText = `**${selectedText}**`;\n        break;\n      case 'italic':\n        formattedText = `*${selectedText}*`;\n        break;\n      case 'list':\n        formattedText = selectedText?.split('\\n')?.map(line => `• ${line}`)?.join('\\n');\n        break;\n      case 'code':\n        formattedText = `\\`${selectedText}\\``;\n        break;\n      default:\n        break;\n    }\n\n    const newValue = beforeText + formattedText + afterText;\n    handleDescriptionChange(newValue);\n    \n    // Restore focus and selection\n    setTimeout(() => {\n      textarea?.focus();\n      textarea?.setSelectionRange(start, start + formattedText?.length);\n    }, 0);\n  };\n\n  const insertCurrentDateTime = () => {\n    const now = new Date();\n    const dateTime = now?.toLocaleString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    const currentDescription = formData?.description || '';\n    const newDescription = currentDescription + (currentDescription ? '\\n\\n' : '') + `[${dateTime}] `;\n    handleDescriptionChange(newDescription);\n  };\n\n  return (\n    <div className={`bg-card rounded-lg border border-border shadow-enterprise ${isFullscreen ? 'fixed inset-4 z-50' : 'p-6'}`}>\n      <div className=\"flex items-center justify-between mb-6 p-6 pb-0\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center justify-center w-10 h-10 bg-success/10 rounded-lg\">\n            <Icon name=\"FileText\" size={20} className=\"text-success\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">Descrição do Problema</h2>\n            <p className=\"text-sm text-muted-foreground\">Descreva detalhadamente o problema ou solicitação</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowTemplates(!showTemplates)}\n            iconName=\"FileTemplate\"\n            iconPosition=\"left\"\n            iconSize={16}\n          >\n            Templates\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsFullscreen(!isFullscreen)}\n          >\n            <Icon name={isFullscreen ? \"Minimize2\" : \"Maximize2\"} size={16} />\n          </Button>\n        </div>\n      </div>\n      <div className=\"px-6 pb-6\">\n        {/* Formatting Toolbar */}\n        <div className=\"flex items-center space-x-2 p-3 bg-muted/50 rounded-t-lg border border-b-0 border-border\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('bold')}\n            iconName=\"Bold\"\n            iconSize={16}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('italic')}\n            iconName=\"Italic\"\n            iconSize={16}\n          />\n          <div className=\"w-px h-6 bg-border\"></div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('list')}\n            iconName=\"List\"\n            iconSize={16}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('code')}\n            iconName=\"Code\"\n            iconSize={16}\n          />\n          <div className=\"w-px h-6 bg-border\"></div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={insertCurrentDateTime}\n            iconName=\"Clock\"\n            iconSize={16}\n          />\n        </div>\n\n        {/* Templates Dropdown */}\n        {showTemplates && (\n          <div className=\"absolute z-10 mt-1 w-80 bg-popover border border-border rounded-lg shadow-enterprise-lg\">\n            <div className=\"p-4\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">Templates Disponíveis</h4>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {templates?.map((template) => (\n                  <button\n                    key={template?.id}\n                    onClick={() => insertTemplate(template)}\n                    className=\"w-full text-left p-3 rounded-lg hover:bg-muted transition-enterprise\"\n                  >\n                    <div className=\"font-medium text-sm text-foreground\">{template?.name}</div>\n                    <div className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">{template?.description}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Text Editor */}\n        <div className=\"relative\">\n          <textarea\n            ref={textareaRef}\n            value={formData?.description || ''}\n            onChange={(e) => handleDescriptionChange(e?.target?.value)}\n            placeholder=\"Descreva detalhadamente o problema, incluindo:\\n• Passos para reproduzir o erro\\n• Mensagens de erro (se houver)\\n• Impacto no trabalho\\n• Tentativas de solução já realizadas\"\n            className={`w-full border border-t-0 border-border rounded-b-lg p-4 text-sm text-foreground bg-input placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none ${\n              isFullscreen ? 'h-96' : 'h-48'\n            } ${errors?.description ? 'border-error' : ''}`}\n            required\n          />\n          \n          {/* Character Counter */}\n          <div className=\"absolute bottom-3 right-3 text-xs text-muted-foreground bg-background/80 px-2 py-1 rounded\">\n            {(formData?.description || '')?.length} caracteres\n          </div>\n        </div>\n\n        {errors?.description && (\n          <p className=\"text-sm text-error mt-2\">{errors?.description}</p>\n        )}\n\n        {/* Description Guidelines */}\n        <div className=\"mt-4 p-4 bg-muted/50 rounded-lg border border-border\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"Lightbulb\" size={16} className=\"text-accent mt-0.5\" />\n            <div>\n              <h4 className=\"text-sm font-medium text-foreground mb-2\">Dicas para uma boa descrição:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Seja específico sobre o problema ou necessidade</li>\n                <li>• Inclua capturas de tela quando relevante</li>\n                <li>• Mencione quando o problema começou</li>\n                <li>• Descreva o impacto no seu trabalho</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DescriptionEditor;","size_bytes":7947},"attached_assets/ErrorBoundary_1754603553647.jsx":{"content":"import React from \"react\";\nimport Icon from \"./AppIcon\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    error.__ErrorBoundary = true;\n    window.__COMPONENT_ERROR__?.(error, errorInfo);\n    // console.log(\"Error caught by ErrorBoundary:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state?.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-neutral-50\">\n          <div className=\"text-center p-8 max-w-md\">\n            <div className=\"flex justify-center items-center mb-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42px\" height=\"42px\" viewBox=\"0 0 32 33\" fill=\"none\">\n                <path d=\"M16 28.5C22.6274 28.5 28 23.1274 28 16.5C28 9.87258 22.6274 4.5 16 4.5C9.37258 4.5 4 9.87258 4 16.5C4 23.1274 9.37258 28.5 16 28.5Z\" stroke=\"#343330\" strokeWidth=\"2\" strokeMiterlimit=\"10\" />\n                <path d=\"M11.5 15.5C12.3284 15.5 13 14.8284 13 14C13 13.1716 12.3284 12.5 11.5 12.5C10.6716 12.5 10 13.1716 10 14C10 14.8284 10.6716 15.5 11.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M20.5 15.5C21.3284 15.5 22 14.8284 22 14C22 13.1716 21.3284 12.5 20.5 12.5C19.6716 12.5 19 13.1716 19 14C19 14.8284 19.6716 15.5 20.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M21 22.5C19.9625 20.7062 18.2213 19.5 16 19.5C13.7787 19.5 12.0375 20.7062 11 22.5\" stroke=\"#343330\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </div>\n            <div className=\"flex flex-col gap-1 text-center\">\n              <h1 className=\"text-2xl font-medium text-neutral-800\">Something went wrong</h1>\n              <p className=\"text-neutral-600 text-base w w-8/12 mx-auto\">We encountered an unexpected error while processing your request.</p>\n            </div>\n            <div className=\"flex justify-center items-center mt-6\">\n              <button\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded flex items-center gap-2 transition-colors duration-200 shadow-sm\"\n              >\n                <Icon name=\"ArrowLeft\" size={18} color=\"#fff\" />\n                Back\n              </button>\n            </div>\n          </div >\n        </div >\n      );\n    }\n\n    return this.props?.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":2599},"attached_assets/EscalationQueue_1754603788535.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst EscalationQueue = ({ escalations, onEscalate, onDismiss }) => {\n  const getPriorityIcon = (priority) => {\n    switch (priority) {\n      case 'Crítica': return 'AlertTriangle';\n      case 'Alta': return 'AlertCircle';\n      case 'Média': return 'Info';\n      default: return 'Circle';\n    }\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'Crítica': return 'text-error';\n      case 'Alta': return 'text-warning';\n      case 'Média': return 'text-primary';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const formatTimeAgo = (minutes) => {\n    if (minutes < 60) return `${minutes}m atrás`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h atrás`;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise\">\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-foreground flex items-center space-x-2\">\n            <Icon name=\"TrendingUp\" size={18} className=\"text-warning\" />\n            <span>Fila de Escalação</span>\n          </h3>\n          <span className=\"text-sm text-muted-foreground\">\n            {escalations?.length} pendentes\n          </span>\n        </div>\n      </div>\n      <div className=\"max-h-96 overflow-y-auto\">\n        {escalations?.length === 0 ? (\n          <div className=\"p-6 text-center\">\n            <Icon name=\"CheckCircle\" size={32} className=\"text-success mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Nenhuma escalação pendente\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-border\">\n            {escalations?.map((escalation) => (\n              <div key={escalation?.id} className=\"p-4 hover:bg-muted/50 transition-colors\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon \n                      name={getPriorityIcon(escalation?.priority)} \n                      size={16} \n                      className={getPriorityColor(escalation?.priority)} \n                    />\n                    <span className=\"text-sm font-medium text-foreground\">\n                      #{escalation?.ticketId}\n                    </span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatTimeAgo(escalation?.timeOverdue)}\n                  </span>\n                </div>\n\n                <h4 className=\"text-sm font-medium text-foreground mb-1 line-clamp-1\">\n                  {escalation?.subject}\n                </h4>\n\n                <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mb-3\">\n                  <span>Cliente: {escalation?.client}</span>\n                  <span>•</span>\n                  <span>Responsável: {escalation?.responsible}</span>\n                </div>\n\n                <div className=\"bg-error/10 border border-error/20 rounded-md p-2 mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"AlertTriangle\" size={14} className=\"text-error\" />\n                    <span className=\"text-xs font-medium text-error\">\n                      SLA Violado há {formatTimeAgo(escalation?.violationTime)}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-error/80 mt-1\">\n                    {escalation?.reason}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onEscalate(escalation?.id)}\n                      iconName=\"ArrowUp\"\n                      iconPosition=\"left\"\n                      iconSize={12}\n                      className=\"text-warning hover:text-warning\"\n                    >\n                      Escalar\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onDismiss(escalation?.id)}\n                      iconName=\"X\"\n                      iconSize={12}\n                      className=\"text-muted-foreground hover:text-foreground\"\n                    >\n                      Dispensar\n                    </Button>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"ExternalLink\"\n                    iconSize={12}\n                    className=\"text-primary hover:text-primary\"\n                  >\n                    Ver Ticket\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EscalationQueue;","size_bytes":5180},"attached_assets/FileAttachmentZone_1754604173018.jsx":{"content":"import React, { useState, useRef } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst FileAttachmentZone = ({ \n  formData, \n  onFormChange, \n  errors \n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const fileInputRef = useRef(null);\n\n  const maxFileSize = 10 * 1024 * 1024; // 10MB\n  const allowedTypes = [\n    'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/plain',\n    'application/zip',\n    'application/x-rar-compressed'\n  ];\n\n  const handleFileSelect = (files) => {\n    const fileArray = Array.from(files);\n    const validFiles = [];\n    const errors = [];\n\n    fileArray?.forEach(file => {\n      if (file?.size > maxFileSize) {\n        errors?.push(`${file?.name}: Arquivo muito grande (máximo 10MB)`);\n        return;\n      }\n\n      if (!allowedTypes?.includes(file?.type)) {\n        errors?.push(`${file?.name}: Tipo de arquivo não permitido`);\n        return;\n      }\n\n      validFiles?.push({\n        id: Date.now() + Math.random(),\n        file: file,\n        name: file?.name,\n        size: file?.size,\n        type: file?.type,\n        uploadStatus: 'pending'\n      });\n    });\n\n    if (errors?.length > 0) {\n      alert('Alguns arquivos não puderam ser adicionados:\\n' + errors?.join('\\n'));\n    }\n\n    if (validFiles?.length > 0) {\n      const currentAttachments = formData?.attachments || [];\n      const newAttachments = [...currentAttachments, ...validFiles];\n      onFormChange('attachments', newAttachments);\n      \n      // Simulate upload progress\n      validFiles?.forEach(file => {\n        simulateUpload(file?.id);\n      });\n    }\n  };\n\n  const simulateUpload = (fileId) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 30;\n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Update file status to completed\n        const currentAttachments = formData?.attachments || [];\n        const updatedAttachments = currentAttachments?.map(att => \n          att?.id === fileId ? { ...att, uploadStatus: 'completed' } : att\n        );\n        onFormChange('attachments', updatedAttachments);\n      }\n      \n      setUploadProgress(prev => ({ ...prev, [fileId]: progress }));\n    }, 200);\n  };\n\n  const removeFile = (fileId) => {\n    const currentAttachments = formData?.attachments || [];\n    const updatedAttachments = currentAttachments?.filter(att => att?.id !== fileId);\n    onFormChange('attachments', updatedAttachments);\n    \n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress?.[fileId];\n      return newProgress;\n    });\n  };\n\n  const handleDragOver = (e) => {\n    e?.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e?.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e) => {\n    e?.preventDefault();\n    setIsDragOver(false);\n    const files = e?.dataTransfer?.files;\n    handleFileSelect(files);\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i))?.toFixed(2)) + ' ' + sizes?.[i];\n  };\n\n  const getFileIcon = (fileType) => {\n    if (fileType?.startsWith('image/')) return 'Image';\n    if (fileType === 'application/pdf') return 'FileText';\n    if (fileType?.includes('word')) return 'FileText';\n    if (fileType?.includes('excel') || fileType?.includes('sheet')) return 'FileSpreadsheet';\n    if (fileType?.includes('zip') || fileType?.includes('rar')) return 'Archive';\n    return 'File';\n  };\n\n  const attachments = formData?.attachments || [];\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6 shadow-enterprise\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-warning/10 rounded-lg\">\n          <Icon name=\"Paperclip\" size={20} className=\"text-warning\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Anexos</h2>\n          <p className=\"text-sm text-muted-foreground\">Adicione capturas de tela, documentos ou outros arquivos relevantes</p>\n        </div>\n      </div>\n      {/* Upload Zone */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-8 text-center transition-enterprise cursor-pointer ${\n          isDragOver \n            ? 'border-primary bg-primary/5' :'border-border hover:border-primary/50 hover:bg-muted/50'\n        }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef?.current?.click()}\n      >\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"flex items-center justify-center w-16 h-16 bg-muted rounded-full\">\n            <Icon name=\"Upload\" size={24} className=\"text-muted-foreground\" />\n          </div>\n          \n          <div>\n            <p className=\"text-sm font-medium text-foreground mb-1\">\n              Clique para selecionar ou arraste arquivos aqui\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Máximo 10MB por arquivo • PDF, DOC, XLS, imagens, ZIP\n            </p>\n          </div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"FolderOpen\"\n            iconPosition=\"left\"\n            iconSize={16}\n          >\n            Selecionar Arquivos\n          </Button>\n        </div>\n      </div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept=\".jpg,.jpeg,.png,.gif,.webp,.pdf,.doc,.docx,.xls,.xlsx,.txt,.zip,.rar\"\n        onChange={(e) => handleFileSelect(e?.target?.files)}\n        className=\"hidden\"\n      />\n      {/* File List */}\n      {attachments?.length > 0 && (\n        <div className=\"mt-6 space-y-3\">\n          <h4 className=\"text-sm font-medium text-foreground\">Arquivos Anexados ({attachments?.length})</h4>\n          \n          <div className=\"space-y-2\">\n            {attachments?.map((attachment) => (\n              <div key={attachment?.id} className=\"flex items-center space-x-3 p-3 bg-muted/50 rounded-lg border border-border\">\n                <div className=\"flex items-center justify-center w-10 h-10 bg-background rounded-lg\">\n                  <Icon name={getFileIcon(attachment?.type)} size={16} className=\"text-muted-foreground\" />\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground truncate\">{attachment?.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{formatFileSize(attachment?.size)}</p>\n                  \n                  {attachment?.uploadStatus === 'pending' && uploadProgress?.[attachment?.id] !== undefined && (\n                    <div className=\"mt-2\">\n                      <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-1\">\n                        <span>Enviando...</span>\n                        <span>{Math.round(uploadProgress?.[attachment?.id])}%</span>\n                      </div>\n                      <div className=\"w-full bg-border rounded-full h-1.5\">\n                        <div \n                          className=\"bg-primary h-1.5 rounded-full transition-all duration-300\"\n                          style={{ width: `${uploadProgress?.[attachment?.id]}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {attachment?.uploadStatus === 'completed' && (\n                    <div className=\"flex items-center space-x-1 mt-1\">\n                      <Icon name=\"CheckCircle\" size={12} className=\"text-success\" />\n                      <span className=\"text-xs text-success\">Enviado com sucesso</span>\n                    </div>\n                  )}\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => removeFile(attachment?.id)}\n                  className=\"text-error hover:text-error hover:bg-error/10\"\n                >\n                  <Icon name=\"Trash2\" size={16} />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {/* File Guidelines */}\n      <div className=\"mt-6 p-4 bg-muted/50 rounded-lg border border-border\">\n        <div className=\"flex items-start space-x-3\">\n          <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n          <div>\n            <h4 className=\"text-sm font-medium text-foreground mb-2\">Diretrizes para Anexos:</h4>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Capturas de tela ajudam a identificar problemas visuais</li>\n              <li>• Logs de erro facilitam o diagnóstico técnico</li>\n              <li>• Documentos relacionados ao processo em questão</li>\n              <li>• Evite anexar informações confidenciais desnecessárias</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      {errors?.attachments && (\n        <p className=\"text-sm text-error mt-4\">{errors?.attachments}</p>\n      )}\n    </div>\n  );\n};\n\nexport default FileAttachmentZone;","size_bytes":9788},"attached_assets/FilterPanel_1754604173019.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst FilterPanel = ({ filters, onFiltersChange, onSavePreset, savedPresets, onLoadPreset }) => {\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [presetName, setPresetName] = useState('');\n  const [showSavePreset, setShowSavePreset] = useState(false);\n\n  const statusOptions = [\n    { value: '', label: 'Todos os Status' },\n    { value: 'Ativo', label: 'Ativo' },\n    { value: 'Inativo', label: 'Inativo' },\n    { value: 'Suspenso', label: 'Suspenso' },\n    { value: 'Pendente', label: 'Pendente' }\n  ];\n\n  const departmentOptions = [\n    { value: '', label: 'Todos os Departamentos' },\n    { value: 'TI', label: 'Tecnologia da Informação' },\n    { value: 'Suporte', label: 'Suporte Técnico' },\n    { value: 'Vendas', label: 'Vendas' },\n    { value: 'Marketing', label: 'Marketing' },\n    { value: 'RH', label: 'Recursos Humanos' },\n    { value: 'Financeiro', label: 'Financeiro' }\n  ];\n\n  const roleOptions = [\n    { value: '', label: 'Todas as Funções' },\n    { value: 'Administrador', label: 'Administrador' },\n    { value: 'Supervisor', label: 'Supervisor' },\n    { value: 'Atendente', label: 'Atendente' },\n    { value: 'Usuário', label: 'Usuário' }\n  ];\n\n  const activityOptions = [\n    { value: '', label: 'Qualquer Período' },\n    { value: 'today', label: 'Hoje' },\n    { value: 'week', label: 'Última Semana' },\n    { value: 'month', label: 'Último Mês' },\n    { value: 'quarter', label: 'Último Trimestre' },\n    { value: 'never', label: 'Nunca Acessou' }\n  ];\n\n  const handleFilterChange = (key, value) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value\n    });\n  };\n\n  const handleClearFilters = () => {\n    onFiltersChange({\n      search: '',\n      status: '',\n      department: '',\n      role: '',\n      activity: '',\n      dateFrom: '',\n      dateTo: '',\n      hasAvatar: false,\n      hasSignature: false,\n      ldapSync: false\n    });\n  };\n\n  const handleSavePreset = () => {\n    if (presetName?.trim()) {\n      onSavePreset(presetName, filters);\n      setPresetName('');\n      setShowSavePreset(false);\n    }\n  };\n\n  const getActiveFiltersCount = () => {\n    return Object.values(filters)?.filter(value => \n      value !== '' && value !== false\n    )?.length;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Filter\" size={16} />\n          <h3 className=\"text-sm font-semibold text-foreground\">Filtros</h3>\n          {getActiveFiltersCount() > 0 && (\n            <span className=\"px-2 py-1 text-xs bg-primary text-primary-foreground rounded-full\">\n              {getActiveFiltersCount()}\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"xs\"\n            onClick={() => setShowAdvanced(!showAdvanced)}\n            iconName={showAdvanced ? 'ChevronUp' : 'ChevronDown'}\n            iconPosition=\"right\"\n          >\n            Avançado\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"xs\"\n            onClick={handleClearFilters}\n            iconName=\"X\"\n            iconPosition=\"left\"\n          >\n            Limpar\n          </Button>\n        </div>\n      </div>\n      {/* Basic Filters */}\n      <div className=\"p-4 space-y-4\">\n        <Input\n          label=\"Buscar Usuários\"\n          type=\"search\"\n          placeholder=\"Nome, email ou ID...\"\n          value={filters?.search || ''}\n          onChange={(e) => handleFilterChange('search', e?.target?.value)}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Select\n            label=\"Status\"\n            options={statusOptions}\n            value={filters?.status || ''}\n            onChange={(value) => handleFilterChange('status', value)}\n          />\n          <Select\n            label=\"Departamento\"\n            options={departmentOptions}\n            value={filters?.department || ''}\n            onChange={(value) => handleFilterChange('department', value)}\n            searchable\n          />\n          <Select\n            label=\"Função\"\n            options={roleOptions}\n            value={filters?.role || ''}\n            onChange={(value) => handleFilterChange('role', value)}\n          />\n        </div>\n\n        {/* Advanced Filters */}\n        {showAdvanced && (\n          <div className=\"space-y-4 pt-4 border-t border-border\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Select\n                label=\"Última Atividade\"\n                options={activityOptions}\n                value={filters?.activity || ''}\n                onChange={(value) => handleFilterChange('activity', value)}\n              />\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-foreground\">Período Personalizado</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Input\n                    type=\"date\"\n                    placeholder=\"Data inicial\"\n                    value={filters?.dateFrom || ''}\n                    onChange={(e) => handleFilterChange('dateFrom', e?.target?.value)}\n                  />\n                  <Input\n                    type=\"date\"\n                    placeholder=\"Data final\"\n                    value={filters?.dateTo || ''}\n                    onChange={(e) => handleFilterChange('dateTo', e?.target?.value)}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-foreground\">Filtros Adicionais</label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                <Checkbox\n                  label=\"Possui Foto\"\n                  checked={filters?.hasAvatar || false}\n                  onChange={(e) => handleFilterChange('hasAvatar', e?.target?.checked)}\n                />\n                <Checkbox\n                  label=\"Possui Assinatura\"\n                  checked={filters?.hasSignature || false}\n                  onChange={(e) => handleFilterChange('hasSignature', e?.target?.checked)}\n                />\n                <Checkbox\n                  label=\"Sincronizado LDAP\"\n                  checked={filters?.ldapSync || false}\n                  onChange={(e) => handleFilterChange('ldapSync', e?.target?.checked)}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Saved Presets */}\n        <div className=\"space-y-3 pt-4 border-t border-border\">\n          <div className=\"flex items-center justify-between\">\n            <label className=\"text-sm font-medium text-foreground\">Filtros Salvos</label>\n            <Button\n              variant=\"outline\"\n              size=\"xs\"\n              onClick={() => setShowSavePreset(!showSavePreset)}\n              iconName=\"Save\"\n              iconPosition=\"left\"\n            >\n              Salvar Atual\n            </Button>\n          </div>\n\n          {showSavePreset && (\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Nome do filtro...\"\n                value={presetName}\n                onChange={(e) => setPresetName(e?.target?.value)}\n                className=\"flex-1\"\n              />\n              <Button\n                variant=\"default\"\n                size=\"xs\"\n                onClick={handleSavePreset}\n                disabled={!presetName?.trim()}\n              >\n                Salvar\n              </Button>\n            </div>\n          )}\n\n          <div className=\"flex flex-wrap gap-2\">\n            {savedPresets?.map((preset) => (\n              <button\n                key={preset?.id}\n                onClick={() => onLoadPreset(preset)}\n                className=\"flex items-center space-x-1 px-3 py-1 text-xs bg-muted hover:bg-muted/80 rounded-full transition-enterprise\"\n              >\n                <Icon name=\"Filter\" size={12} />\n                <span>{preset?.name}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterPanel;","size_bytes":8678},"attached_assets/FilterSidebar_1754603675755.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst FilterSidebar = ({ \n  isOpen, \n  onClose, \n  filters, \n  onFiltersChange, \n  onClearFilters,\n  ticketCounts \n}) => {\n  const [localFilters, setLocalFilters] = useState(filters);\n\n  const handleFilterChange = (key, value) => {\n    const newFilters = { ...localFilters, [key]: value };\n    setLocalFilters(newFilters);\n    onFiltersChange(newFilters);\n  };\n\n  const handleArrayFilterChange = (key, value, checked) => {\n    const currentArray = localFilters?.[key] || [];\n    const newArray = checked \n      ? [...currentArray, value]\n      : currentArray?.filter(item => item !== value);\n    \n    handleFilterChange(key, newArray);\n  };\n\n  const priorityOptions = [\n    { value: 'Critical', label: 'Crítica', count: ticketCounts?.priority?.Critical || 0 },\n    { value: 'High', label: 'Alta', count: ticketCounts?.priority?.High || 0 },\n    { value: 'Medium', label: 'Média', count: ticketCounts?.priority?.Medium || 0 },\n    { value: 'Low', label: 'Baixa', count: ticketCounts?.priority?.Low || 0 }\n  ];\n\n  const statusOptions = [\n    { value: 'todo', label: 'A Fazer', count: ticketCounts?.status?.todo || 0 },\n    { value: 'attending', label: 'Em Atendimento', count: ticketCounts?.status?.attending || 0 },\n    { value: 'paused', label: 'Pausado', count: ticketCounts?.status?.paused || 0 },\n    { value: 'completed', label: 'Concluído', count: ticketCounts?.status?.completed || 0 }\n  ];\n\n  const agentOptions = [\n    { value: 'ana.silva', label: 'Ana Silva', count: ticketCounts?.agent?.['ana.silva'] || 0 },\n    { value: 'carlos.santos', label: 'Carlos Santos', count: ticketCounts?.agent?.['carlos.santos'] || 0 },\n    { value: 'maria.oliveira', label: 'Maria Oliveira', count: ticketCounts?.agent?.['maria.oliveira'] || 0 },\n    { value: 'joao.ferreira', label: 'João Ferreira', count: ticketCounts?.agent?.['joao.ferreira'] || 0 }\n  ];\n\n  const categoryOptions = [\n    { value: 'technical', label: 'Técnico', count: ticketCounts?.category?.technical || 0 },\n    { value: 'billing', label: 'Financeiro', count: ticketCounts?.category?.billing || 0 },\n    { value: 'general', label: 'Geral', count: ticketCounts?.category?.general || 0 },\n    { value: 'feature', label: 'Funcionalidade', count: ticketCounts?.category?.feature || 0 }\n  ];\n\n  const slaStatusOptions = [\n    { value: 'critical', label: 'SLA Crítico (>90%)', count: ticketCounts?.sla?.critical || 0 },\n    { value: 'warning', label: 'SLA Atenção (70-90%)', count: ticketCounts?.sla?.warning || 0 },\n    { value: 'normal', label: 'SLA Normal (<70%)', count: ticketCounts?.sla?.normal || 0 }\n  ];\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      {/* Sidebar */}\n      <div className={`\n        fixed top-0 right-0 h-full w-80 bg-card border-l border-border shadow-enterprise-lg z-50\n        transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : 'translate-x-full'}\n        lg:relative lg:translate-x-0 lg:w-72\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Filter\" size={20} className=\"text-foreground\" />\n              <h2 className=\"text-lg font-semibold text-foreground\">Filtros Avançados</h2>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              iconName=\"X\"\n              iconSize={16}\n              onClick={onClose}\n              className=\"lg:hidden\"\n            />\n          </div>\n\n          {/* Filters Content */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n            {/* Search */}\n            <div>\n              <Input\n                label=\"Buscar Tickets\"\n                type=\"search\"\n                placeholder=\"ID, assunto, solicitante...\"\n                value={localFilters?.search || ''}\n                onChange={(e) => handleFilterChange('search', e?.target?.value)}\n                className=\"mb-2\"\n              />\n            </div>\n\n            {/* Priority Filter */}\n            <div>\n              <h3 className=\"font-medium text-foreground mb-3\">Prioridade</h3>\n              <div className=\"space-y-2\">\n                {priorityOptions?.map((option) => (\n                  <div key={option?.value} className=\"flex items-center justify-between\">\n                    <Checkbox\n                      label={option?.label}\n                      checked={(localFilters?.priorities || [])?.includes(option?.value)}\n                      onChange={(e) => handleArrayFilterChange('priorities', option?.value, e?.target?.checked)}\n                    />\n                    <span className=\"text-sm text-muted-foreground bg-muted px-2 py-1 rounded\">\n                      {option?.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Status Filter */}\n            <div>\n              <h3 className=\"font-medium text-foreground mb-3\">Status</h3>\n              <div className=\"space-y-2\">\n                {statusOptions?.map((option) => (\n                  <div key={option?.value} className=\"flex items-center justify-between\">\n                    <Checkbox\n                      label={option?.label}\n                      checked={(localFilters?.statuses || [])?.includes(option?.value)}\n                      onChange={(e) => handleArrayFilterChange('statuses', option?.value, e?.target?.checked)}\n                    />\n                    <span className=\"text-sm text-muted-foreground bg-muted px-2 py-1 rounded\">\n                      {option?.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Agent Filter */}\n            <div>\n              <h3 className=\"font-medium text-foreground mb-3\">Agente Responsável</h3>\n              <div className=\"space-y-2\">\n                {agentOptions?.map((option) => (\n                  <div key={option?.value} className=\"flex items-center justify-between\">\n                    <Checkbox\n                      label={option?.label}\n                      checked={(localFilters?.agents || [])?.includes(option?.value)}\n                      onChange={(e) => handleArrayFilterChange('agents', option?.value, e?.target?.checked)}\n                    />\n                    <span className=\"text-sm text-muted-foreground bg-muted px-2 py-1 rounded\">\n                      {option?.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Category Filter */}\n            <div>\n              <h3 className=\"font-medium text-foreground mb-3\">Categoria</h3>\n              <div className=\"space-y-2\">\n                {categoryOptions?.map((option) => (\n                  <div key={option?.value} className=\"flex items-center justify-between\">\n                    <Checkbox\n                      label={option?.label}\n                      checked={(localFilters?.categories || [])?.includes(option?.value)}\n                      onChange={(e) => handleArrayFilterChange('categories', option?.value, e?.target?.checked)}\n                    />\n                    <span className=\"text-sm text-muted-foreground bg-muted px-2 py-1 rounded\">\n                      {option?.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* SLA Status Filter */}\n            <div>\n              <h3 className=\"font-medium text-foreground mb-3\">Status SLA</h3>\n              <div className=\"space-y-2\">\n                {slaStatusOptions?.map((option) => (\n                  <div key={option?.value} className=\"flex items-center justify-between\">\n                    <Checkbox\n                      label={option?.label}\n                      checked={(localFilters?.slaStatuses || [])?.includes(option?.value)}\n                      onChange={(e) => handleArrayFilterChange('slaStatuses', option?.value, e?.target?.checked)}\n                    />\n                    <span className=\"text-sm text-muted-foreground bg-muted px-2 py-1 rounded\">\n                      {option?.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Date Range */}\n            <div>\n              <h3 className=\"font-medium text-foreground mb-3\">Período</h3>\n              <div className=\"space-y-3\">\n                <Input\n                  label=\"Data Inicial\"\n                  type=\"date\"\n                  value={localFilters?.startDate || ''}\n                  onChange={(e) => handleFilterChange('startDate', e?.target?.value)}\n                />\n                <Input\n                  label=\"Data Final\"\n                  type=\"date\"\n                  value={localFilters?.endDate || ''}\n                  onChange={(e) => handleFilterChange('endDate', e?.target?.value)}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border space-y-2\">\n            <Button\n              variant=\"outline\"\n              fullWidth\n              iconName=\"RotateCcw\"\n              iconPosition=\"left\"\n              iconSize={16}\n              onClick={onClearFilters}\n            >\n              Limpar Filtros\n            </Button>\n            <Button\n              variant=\"default\"\n              fullWidth\n              iconName=\"Filter\"\n              iconPosition=\"left\"\n              iconSize={16}\n              onClick={onClose}\n              className=\"lg:hidden\"\n            >\n              Aplicar Filtros\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FilterSidebar;","size_bytes":10266},"attached_assets/FilterSidebar_1754603794889.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst FilterSidebar = ({ isCollapsed, onToggleCollapse, filters, onFilterChange }) => {\n  const [expandedSections, setExpandedSections] = useState({\n    status: true,\n    priority: true,\n    sla: true,\n    assignment: false\n  });\n\n  const toggleSection = (section) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev?.[section]\n    }));\n  };\n\n  const statusOptions = [\n    { id: 'todo', label: 'A Fazer', count: 23, color: 'bg-gray-500' },\n    { id: 'attending', label: 'Atendendo', count: 15, color: 'bg-blue-500' },\n    { id: 'paused', label: 'Pausado', count: 8, color: 'bg-yellow-500' },\n    { id: 'completed', label: 'Concluído', count: 42, color: 'bg-green-500' }\n  ];\n\n  const priorityOptions = [\n    { id: 'critical', label: 'Crítica', count: 5, color: 'bg-red-600' },\n    { id: 'high', label: 'Alta', count: 12, color: 'bg-orange-500' },\n    { id: 'medium', label: 'Média', count: 28, color: 'bg-yellow-500' },\n    { id: 'low', label: 'Baixa', count: 43, color: 'bg-green-500' }\n  ];\n\n  const slaOptions = [\n    { id: 'violation', label: 'Violação SLA', count: 7, color: 'bg-red-500' },\n    { id: 'warning', label: 'Alerta SLA', count: 12, color: 'bg-yellow-500' },\n    { id: 'normal', label: 'Normal', count: 69, color: 'bg-green-500' }\n  ];\n\n  const savedPresets = [\n    { id: 'my-tickets', label: 'Meus Tickets', count: 18 },\n    { id: 'urgent', label: 'Urgentes', count: 9 },\n    { id: 'overdue', label: 'Atrasados', count: 5 }\n  ];\n\n  const FilterSection = ({ title, icon, sectionKey, options, type = 'checkbox' }) => {\n    const isExpanded = expandedSections?.[sectionKey];\n    \n    return (\n      <div className=\"border-b border-border pb-4 mb-4\">\n        <button\n          onClick={() => toggleSection(sectionKey)}\n          className=\"flex items-center justify-between w-full p-2 text-sm font-medium text-foreground hover:bg-muted rounded-lg transition-enterprise\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <Icon name={icon} size={16} />\n            {!isCollapsed && <span>{title}</span>}\n          </div>\n          {!isCollapsed && (\n            <Icon \n              name={isExpanded ? \"ChevronDown\" : \"ChevronRight\"} \n              size={14} \n              className=\"transition-transform\"\n            />\n          )}\n        </button>\n        {isExpanded && !isCollapsed && (\n          <div className=\"mt-2 space-y-2 pl-6\">\n            {options?.map((option) => (\n              <div key={option?.id} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    checked={filters?.[sectionKey]?.includes(option?.id) || false}\n                    onChange={(e) => onFilterChange(sectionKey, option?.id, e?.target?.checked)}\n                  />\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${option?.color}`}></div>\n                    <span className=\"text-xs text-foreground\">{option?.label}</span>\n                  </div>\n                </div>\n                <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded-full\">\n                  {option?.count}\n                </span>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-card border-r border-border h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          {!isCollapsed && (\n            <h2 className=\"text-lg font-semibold text-foreground\">Filtros</h2>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onToggleCollapse}\n            className=\"transition-enterprise\"\n          >\n            <Icon name={isCollapsed ? \"ChevronRight\" : \"ChevronLeft\"} size={16} />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {!isCollapsed && (\n          <>\n            {/* Saved Presets */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-sm font-medium text-foreground mb-3\">Filtros Salvos</h3>\n              <div className=\"space-y-2\">\n                {savedPresets?.map((preset) => (\n                  <button\n                    key={preset?.id}\n                    className=\"flex items-center justify-between w-full p-2 text-sm text-foreground hover:bg-muted rounded-lg transition-enterprise\"\n                  >\n                    <span className=\"truncate\">{preset?.label}</span>\n                    <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded-full flex-shrink-0\">\n                      {preset?.count}\n                    </span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Filter Sections */}\n            <FilterSection\n              title=\"Status\"\n              icon=\"Activity\"\n              sectionKey=\"status\"\n              options={statusOptions}\n            />\n\n            <FilterSection\n              title=\"Prioridade\"\n              icon=\"AlertTriangle\"\n              sectionKey=\"priority\"\n              options={priorityOptions}\n            />\n\n            <FilterSection\n              title=\"SLA\"\n              icon=\"Clock\"\n              sectionKey=\"sla\"\n              options={slaOptions}\n            />\n\n            {/* SLA Violations Alert */}\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Icon name=\"AlertTriangle\" size={16} className=\"text-red-600\" />\n                <span className=\"text-sm font-medium text-red-800\">Alertas SLA</span>\n              </div>\n              <p className=\"text-xs text-red-700 mb-2\">\n                7 tickets com violação de SLA requerem atenção imediata\n              </p>\n              <Button variant=\"outline\" size=\"xs\" className=\"text-red-700 border-red-300 hover:bg-red-100\">\n                Ver Tickets\n              </Button>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"space-y-2\">\n              <h3 className=\"text-sm font-medium text-foreground mb-3\">Ações Rápidas</h3>\n              <Button variant=\"ghost\" size=\"sm\" iconName=\"Plus\" iconPosition=\"left\" className=\"w-full justify-start text-xs\">\n                Novo Ticket\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" iconName=\"Download\" iconPosition=\"left\" className=\"w-full justify-start text-xs\">\n                Exportar Lista\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" iconName=\"Settings\" iconPosition=\"left\" className=\"w-full justify-start text-xs\">\n                Configurações\n              </Button>\n            </div>\n          </>\n        )}\n\n        {/* Collapsed State Icons */}\n        {isCollapsed && (\n          <div className=\"space-y-4\">\n            <div className=\"flex flex-col items-center space-y-2\">\n              <Icon name=\"Filter\" size={20} className=\"text-muted-foreground\" />\n              <div className=\"w-6 h-6 bg-red-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-xs text-white font-medium\">7</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FilterSidebar;","size_bytes":7726},"attached_assets/ForgotPasswordForm_1754603785406.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nconst ForgotPasswordForm = ({ onBack, onResetPassword, isLoading, success }) => {\n  const [email, setEmail] = useState('');\n  const [validationError, setValidationError] = useState('');\n\n  const handleInputChange = (value) => {\n    setEmail(value);\n    if (validationError) {\n      setValidationError('');\n    }\n  };\n\n  const validateEmail = () => {\n    if (!email) {\n      setValidationError('Email é obrigatório');\n      return false;\n    }\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/?.test(email)) {\n      setValidationError('Formato de email inválido');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    if (validateEmail()) {\n      onResetPassword(email);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e?.key === 'Enter') {\n      handleSubmit(e);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"text-center space-y-6\">\n        <div className=\"flex items-center justify-center w-16 h-16 bg-success/10 rounded-full mx-auto\">\n          <Icon name=\"CheckCircle\" size={32} className=\"text-success\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Email Enviado!</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Instruções para redefinir sua senha foram enviadas para <strong>{email}</strong>\n          </p>\n        </div>\n\n        <div className=\"space-y-3\">\n          <p className=\"text-xs text-muted-foreground\">\n            Não recebeu o email? Verifique sua caixa de spam ou tente novamente em alguns minutos.\n          </p>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onBack}\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n            iconSize={16}\n            className=\"transition-enterprise\"\n          >\n            Voltar ao Login\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center w-12 h-12 bg-primary/10 rounded-full mx-auto\">\n          <Icon name=\"Key\" size={24} className=\"text-primary\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-foreground\">Recuperar Senha</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Digite seu email corporativo para receber instruções de recuperação\n        </p>\n      </div>\n      {/* Form */}\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <Input\n          label=\"Email Corporativo\"\n          type=\"email\"\n          placeholder=\"seu.email@empresa.com\"\n          value={email}\n          onChange={(e) => handleInputChange(e?.target?.value)}\n          error={validationError}\n          required\n          disabled={isLoading}\n          onKeyPress={handleKeyPress}\n          className=\"transition-enterprise\"\n        />\n\n        <div className=\"space-y-3\">\n          <Button\n            type=\"submit\"\n            variant=\"default\"\n            size=\"lg\"\n            fullWidth\n            loading={isLoading}\n            iconName=\"Send\"\n            iconPosition=\"right\"\n            iconSize={16}\n            className=\"transition-enterprise\"\n          >\n            {isLoading ? 'Enviando...' : 'Enviar Instruções'}\n          </Button>\n\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            fullWidth\n            onClick={onBack}\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n            iconSize={16}\n            className=\"transition-enterprise\"\n          >\n            Voltar ao Login\n          </Button>\n        </div>\n      </form>\n      {/* Help Text */}\n      <div className=\"text-center\">\n        <p className=\"text-xs text-muted-foreground\">\n          Problemas para acessar? Entre em contato com o suporte técnico\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPasswordForm;","size_bytes":4212},"attached_assets/FormActions_1754604173018.jsx":{"content":"import React, { useState } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst FormActions = ({ \n  onSubmit, \n  onSaveDraft, \n  onCancel, \n  isSubmitting, \n  isDraftSaving, \n  formData,\n  hasUnsavedChanges \n}) => {\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    onSubmit();\n  };\n\n  const handleCancel = () => {\n    if (hasUnsavedChanges) {\n      setShowConfirmDialog(true);\n    } else {\n      onCancel();\n    }\n  };\n\n  const confirmCancel = () => {\n    setShowConfirmDialog(false);\n    onCancel();\n  };\n\n  const getEstimatedSLA = () => {\n    if (formData?.customSla) return `${formData?.customSla}h`;\n    \n    switch (formData?.priority) {\n      case 'critical': return '1h';\n      case 'high': return '4h';\n      case 'medium': return '8h';\n      case 'low': return '24h';\n      default: return '8h';\n    }\n  };\n\n  return (\n    <>\n      <div className=\"bg-card rounded-lg border border-border p-6 shadow-enterprise\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center justify-center w-10 h-10 bg-primary/10 rounded-lg\">\n              <Icon name=\"Send\" size={20} className=\"text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-foreground\">Finalizar Chamado</h2>\n              <p className=\"text-sm text-muted-foreground\">Revise as informações e crie o ticket</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Summary Card */}\n        <div className=\"mb-6 p-4 bg-muted/50 rounded-lg border border-border\">\n          <h4 className=\"text-sm font-medium text-foreground mb-3\">Resumo do Chamado</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-muted-foreground\">Solicitante:</span>\n              <span className=\"ml-2 text-foreground font-medium\">\n                {formData?.requesterName || 'Não informado'}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Prioridade:</span>\n              <span className=\"ml-2 text-foreground font-medium\">\n                {formData?.priority ? \n                  ['low', 'medium', 'high', 'critical']?.includes(formData?.priority) ? \n                    { low: 'Baixa', medium: 'Média', high: 'Alta', critical: 'Crítica' }?.[formData?.priority] \n                    : 'Média' :'Média'\n                }\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Categoria:</span>\n              <span className=\"ml-2 text-foreground font-medium\">\n                {formData?.category || 'Não selecionada'}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">SLA Estimado:</span>\n              <span className=\"ml-2 text-foreground font-medium\">\n                {getEstimatedSLA()}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Anexos:</span>\n              <span className=\"ml-2 text-foreground font-medium\">\n                {(formData?.attachments || [])?.length} arquivo(s)\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Mesa:</span>\n              <span className=\"ml-2 text-foreground font-medium\">\n                {formData?.serviceDesk || 'Atribuição automática'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Button\n            type=\"submit\"\n            variant=\"default\"\n            size=\"lg\"\n            onClick={handleSubmit}\n            loading={isSubmitting}\n            disabled={isSubmitting || isDraftSaving}\n            iconName=\"Send\"\n            iconPosition=\"left\"\n            iconSize={18}\n            className=\"flex-1 sm:flex-none\"\n          >\n            {isSubmitting ? 'Criando Chamado...' : 'Criar Chamado'}\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            onClick={onSaveDraft}\n            loading={isDraftSaving}\n            disabled={isSubmitting || isDraftSaving}\n            iconName=\"Save\"\n            iconPosition=\"left\"\n            iconSize={18}\n            className=\"flex-1 sm:flex-none\"\n          >\n            {isDraftSaving ? 'Salvando...' : 'Salvar Rascunho'}\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={handleCancel}\n            disabled={isSubmitting || isDraftSaving}\n            iconName=\"X\"\n            iconPosition=\"left\"\n            iconSize={18}\n            className=\"flex-1 sm:flex-none\"\n          >\n            Cancelar\n          </Button>\n        </div>\n\n        {/* Additional Options */}\n        <div className=\"mt-6 pt-6 border-t border-border\">\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Copy\"\n              iconPosition=\"left\"\n              iconSize={16}\n              className=\"justify-start\"\n            >\n              Criar Similar\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"FileTemplate\"\n              iconPosition=\"left\"\n              iconSize={16}\n              className=\"justify-start\"\n            >\n              Salvar como Template\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Eye\"\n              iconPosition=\"left\"\n              iconSize={16}\n              className=\"justify-start\"\n            >\n              Visualizar\n            </Button>\n          </div>\n        </div>\n\n        {/* Auto-save Indicator */}\n        {hasUnsavedChanges && (\n          <div className=\"mt-4 flex items-center space-x-2 text-sm text-muted-foreground\">\n            <Icon name=\"AlertCircle\" size={16} className=\"text-warning\" />\n            <span>Alterações não salvas detectadas</span>\n          </div>\n        )}\n      </div>\n      {/* Confirmation Dialog */}\n      {showConfirmDialog && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card rounded-lg border border-border p-6 max-w-md w-full mx-4 shadow-enterprise-lg\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"flex items-center justify-center w-10 h-10 bg-warning/10 rounded-lg\">\n                <Icon name=\"AlertTriangle\" size={20} className=\"text-warning\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Confirmar Cancelamento</h3>\n                <p className=\"text-sm text-muted-foreground\">Você tem alterações não salvas</p>\n              </div>\n            </div>\n            \n            <p className=\"text-sm text-foreground mb-6\">\n              Tem certeza que deseja cancelar? Todas as informações preenchidas serão perdidas.\n            </p>\n            \n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={confirmCancel}\n                iconName=\"Trash2\"\n                iconPosition=\"left\"\n                iconSize={16}\n                className=\"flex-1\"\n              >\n                Sim, Cancelar\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowConfirmDialog(false)}\n                className=\"flex-1\"\n              >\n                Continuar Editando\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FormActions;","size_bytes":8137},"attached_assets/Header_1754603553648.jsx":{"content":"import React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Button from './Button';\n\nconst Header = ({ onSidebarToggle, isSidebarCollapsed = false }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\n\n  const primaryNavItems = [\n    { label: 'Dashboard', path: '/support-agent-dashboard', icon: 'LayoutDashboard' },\n    { label: 'Tickets', path: '/kanban-board-view', icon: 'Ticket' },\n    { label: 'Create Ticket', path: '/ticket-creation-form', icon: 'Plus' },\n    { label: 'SLA Monitor', path: '/sla-monitoring-center', icon: 'Clock' },\n  ];\n\n  const secondaryNavItems = [\n    { label: 'User Management', path: '/user-management-console', icon: 'Users' },\n  ];\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    setIsMoreMenuOpen(false);\n  };\n\n  const isActivePath = (path) => {\n    return location.pathname === path;\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 bg-card border-b border-border shadow-enterprise\">\n      <div className=\"flex items-center justify-between h-16 px-4\">\n        {/* Left Section - Logo and Mobile Menu */}\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onSidebarToggle}\n            className=\"lg:hidden\"\n          >\n            <Icon name=\"Menu\" size={20} />\n          </Button>\n          \n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-lg\">\n              <Icon name=\"Ticket\" size={20} color=\"white\" />\n            </div>\n            <div className=\"hidden sm:block\">\n              <h1 className=\"text-lg font-semibold text-foreground\">TicketFlow Pro</h1>\n            </div>\n          </div>\n        </div>\n\n        {/* Center Section - Primary Navigation (Desktop) */}\n        <nav className=\"hidden lg:flex items-center space-x-1\">\n          {primaryNavItems?.map((item) => (\n            <Button\n              key={item?.path}\n              variant={isActivePath(item?.path) ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => handleNavigation(item?.path)}\n              iconName={item?.icon}\n              iconPosition=\"left\"\n              iconSize={16}\n              className=\"transition-enterprise\"\n            >\n              {item?.label}\n            </Button>\n          ))}\n        </nav>\n\n        {/* Right Section - More Menu and User Actions */}\n        <div className=\"flex items-center space-x-2\">\n          {/* More Menu */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMoreMenuOpen(!isMoreMenuOpen)}\n              iconName=\"MoreHorizontal\"\n              iconSize={16}\n              className=\"transition-enterprise\"\n            >\n              More\n            </Button>\n            \n            {isMoreMenuOpen && (\n              <div className=\"absolute right-0 top-full mt-2 w-48 bg-popover border border-border rounded-lg shadow-enterprise-lg z-50\">\n                <div className=\"py-2\">\n                  {secondaryNavItems?.map((item) => (\n                    <button\n                      key={item?.path}\n                      onClick={() => handleNavigation(item?.path)}\n                      className={`w-full flex items-center space-x-3 px-4 py-2 text-sm transition-enterprise hover:bg-muted ${\n                        isActivePath(item?.path) ? 'bg-muted text-primary' : 'text-foreground'\n                      }`}\n                    >\n                      <Icon name={item?.icon} size={16} />\n                      <span>{item?.label}</span>\n                    </button>\n                  ))}\n                  <div className=\"border-t border-border my-2\"></div>\n                  <button className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-foreground hover:bg-muted transition-enterprise\">\n                    <Icon name=\"Settings\" size={16} />\n                    <span>Settings</span>\n                  </button>\n                  <button className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-foreground hover:bg-muted transition-enterprise\">\n                    <Icon name=\"HelpCircle\" size={16} />\n                    <span>Help</span>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* User Profile */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconName=\"User\"\n            iconSize={16}\n            className=\"transition-enterprise\"\n          >\n            Profile\n          </Button>\n\n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"relative transition-enterprise\"\n          >\n            <Icon name=\"Bell\" size={18} />\n            <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-error rounded-full\"></span>\n          </Button>\n        </div>\n      </div>\n      {/* Mobile Navigation Menu */}\n      <div className=\"lg:hidden border-t border-border bg-card\">\n        <nav className=\"flex overflow-x-auto px-4 py-2 space-x-1\">\n          {primaryNavItems?.map((item) => (\n            <Button\n              key={item?.path}\n              variant={isActivePath(item?.path) ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => handleNavigation(item?.path)}\n              iconName={item?.icon}\n              iconPosition=\"left\"\n              iconSize={14}\n              className=\"whitespace-nowrap transition-enterprise\"\n            >\n              {item?.label}\n            </Button>\n          ))}\n        </nav>\n      </div>\n      {/* Overlay for More Menu */}\n      {isMoreMenuOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsMoreMenuOpen(false)}\n        />\n      )}\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":6094},"attached_assets/Input_1754603553648.jsx":{"content":"import React from \"react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Input = React.forwardRef(({\n    className,\n    type = \"text\",\n    label,\n    description,\n    error,\n    required = false,\n    id,\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const inputId = id || `input-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Base input classes\n    const baseInputClasses = \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\";\n\n    // Checkbox-specific styles\n    if (type === \"checkbox\") {\n        return (\n            <input\n                type=\"checkbox\"\n                className={cn(\n                    \"h-4 w-4 rounded border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // Radio button-specific styles\n    if (type === \"radio\") {\n        return (\n            <input\n                type=\"radio\"\n                className={cn(\n                    \"h-4 w-4 rounded-full border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // For regular inputs with wrapper structure\n    return (\n        <div className=\"space-y-2\">\n            {label && (\n                <label\n                    htmlFor={inputId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n\n            <input\n                type={type}\n                className={cn(\n                    baseInputClasses,\n                    error && \"border-destructive focus-visible:ring-destructive\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nInput.displayName = \"Input\";\n\nexport default Input;","size_bytes":3121},"attached_assets/KanbanColumn_1754603675755.jsx":{"content":"import React, { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport TicketCard from './TicketCard';\n\nconst KanbanColumn = ({ \n  column, \n  tickets, \n  onTicketMove, \n  onTicketEdit, \n  onTicketSelect, \n  selectedTickets, \n  canDrag,\n  activeFilters,\n  onFilterChange \n}) => {\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept: 'ticket',\n    drop: (item) => {\n      if (item?.status !== column?.id) {\n        onTicketMove(item?.id, column?.id);\n      }\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  });\n\n  const getColumnColor = (status) => {\n    switch (status) {\n      case 'todo': return 'border-t-secondary';\n      case 'attending': return 'border-t-primary';\n      case 'paused': return 'border-t-warning';\n      case 'completed': return 'border-t-success';\n      default: return 'border-t-muted';\n    }\n  };\n\n  const getColumnIcon = (status) => {\n    switch (status) {\n      case 'todo': return 'Circle';\n      case 'attending': return 'Play';\n      case 'paused': return 'Pause';\n      case 'completed': return 'CheckCircle';\n      default: return 'Circle';\n    }\n  };\n\n  const priorityOptions = [\n    { value: 'all', label: 'Todas as Prioridades' },\n    { value: 'Critical', label: 'Crítica' },\n    { value: 'High', label: 'Alta' },\n    { value: 'Medium', label: 'Média' },\n    { value: 'Low', label: 'Baixa' }\n  ];\n\n  const agentOptions = [\n    { value: 'all', label: 'Todos os Agentes' },\n    { value: 'ana.silva', label: 'Ana Silva' },\n    { value: 'carlos.santos', label: 'Carlos Santos' },\n    { value: 'maria.oliveira', label: 'Maria Oliveira' },\n    { value: 'joao.ferreira', label: 'João Ferreira' }\n  ];\n\n  const slaOptions = [\n    { value: 'all', label: 'Todos os SLAs' },\n    { value: 'critical', label: 'SLA Crítico (>90%)' },\n    { value: 'warning', label: 'SLA Atenção (70-90%)' },\n    { value: 'normal', label: 'SLA Normal (<70%)' }\n  ];\n\n  return (\n    <div\n      ref={drop}\n      className={`\n        flex flex-col h-full bg-muted/30 rounded-lg border-t-4 ${getColumnColor(column?.id)}\n        transition-all duration-200\n        ${isOver && canDrop ? 'bg-primary/5 border-primary/20' : ''}\n        ${isOver && !canDrop ? 'bg-error/5 border-error/20' : ''}\n      `}\n    >\n      {/* Column Header */}\n      <div className=\"p-4 border-b border-border bg-card rounded-t-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name={getColumnIcon(column?.id)} size={20} className=\"text-foreground\" />\n            <div>\n              <h3 className=\"font-semibold text-foreground\">{column?.title}</h3>\n              <p className=\"text-sm text-muted-foreground\">{column?.description}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"bg-primary text-primary-foreground text-sm font-medium px-2 py-1 rounded-full\">\n              {tickets?.length}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              iconName=\"Filter\"\n              iconSize={16}\n              onClick={() => setIsFilterOpen(!isFilterOpen)}\n              className={isFilterOpen ? 'bg-muted' : ''}\n            />\n          </div>\n        </div>\n\n        {/* Quick Filters */}\n        {isFilterOpen && (\n          <div className=\"space-y-3 pt-3 border-t border-border\">\n            <Select\n              label=\"Prioridade\"\n              options={priorityOptions}\n              value={activeFilters?.priority || 'all'}\n              onChange={(value) => onFilterChange('priority', value)}\n              className=\"text-sm\"\n            />\n            <Select\n              label=\"Agente\"\n              options={agentOptions}\n              value={activeFilters?.agent || 'all'}\n              onChange={(value) => onFilterChange('agent', value)}\n              className=\"text-sm\"\n            />\n            <Select\n              label=\"Status SLA\"\n              options={slaOptions}\n              value={activeFilters?.sla || 'all'}\n              onChange={(value) => onFilterChange('sla', value)}\n              className=\"text-sm\"\n            />\n          </div>\n        )}\n      </div>\n      {/* Column Content */}\n      <div className=\"flex-1 p-4 space-y-3 overflow-y-auto min-h-0\">\n        {tickets?.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-32 text-center\">\n            <Icon name=\"Inbox\" size={32} className=\"text-muted-foreground mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">Nenhum ticket nesta coluna</p>\n          </div>\n        ) : (\n          tickets?.map((ticket) => (\n            <TicketCard\n              key={ticket?.id}\n              ticket={ticket}\n              onEdit={onTicketEdit}\n              onSelect={onTicketSelect}\n              isSelected={selectedTickets?.includes(ticket?.id)}\n              canDrag={canDrag}\n            />\n          ))\n        )}\n\n        {/* Drop Zone Indicator */}\n        {isOver && canDrop && (\n          <div className=\"border-2 border-dashed border-primary bg-primary/5 rounded-lg p-8 text-center\">\n            <Icon name=\"Plus\" size={24} className=\"text-primary mx-auto mb-2\" />\n            <p className=\"text-sm text-primary font-medium\">Solte o ticket aqui</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanColumn;","size_bytes":5680},"attached_assets/LoginForm_1754603785406.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst LoginForm = ({ onLogin, onForgotPassword, isLoading, error }) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberDevice: false\n  });\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear validation error when user starts typing\n    if (validationErrors?.[field]) {\n      setValidationErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const errors = {};\n    \n    if (!formData?.email) {\n      errors.email = 'Email é obrigatório';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/?.test(formData?.email)) {\n      errors.email = 'Formato de email inválido';\n    }\n    \n    if (!formData?.password) {\n      errors.password = 'Senha é obrigatória';\n    } else if (formData?.password?.length < 6) {\n      errors.password = 'Senha deve ter pelo menos 6 caracteres';\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors)?.length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    if (validateForm()) {\n      onLogin(formData);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e?.key === 'Enter') {\n      handleSubmit(e);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Email Field */}\n      <div>\n        <Input\n          label=\"Email Corporativo\"\n          type=\"email\"\n          placeholder=\"seu.email@empresa.com\"\n          value={formData?.email}\n          onChange={(e) => handleInputChange('email', e?.target?.value)}\n          error={validationErrors?.email}\n          required\n          disabled={isLoading}\n          onKeyPress={handleKeyPress}\n          className=\"transition-enterprise\"\n        />\n      </div>\n      {/* Password Field */}\n      <div className=\"relative\">\n        <Input\n          label=\"Senha\"\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder=\"Digite sua senha\"\n          value={formData?.password}\n          onChange={(e) => handleInputChange('password', e?.target?.value)}\n          error={validationErrors?.password}\n          required\n          disabled={isLoading}\n          onKeyPress={handleKeyPress}\n          className=\"transition-enterprise pr-12\"\n        />\n        <button\n          type=\"button\"\n          onClick={() => setShowPassword(!showPassword)}\n          className=\"absolute right-3 top-9 text-muted-foreground hover:text-foreground transition-enterprise\"\n          disabled={isLoading}\n        >\n          <Icon name={showPassword ? \"EyeOff\" : \"Eye\"} size={18} />\n        </button>\n      </div>\n      {/* Remember Device */}\n      <div className=\"flex items-center justify-between\">\n        <Checkbox\n          label=\"Lembrar este dispositivo\"\n          checked={formData?.rememberDevice}\n          onChange={(e) => handleInputChange('rememberDevice', e?.target?.checked)}\n          disabled={isLoading}\n          size=\"sm\"\n        />\n        \n        <button\n          type=\"button\"\n          onClick={onForgotPassword}\n          className=\"text-sm text-primary hover:text-primary/80 transition-enterprise\"\n          disabled={isLoading}\n        >\n          Esqueceu a senha?\n        </button>\n      </div>\n      {/* Error Message */}\n      {error && (\n        <div className=\"flex items-center space-x-2 p-3 bg-error/10 border border-error/20 rounded-lg\">\n          <Icon name=\"AlertCircle\" size={16} className=\"text-error\" />\n          <span className=\"text-sm text-error\">{error}</span>\n        </div>\n      )}\n      {/* Login Button */}\n      <Button\n        type=\"submit\"\n        variant=\"default\"\n        size=\"lg\"\n        fullWidth\n        loading={isLoading}\n        iconName=\"LogIn\"\n        iconPosition=\"right\"\n        iconSize={18}\n        className=\"transition-enterprise\"\n      >\n        {isLoading ? 'Entrando...' : 'Entrar no Sistema'}\n      </Button>\n    </form>\n  );\n};\n\nexport default LoginForm;","size_bytes":4309},"attached_assets/NotFound_1754603673077.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'components/ui/Button';\nimport Icon from 'components/AppIcon';\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n\n  const handleGoHome = () => {\n    navigate('/');\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-background p-4\">\n      <div className=\"text-center max-w-md\">\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"relative\">\n            <h1 className=\"text-9xl font-bold text-primary opacity-20\">404</h1>\n          </div>\n        </div>\n\n        <h2 className=\"text-2xl font-medium text-onBackground mb-2\">Page Not Found</h2>\n        <p className=\"text-onBackground/70 mb-8\">\n          The page you're looking for doesn't exist. Let's get you back!\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            variant=\"primary\"\n            icon={<Icon name=\"ArrowLeft\" />}\n            iconPosition=\"left\"\n            onClick={() => window.history?.back()}\n          >\n            Go Back\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            icon={<Icon name=\"Home\" />}\n            iconPosition=\"left\"\n            onClick={handleGoHome}\n          >\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":1438},"attached_assets/ProductivityWidget_1754603794889.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst ProductivityWidget = () => {\n  const todayStats = {\n    resolved: 12,\n    target: 15,\n    avgResponseTime: '8m 32s',\n    slaCompliance: 94\n  };\n\n  const weeklyTrend = [\n    { day: 'Seg', resolved: 8, target: 10 },\n    { day: 'Ter', resolved: 12, target: 10 },\n    { day: 'Qua', resolved: 15, target: 10 },\n    { day: 'Qui', resolved: 9, target: 10 },\n    { day: 'Sex', resolved: 12, target: 10 },\n    { day: 'Sáb', resolved: 6, target: 8 },\n    { day: 'Dom', resolved: 4, target: 5 }\n  ];\n\n  const getProgressColor = (value, target) => {\n    const percentage = (value / target) * 100;\n    if (percentage >= 100) return 'bg-green-500';\n    if (percentage >= 80) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getProgressPercentage = (value, target) => {\n    return Math.min((value / target) * 100, 100);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-4 shadow-enterprise\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Produtividade</h3>\n        <Icon name=\"TrendingUp\" size={20} className=\"text-green-600\" />\n      </div>\n      {/* Today's Performance */}\n      <div className=\"space-y-4 mb-6\">\n        <div className=\"bg-muted/50 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-foreground\">Tickets Resolvidos Hoje</span>\n            <span className=\"text-lg font-bold text-foreground\">\n              {todayStats?.resolved}/{todayStats?.target}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className={`h-2 rounded-full transition-all ${getProgressColor(todayStats?.resolved, todayStats?.target)}`}\n              style={{ width: `${getProgressPercentage(todayStats?.resolved, todayStats?.target)}%` }}\n            ></div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {todayStats?.target - todayStats?.resolved > 0 \n              ? `${todayStats?.target - todayStats?.resolved} restantes para atingir a meta`\n              : 'Meta atingida! 🎉'\n            }\n          </p>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"bg-muted/50 rounded-lg p-3 text-center\">\n            <div className=\"text-lg font-bold text-foreground\">{todayStats?.avgResponseTime}</div>\n            <div className=\"text-xs text-muted-foreground\">Tempo Médio de Resposta</div>\n          </div>\n          <div className=\"bg-muted/50 rounded-lg p-3 text-center\">\n            <div className=\"text-lg font-bold text-green-600\">{todayStats?.slaCompliance}%</div>\n            <div className=\"text-xs text-muted-foreground\">Conformidade SLA</div>\n          </div>\n        </div>\n      </div>\n      {/* Weekly Trend */}\n      <div>\n        <h4 className=\"text-sm font-medium text-foreground mb-3\">Tendência Semanal</h4>\n        <div className=\"space-y-2\">\n          {weeklyTrend?.map((day, index) => (\n            <div key={day?.day} className=\"flex items-center space-x-3\">\n              <span className=\"text-xs text-muted-foreground w-8\">{day?.day}</span>\n              <div className=\"flex-1 flex items-center space-x-2\">\n                <div className=\"flex-1 bg-gray-200 rounded-full h-1.5\">\n                  <div\n                    className={`h-1.5 rounded-full transition-all ${getProgressColor(day?.resolved, day?.target)}`}\n                    style={{ width: `${getProgressPercentage(day?.resolved, day?.target)}%` }}\n                  ></div>\n                </div>\n                <span className=\"text-xs text-foreground font-medium w-8\">\n                  {day?.resolved}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Performance Badges */}\n      <div className=\"mt-4 pt-4 border-t border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n            <span className=\"text-xs text-muted-foreground\">Performance Excelente</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Icon name=\"Award\" size={14} className=\"text-yellow-500\" />\n            <span className=\"text-xs text-muted-foreground\">Top Performer</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductivityWidget;","size_bytes":4657},"attached_assets/RequesterInfoSection_1754604173019.jsx":{"content":"import React from 'react';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport Icon from '../../../components/AppIcon';\n\nconst RequesterInfoSection = ({ \n  formData, \n  onFormChange, \n  errors, \n  clients, \n  units, \n  departments,\n  isLoadingClients \n}) => {\n  const handleInputChange = (field, value) => {\n    onFormChange(field, value);\n  };\n\n  const filteredUnits = formData?.client ? units?.filter(unit => unit?.clientId === formData?.client) : [];\n  const filteredDepartments = formData?.unit ? departments?.filter(dept => dept?.unitId === formData?.unit) : [];\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6 shadow-enterprise\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-primary/10 rounded-lg\">\n          <Icon name=\"User\" size={20} className=\"text-primary\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Informações do Solicitante</h2>\n          <p className=\"text-sm text-muted-foreground\">Dados do usuário que está solicitando o atendimento</p>\n        </div>\n      </div>\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Nome Completo\"\n            type=\"text\"\n            placeholder=\"Digite o nome completo\"\n            value={formData?.requesterName || ''}\n            onChange={(e) => handleInputChange('requesterName', e?.target?.value)}\n            error={errors?.requesterName}\n            required\n            className=\"w-full\"\n          />\n          \n          <Input\n            label=\"E-mail\"\n            type=\"email\"\n            placeholder=\"usuario@empresa.com\"\n            value={formData?.requesterEmail || ''}\n            onChange={(e) => handleInputChange('requesterEmail', e?.target?.value)}\n            error={errors?.requesterEmail}\n            required\n            className=\"w-full\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Telefone\"\n            type=\"tel\"\n            placeholder=\"(11) 99999-9999\"\n            value={formData?.requesterPhone || ''}\n            onChange={(e) => handleInputChange('requesterPhone', e?.target?.value)}\n            error={errors?.requesterPhone}\n            className=\"w-full\"\n          />\n          \n          <Input\n            label=\"Ramal (Opcional)\"\n            type=\"text\"\n            placeholder=\"1234\"\n            value={formData?.requesterExtension || ''}\n            onChange={(e) => handleInputChange('requesterExtension', e?.target?.value)}\n            className=\"w-full\"\n          />\n        </div>\n\n        <Select\n          label=\"Cliente\"\n          placeholder=\"Selecione o cliente\"\n          options={clients?.map(client => ({\n            value: client?.id,\n            label: client?.name,\n            description: client?.document\n          }))}\n          value={formData?.client || ''}\n          onChange={(value) => {\n            handleInputChange('client', value);\n            handleInputChange('unit', '');\n            handleInputChange('department', '');\n          }}\n          error={errors?.client}\n          required\n          searchable\n          loading={isLoadingClients}\n          className=\"w-full\"\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Select\n            label=\"Unidade\"\n            placeholder=\"Selecione a unidade\"\n            options={filteredUnits?.map(unit => ({\n              value: unit?.id,\n              label: unit?.name,\n              description: unit?.address\n            }))}\n            value={formData?.unit || ''}\n            onChange={(value) => {\n              handleInputChange('unit', value);\n              handleInputChange('department', '');\n            }}\n            error={errors?.unit}\n            required\n            disabled={!formData?.client}\n            searchable\n            className=\"w-full\"\n          />\n          \n          <Select\n            label=\"Departamento\"\n            placeholder=\"Selecione o departamento\"\n            options={filteredDepartments?.map(dept => ({\n              value: dept?.id,\n              label: dept?.name,\n              description: dept?.description\n            }))}\n            value={formData?.department || ''}\n            onChange={(value) => handleInputChange('department', value)}\n            error={errors?.department}\n            required\n            disabled={!formData?.unit}\n            searchable\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequesterInfoSection;","size_bytes":4750},"attached_assets/Routes_1754603556931.jsx":{"content":"import React from \"react\";\nimport { BrowserRouter, Routes as RouterRoutes, Route } from \"react-router-dom\";\nimport ScrollToTop from \"components/ScrollToTop\";\nimport ErrorBoundary from \"components/ErrorBoundary\";\nimport NotFound from \"pages/NotFound\";\nimport KanbanBoardView from './pages/kanban-board-view';\nimport TicketCreationForm from './pages/ticket-creation-form';\nimport SupportAgentDashboard from './pages/support-agent-dashboard';\nimport LoginAndAuthentication from './pages/login-and-authentication';\nimport SLAMonitoringCenter from './pages/sla-monitoring-center';\nimport UserManagementConsole from './pages/user-management-console';\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <ErrorBoundary>\n      <ScrollToTop />\n      <RouterRoutes>\n        {/* Define your route here */}\n        <Route path=\"/\" element={<KanbanBoardView />} />\n        <Route path=\"/kanban-board-view\" element={<KanbanBoardView />} />\n        <Route path=\"/ticket-creation-form\" element={<TicketCreationForm />} />\n        <Route path=\"/support-agent-dashboard\" element={<SupportAgentDashboard />} />\n        <Route path=\"/login-and-authentication\" element={<LoginAndAuthentication />} />\n        <Route path=\"/sla-monitoring-center\" element={<SLAMonitoringCenter />} />\n        <Route path=\"/user-management-console\" element={<UserManagementConsole />} />\n        <Route path=\"*\" element={<NotFound />} />\n      </RouterRoutes>\n      </ErrorBoundary>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","size_bytes":1505},"attached_assets/SLAFilters_1754603788535.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst SLAFilters = ({ filters, onFiltersChange, onSaveFilter, savedFilters, onLoadFilter }) => {\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [filterName, setFilterName] = useState('');\n\n  const slaStatusOptions = [\n    { value: 'all', label: 'Todos os Status' },\n    { value: 'normal', label: 'Normal (0-59%)' },\n    { value: 'warning', label: 'Atenção (60-79%)' },\n    { value: 'critical', label: 'Crítico (80-99%)' },\n    { value: 'violated', label: 'Violado (100%+)' }\n  ];\n\n  const priorityOptions = [\n    { value: 'all', label: 'Todas as Prioridades' },\n    { value: 'Crítica', label: 'Crítica' },\n    { value: 'Alta', label: 'Alta' },\n    { value: 'Média', label: 'Média' },\n    { value: 'Baixa', label: 'Baixa' }\n  ];\n\n  const departmentOptions = [\n    { value: 'all', label: 'Todos os Departamentos' },\n    { value: 'TI', label: 'Tecnologia da Informação' },\n    { value: 'Suporte', label: 'Suporte Técnico' },\n    { value: 'Vendas', label: 'Vendas' },\n    { value: 'Financeiro', label: 'Financeiro' },\n    { value: 'RH', label: 'Recursos Humanos' }\n  ];\n\n  const sortOptions = [\n    { value: 'timeRemaining', label: 'Tempo Restante (Menor)' },\n    { value: 'slaPercentage', label: 'Percentual SLA (Maior)' },\n    { value: 'priority', label: 'Prioridade' },\n    { value: 'createdAt', label: 'Data de Criação' }\n  ];\n\n  const handleFilterChange = (key, value) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value\n    });\n  };\n\n  const handleSaveFilter = () => {\n    if (filterName?.trim()) {\n      onSaveFilter(filterName, filters);\n      setFilterName('');\n      setShowSaveDialog(false);\n    }\n  };\n\n  const handleClearFilters = () => {\n    onFiltersChange({\n      search: '',\n      slaStatus: 'all',\n      priority: 'all',\n      department: 'all',\n      sortBy: 'timeRemaining'\n    });\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 shadow-enterprise mb-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-semibold text-foreground flex items-center space-x-2\">\n          <Icon name=\"Filter\" size={18} className=\"text-primary\" />\n          <span>Filtros SLA</span>\n        </h3>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowSaveDialog(true)}\n            iconName=\"Save\"\n            iconPosition=\"left\"\n            iconSize={14}\n          >\n            Salvar Filtro\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClearFilters}\n            iconName=\"X\"\n            iconSize={14}\n          >\n            Limpar\n          </Button>\n        </div>\n      </div>\n      {/* Search and Quick Filters */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n        <Input\n          type=\"search\"\n          placeholder=\"Buscar tickets...\"\n          value={filters?.search}\n          onChange={(e) => handleFilterChange('search', e?.target?.value)}\n          className=\"w-full\"\n        />\n\n        <Select\n          options={slaStatusOptions}\n          value={filters?.slaStatus}\n          onChange={(value) => handleFilterChange('slaStatus', value)}\n          placeholder=\"Status SLA\"\n        />\n\n        <Select\n          options={priorityOptions}\n          value={filters?.priority}\n          onChange={(value) => handleFilterChange('priority', value)}\n          placeholder=\"Prioridade\"\n        />\n\n        <Select\n          options={departmentOptions}\n          value={filters?.department}\n          onChange={(value) => handleFilterChange('department', value)}\n          placeholder=\"Departamento\"\n        />\n      </div>\n      {/* Sort and Saved Filters */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-3 sm:space-y-0\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"ArrowUpDown\" size={16} className=\"text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground\">Ordenar por:</span>\n          </div>\n          <Select\n            options={sortOptions}\n            value={filters?.sortBy}\n            onChange={(value) => handleFilterChange('sortBy', value)}\n            className=\"w-48\"\n          />\n        </div>\n\n        {savedFilters?.length > 0 && (\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Filtros salvos:</span>\n            <div className=\"flex items-center space-x-1\">\n              {savedFilters?.map((savedFilter) => (\n                <Button\n                  key={savedFilter?.id}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onLoadFilter(savedFilter)}\n                  className=\"text-xs\"\n                >\n                  {savedFilter?.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      {/* Save Filter Dialog */}\n      {showSaveDialog && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg p-6 w-full max-w-md shadow-enterprise-lg\">\n            <h4 className=\"font-semibold text-foreground mb-4\">Salvar Filtro</h4>\n            <Input\n              label=\"Nome do Filtro\"\n              type=\"text\"\n              placeholder=\"Digite um nome para o filtro\"\n              value={filterName}\n              onChange={(e) => setFilterName(e?.target?.value)}\n              className=\"mb-4\"\n            />\n            <div className=\"flex items-center justify-end space-x-2\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => {\n                  setShowSaveDialog(false);\n                  setFilterName('');\n                }}\n              >\n                Cancelar\n              </Button>\n              <Button\n                variant=\"default\"\n                onClick={handleSaveFilter}\n                disabled={!filterName?.trim()}\n              >\n                Salvar\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SLAFilters;","size_bytes":6603},"attached_assets/SLAMetrics_1754603788535.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst SLAMetrics = ({ metrics }) => {\n  const metricCards = [\n    {\n      id: 'total',\n      title: 'Total de Tickets',\n      value: metrics?.totalTickets,\n      icon: 'Ticket',\n      color: 'text-primary',\n      bgColor: 'bg-primary/10'\n    },\n    {\n      id: 'normal',\n      title: 'Normal (0-59%)',\n      value: metrics?.normalTickets,\n      icon: 'CheckCircle',\n      color: 'text-success',\n      bgColor: 'bg-success/10'\n    },\n    {\n      id: 'warning',\n      title: 'Atenção (60-79%)',\n      value: metrics?.warningTickets,\n      icon: 'AlertCircle',\n      color: 'text-warning',\n      bgColor: 'bg-warning/10'\n    },\n    {\n      id: 'critical',\n      title: 'Crítico (80-99%)',\n      value: metrics?.criticalTickets,\n      icon: 'AlertTriangle',\n      color: 'text-error',\n      bgColor: 'bg-error/10'\n    },\n    {\n      id: 'violated',\n      title: 'Violados (100%+)',\n      value: metrics?.violatedTickets,\n      icon: 'XCircle',\n      color: 'text-error',\n      bgColor: 'bg-error/10'\n    },\n    {\n      id: 'compliance',\n      title: 'Taxa de Conformidade',\n      value: `${metrics?.complianceRate}%`,\n      icon: 'TrendingUp',\n      color: metrics?.complianceRate >= 95 ? 'text-success' : metrics?.complianceRate >= 85 ? 'text-warning' : 'text-error',\n      bgColor: metrics?.complianceRate >= 95 ? 'bg-success/10' : metrics?.complianceRate >= 85 ? 'bg-warning/10' : 'bg-error/10'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6\">\n      {metricCards?.map((metric) => (\n        <div key={metric?.id} className=\"bg-card border border-border rounded-lg p-4 shadow-enterprise hover:shadow-enterprise-lg transition-all duration-200\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className={`p-2 rounded-lg ${metric?.bgColor}`}>\n              <Icon name={metric?.icon} size={20} className={metric?.color} />\n            </div>\n            {metric?.id === 'compliance' && (\n              <div className=\"flex items-center space-x-1\">\n                <Icon \n                  name={metrics?.complianceRate >= 95 ? \"TrendingUp\" : metrics?.complianceRate >= 85 ? \"Minus\" : \"TrendingDown\"} \n                  size={14} \n                  className={metric?.color} \n                />\n              </div>\n            )}\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-2xl font-bold text-foreground\">{metric?.value}</p>\n            <p className=\"text-xs text-muted-foreground leading-tight\">{metric?.title}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SLAMetrics;","size_bytes":2709},"attached_assets/SLATicketCard_1754603788535.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst SLATicketCard = ({ ticket, onPause, onResume, onViewDetails }) => {\n  const getSLAStatusColor = (status, percentage) => {\n    if (status === 'violated') return 'bg-error';\n    if (percentage >= 80) return 'bg-error';\n    if (percentage >= 60) return 'bg-warning';\n    return 'bg-success';\n  };\n\n  const getSLAStatusText = (status, percentage) => {\n    if (status === 'violated') return 'Violado';\n    if (percentage >= 80) return 'Crítico';\n    if (percentage >= 60) return 'Atenção';\n    return 'Normal';\n  };\n\n  const formatTimeRemaining = (minutes) => {\n    if (minutes <= 0) return '00:00';\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours?.toString()?.padStart(2, '0')}:${mins?.toString()?.padStart(2, '0')}`;\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'Crítica': return 'text-error bg-error/10';\n      case 'Alta': return 'text-warning bg-warning/10';\n      case 'Média': return 'text-primary bg-primary/10';\n      default: return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 shadow-enterprise hover:shadow-enterprise-lg transition-all duration-200\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <span className=\"text-sm font-medium text-muted-foreground\">#{ticket?.id}</span>\n            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(ticket?.priority)}`}>\n              {ticket?.priority}\n            </span>\n          </div>\n          <h3 className=\"font-semibold text-foreground text-sm leading-tight line-clamp-2\">\n            {ticket?.subject}\n          </h3>\n        </div>\n        <div className=\"ml-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => onViewDetails(ticket)}\n            className=\"h-8 w-8\"\n          >\n            <Icon name=\"ExternalLink\" size={14} />\n          </Button>\n        </div>\n      </div>\n      {/* Client and Responsible */}\n      <div className=\"space-y-2 mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"User\" size={14} className=\"text-muted-foreground\" />\n          <span className=\"text-sm text-foreground\">{ticket?.client}</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"UserCheck\" size={14} className=\"text-muted-foreground\" />\n          <span className=\"text-sm text-foreground\">{ticket?.responsible}</span>\n        </div>\n      </div>\n      {/* SLA Progress */}\n      <div className=\"mb-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-xs font-medium text-foreground\">SLA Progress</span>\n          <span className={`text-xs font-medium ${\n            ticket?.slaStatus === 'violated' ? 'text-error' : \n            ticket?.slaPercentage >= 80 ? 'text-error' :\n            ticket?.slaPercentage >= 60 ? 'text-warning' : 'text-success'\n          }`}>\n            {getSLAStatusText(ticket?.slaStatus, ticket?.slaPercentage)}\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2 mb-2\">\n          <div \n            className={`h-2 rounded-full transition-all duration-300 ${getSLAStatusColor(ticket?.slaStatus, ticket?.slaPercentage)} ${\n              ticket?.slaPercentage >= 80 ? 'animate-pulse' : ''\n            }`}\n            style={{ width: `${Math.min(ticket?.slaPercentage, 100)}%` }}\n          />\n        </div>\n        <div className=\"flex items-center justify-between text-xs\">\n          <span className=\"text-muted-foreground\">\n            Tempo restante: {formatTimeRemaining(ticket?.timeRemaining)}\n          </span>\n          <span className=\"text-muted-foreground\">\n            {ticket?.slaPercentage}%\n          </span>\n        </div>\n      </div>\n      {/* Actions */}\n      <div className=\"flex items-center justify-between pt-2 border-t border-border\">\n        <div className=\"flex items-center space-x-2\">\n          {ticket?.isPaused ? (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onResume(ticket?.id)}\n              iconName=\"Play\"\n              iconPosition=\"left\"\n              iconSize={14}\n              className=\"text-success hover:text-success\"\n            >\n              Retomar\n            </Button>\n          ) : (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPause(ticket?.id)}\n              iconName=\"Pause\"\n              iconPosition=\"left\"\n              iconSize={14}\n              className=\"text-warning hover:text-warning\"\n            >\n              Pausar\n            </Button>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n          <Icon name=\"Clock\" size={12} />\n          <span>{ticket?.createdAt}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SLATicketCard;","size_bytes":5265},"attached_assets/ScrollToTop_1754603553647.jsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;","size_bytes":263},"attached_assets/SecurityIndicators_1754603785407.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst SecurityIndicators = ({ failedAttempts = 0, lastLoginTime, sessionTimeout = 30 }) => {\n  const [timeRemaining, setTimeRemaining] = useState(sessionTimeout * 60);\n  const [showTimeoutWarning, setShowTimeoutWarning] = useState(false);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 300) { // 5 minutes warning\n          setShowTimeoutWarning(true);\n        }\n        return prev > 0 ? prev - 1 : 0;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs?.toString()?.padStart(2, '0')}`;\n  };\n\n  const formatLastLogin = (timestamp) => {\n    if (!timestamp) return 'Primeiro acesso';\n    const date = new Date(timestamp);\n    return date?.toLocaleString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Session Timeout Warning */}\n      {showTimeoutWarning && (\n        <div className=\"flex items-center space-x-2 p-3 bg-warning/10 border border-warning/20 rounded-lg\">\n          <Icon name=\"Clock\" size={16} className=\"text-warning\" />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-warning\">Sessão expirando em breve</p>\n            <p className=\"text-xs text-warning/80\">Tempo restante: {formatTime(timeRemaining)}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Failed Attempts Warning */}\n      {failedAttempts > 0 && (\n        <div className=\"flex items-center space-x-2 p-3 bg-error/10 border border-error/20 rounded-lg\">\n          <Icon name=\"AlertTriangle\" size={16} className=\"text-error\" />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-error\">\n              {failedAttempts === 1 ? 'Tentativa de login inválida' : `${failedAttempts} tentativas inválidas`}\n            </p>\n            <p className=\"text-xs text-error/80\">\n              {failedAttempts >= 3 ? 'Conta será bloqueada após 5 tentativas' : 'Verifique suas credenciais'}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Account Lockout Warning */}\n      {failedAttempts >= 4 && (\n        <div className=\"flex items-center space-x-2 p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\n          <Icon name=\"ShieldAlert\" size={16} className=\"text-destructive\" />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-destructive\">Atenção: Bloqueio iminente</p>\n            <p className=\"text-xs text-destructive/80\">\n              Mais 1 tentativa incorreta bloqueará sua conta por 15 minutos\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Security Information */}\n      <div className=\"bg-card border border-border rounded-lg p-4 space-y-3\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Shield\" size={16} className=\"text-primary\" />\n          <span className=\"text-sm font-medium text-foreground\">Informações de Segurança</span>\n        </div>\n\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          {/* Last Login */}\n          <div className=\"flex items-center justify-between\">\n            <span>Último acesso:</span>\n            <span className=\"font-medium\">{formatLastLogin(lastLoginTime)}</span>\n          </div>\n\n          {/* Encryption Status */}\n          <div className=\"flex items-center justify-between\">\n            <span>Criptografia:</span>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"Lock\" size={12} className=\"text-success\" />\n              <span className=\"font-medium text-success\">Ativa (AES-256)</span>\n            </div>\n          </div>\n\n          {/* Audit Trail */}\n          <div className=\"flex items-center justify-between\">\n            <span>Auditoria:</span>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"FileText\" size={12} className=\"text-success\" />\n              <span className=\"font-medium text-success\">Habilitada</span>\n            </div>\n          </div>\n\n          {/* Session Management */}\n          <div className=\"flex items-center justify-between\">\n            <span>Sessão segura:</span>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"CheckCircle\" size={12} className=\"text-success\" />\n              <span className=\"font-medium text-success\">JWT Ativo</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Compliance Indicators */}\n      <div className=\"flex items-center justify-center space-x-4 text-xs text-muted-foreground\">\n        <div className=\"flex items-center space-x-1\">\n          <Icon name=\"Award\" size={12} className=\"text-primary\" />\n          <span>ISO 27001</span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <Icon name=\"Shield\" size={12} className=\"text-primary\" />\n          <span>LGPD</span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <Icon name=\"CheckCircle\" size={12} className=\"text-primary\" />\n          <span>SOC 2</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SecurityIndicators;","size_bytes":5474},"attached_assets/Select_1754603553648.jsx":{"content":"// components/ui/Select.jsx - Shadcn style Select\nimport React, { useState } from \"react\";\nimport { ChevronDown, Check, Search, X } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nconst Select = React.forwardRef(({\n    className,\n    options = [],\n    value,\n    defaultValue,\n    placeholder = \"Select an option\",\n    multiple = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    searchable = false,\n    clearable = false,\n    loading = false,\n    id,\n    name,\n    onChange,\n    onOpenChange,\n    ...props\n}, ref) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Generate unique ID if not provided\n    const selectId = id || `select-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Filter options based on search\n    const filteredOptions = searchable && searchTerm\n        ? options?.filter(option =>\n            option?.label?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n            (option?.value && option?.value?.toString()?.toLowerCase()?.includes(searchTerm?.toLowerCase()))\n        )\n        : options;\n\n    // Get selected option(s) for display\n    const getSelectedDisplay = () => {\n        if (!value) return placeholder;\n\n        if (multiple) {\n            const selectedOptions = options?.filter(opt => value?.includes(opt?.value));\n            if (selectedOptions?.length === 0) return placeholder;\n            if (selectedOptions?.length === 1) return selectedOptions?.[0]?.label;\n            return `${selectedOptions?.length} items selected`;\n        }\n\n        const selectedOption = options?.find(opt => opt?.value === value);\n        return selectedOption ? selectedOption?.label : placeholder;\n    };\n\n    const handleToggle = () => {\n        if (!disabled) {\n            const newIsOpen = !isOpen;\n            setIsOpen(newIsOpen);\n            onOpenChange?.(newIsOpen);\n            if (!newIsOpen) {\n                setSearchTerm(\"\");\n            }\n        }\n    };\n\n    const handleOptionSelect = (option) => {\n        if (multiple) {\n            const newValue = value || [];\n            const updatedValue = newValue?.includes(option?.value)\n                ? newValue?.filter(v => v !== option?.value)\n                : [...newValue, option?.value];\n            onChange?.(updatedValue);\n        } else {\n            onChange?.(option?.value);\n            setIsOpen(false);\n            onOpenChange?.(false);\n        }\n    };\n\n    const handleClear = (e) => {\n        e?.stopPropagation();\n        onChange?.(multiple ? [] : '');\n    };\n\n    const handleSearchChange = (e) => {\n        setSearchTerm(e?.target?.value);\n    };\n\n    const isSelected = (optionValue) => {\n        if (multiple) {\n            return value?.includes(optionValue) || false;\n        }\n        return value === optionValue;\n    };\n\n    const hasValue = multiple ? value?.length > 0 : value !== undefined && value !== '';\n\n    return (\n        <div className={cn(\"relative\", className)}>\n            {label && (\n                <label\n                    htmlFor={selectId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-2 block\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n            <div className=\"relative\">\n                <button\n                    ref={ref}\n                    id={selectId}\n                    type=\"button\"\n                    className={cn(\n                        \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-white text-black px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                        error && \"border-destructive focus:ring-destructive\",\n                        !hasValue && \"text-muted-foreground\"\n                    )}\n                    onClick={handleToggle}\n                    disabled={disabled}\n                    aria-expanded={isOpen}\n                    aria-haspopup=\"listbox\"\n                    {...props}\n                >\n                    <span className=\"truncate\">{getSelectedDisplay()}</span>\n\n                    <div className=\"flex items-center gap-1\">\n                        {loading && (\n                            <svg className=\"animate-spin h-4 w-4\" viewBox=\"0 0 24 24\">\n                                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" />\n                                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                            </svg>\n                        )}\n\n                        {clearable && hasValue && !loading && (\n                            <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-4 w-4\"\n                                onClick={handleClear}\n                            >\n                                <X className=\"h-3 w-3\" />\n                            </Button>\n                        )}\n\n                        <ChevronDown className={cn(\"h-4 w-4 transition-transform\", isOpen && \"rotate-180\")} />\n                    </div>\n                </button>\n\n                {/* Hidden native select for form submission */}\n                <select\n                    name={name}\n                    value={value || ''}\n                    onChange={() => { }} // Controlled by our custom logic\n                    className=\"sr-only\"\n                    tabIndex={-1}\n                    multiple={multiple}\n                    required={required}\n                >\n                    <option value=\"\">Select...</option>\n                    {options?.map(option => (\n                        <option key={option?.value} value={option?.value}>\n                            {option?.label}\n                        </option>\n                    ))}\n                </select>\n\n                {/* Dropdown */}\n                {isOpen && (\n                    <div className=\"absolute z-50 w-full mt-1 bg-white text-black border border-border rounded-md shadow-md\">\n                        {searchable && (\n                            <div className=\"p-2 border-b\">\n                                <div className=\"relative\">\n                                    <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                    <Input\n                                        placeholder=\"Search options...\"\n                                        value={searchTerm}\n                                        onChange={handleSearchChange}\n                                        className=\"pl-8\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n\n                        <div className=\"py-1 max-h-60 overflow-auto\">\n                            {filteredOptions?.length === 0 ? (\n                                <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n                                    {searchTerm ? 'No options found' : 'No options available'}\n                                </div>\n                            ) : (\n                                filteredOptions?.map((option) => (\n                                    <div\n                                        key={option?.value}\n                                        className={cn(\n                                            \"relative flex cursor-pointer select-none items-center rounded-sm px-3 py-2 text-sm outline-none hover:bg-accent hover:text-accent-foreground\",\n                                            isSelected(option?.value) && \"bg-primary text-primary-foreground\",\n                                            option?.disabled && \"pointer-events-none opacity-50\"\n                                        )}\n                                        onClick={() => !option?.disabled && handleOptionSelect(option)}\n                                    >\n                                        <span className=\"flex-1\">{option?.label}</span>\n                                        {multiple && isSelected(option?.value) && (\n                                            <Check className=\"h-4 w-4\" />\n                                        )}\n                                        {option?.description && (\n                                            <span className=\"text-xs text-muted-foreground ml-2\">\n                                                {option?.description}\n                                            </span>\n                                        )}\n                                    </div>\n                                ))\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                    {description}\n                </p>\n            )}\n            {error && (\n                <p className=\"text-sm text-destructive mt-1\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nSelect.displayName = \"Select\";\n\nexport default Select;","size_bytes":9820},"attached_assets/Sidebar_1754603553648.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Button from './Button';\n\nconst Sidebar = ({ isOpen = false, onClose, isCollapsed = false, onToggleCollapse }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [activeSubmenu, setActiveSubmenu] = useState(null);\n\n  const navigationItems = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      path: '/support-agent-dashboard',\n      icon: 'LayoutDashboard',\n      description: 'Overview and metrics'\n    },\n    {\n      id: 'tickets',\n      label: 'Tickets',\n      icon: 'Ticket',\n      description: 'Ticket management',\n      submenu: [\n        { label: 'Kanban Board', path: '/kanban-board-view', icon: 'Kanban' },\n        { label: 'Create Ticket', path: '/ticket-creation-form', icon: 'Plus' }\n      ]\n    },\n    {\n      id: 'monitoring',\n      label: 'SLA Monitoring',\n      path: '/sla-monitoring-center',\n      icon: 'Clock',\n      description: 'Performance tracking'\n    },\n    {\n      id: 'administration',\n      label: 'Administration',\n      icon: 'Settings',\n      description: 'System management',\n      submenu: [\n        { label: 'User Management', path: '/user-management-console', icon: 'Users' }\n      ]\n    }\n  ];\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    if (window.innerWidth < 1024) {\n      onClose();\n    }\n  };\n\n  const handleSubmenuToggle = (itemId) => {\n    if (isCollapsed) return;\n    setActiveSubmenu(activeSubmenu === itemId ? null : itemId);\n  };\n\n  const isActivePath = (path) => {\n    return location.pathname === path;\n  };\n\n  const isActiveParent = (item) => {\n    if (item?.path && isActivePath(item?.path)) return true;\n    if (item?.submenu) {\n      return item?.submenu?.some(subItem => isActivePath(subItem?.path));\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    // Auto-expand active parent menu\n    const activeParentItem = navigationItems?.find(item => isActiveParent(item));\n    if (activeParentItem && activeParentItem?.submenu && !isCollapsed) {\n      setActiveSubmenu(activeParentItem?.id);\n    }\n  }, [location.pathname, isCollapsed]);\n\n  const sidebarWidth = isCollapsed ? 'w-16' : 'w-60';\n  const sidebarClasses = `\n    fixed top-0 left-0 h-full bg-card border-r border-border shadow-enterprise-lg z-40\n    transition-all duration-300 ease-in-out\n    ${sidebarWidth}\n    lg:translate-x-0\n    ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\n  `;\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-30 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      {/* Sidebar */}\n      <aside className={sidebarClasses}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            {!isCollapsed && (\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-lg\">\n                  <Icon name=\"Ticket\" size={20} color=\"white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-lg font-semibold text-foreground\">TicketFlow Pro</h1>\n                  <p className=\"text-xs text-muted-foreground\">Enterprise Edition</p>\n                </div>\n              </div>\n            )}\n            \n            {isCollapsed && (\n              <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-lg mx-auto\">\n                <Icon name=\"Ticket\" size={20} color=\"white\" />\n              </div>\n            )}\n\n            {/* Collapse Toggle (Desktop) */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onToggleCollapse}\n              className=\"hidden lg:flex transition-enterprise\"\n            >\n              <Icon name={isCollapsed ? \"ChevronRight\" : \"ChevronLeft\"} size={16} />\n            </Button>\n\n            {/* Close Button (Mobile) */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"lg:hidden transition-enterprise\"\n            >\n              <Icon name=\"X\" size={16} />\n            </Button>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n            {navigationItems?.map((item) => (\n              <div key={item?.id}>\n                {/* Main Navigation Item */}\n                <div\n                  className={`\n                    group relative flex items-center rounded-lg transition-enterprise cursor-pointer\n                    ${isActiveParent(item) \n                      ? 'bg-primary text-primary-foreground' \n                      : 'text-foreground hover:bg-muted'\n                    }\n                    ${isCollapsed ? 'justify-center p-3' : 'p-3'}\n                  `}\n                  onClick={() => {\n                    if (item?.path) {\n                      handleNavigation(item?.path);\n                    } else if (item?.submenu) {\n                      handleSubmenuToggle(item?.id);\n                    }\n                  }}\n                >\n                  <Icon \n                    name={item?.icon} \n                    size={20} \n                    className={`\n                      ${isCollapsed ? '' : 'mr-3'} \n                      ${isActiveParent(item) ? 'text-primary-foreground' : ''}\n                    `}\n                  />\n                  \n                  {!isCollapsed && (\n                    <>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{item?.label}</div>\n                        {item?.description && (\n                          <div className={`text-xs ${\n                            isActiveParent(item) ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                          }`}>\n                            {item?.description}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {item?.submenu && (\n                        <Icon \n                          name={activeSubmenu === item?.id ? \"ChevronDown\" : \"ChevronRight\"} \n                          size={16}\n                          className={`transition-transform ${\n                            isActiveParent(item) ? 'text-primary-foreground' : ''\n                          }`}\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {/* Tooltip for Collapsed State */}\n                  {isCollapsed && (\n                    <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                      <div className=\"text-sm font-medium\">{item?.label}</div>\n                      {item?.description && (\n                        <div className=\"text-xs text-muted-foreground\">{item?.description}</div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Submenu */}\n                {item?.submenu && !isCollapsed && activeSubmenu === item?.id && (\n                  <div className=\"ml-6 mt-2 space-y-1 border-l-2 border-border pl-4\">\n                    {item?.submenu?.map((subItem) => (\n                      <div\n                        key={subItem?.path}\n                        className={`\n                          flex items-center p-2 rounded-md text-sm transition-enterprise cursor-pointer\n                          ${isActivePath(subItem?.path)\n                            ? 'bg-primary/10 text-primary font-medium' :'text-muted-foreground hover:text-foreground hover:bg-muted'\n                          }\n                        `}\n                        onClick={() => handleNavigation(subItem?.path)}\n                      >\n                        <Icon name={subItem?.icon} size={16} className=\"mr-3\" />\n                        {subItem?.label}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border\">\n            {!isCollapsed ? (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"HelpCircle\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  className=\"w-full justify-start transition-enterprise\"\n                >\n                  Help & Support\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"LogOut\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  className=\"w-full justify-start text-error hover:text-error hover:bg-error/10 transition-enterprise\"\n                  onClick={() => handleNavigation('/login-and-authentication')}\n                >\n                  Sign Out\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-full transition-enterprise group relative\"\n                >\n                  <Icon name=\"HelpCircle\" size={16} />\n                  <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                    Help & Support\n                  </div>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-full text-error hover:text-error hover:bg-error/10 transition-enterprise group relative\"\n                  onClick={() => handleNavigation('/login-and-authentication')}\n                >\n                  <Icon name=\"LogOut\" size={16} />\n                  <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                    Sign Out\n                  </div>\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n};\n\nexport default Sidebar;","size_bytes":10800},"attached_assets/TenantSelector_1754603785407.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Select from '../../../components/ui/Select';\n\nconst TenantSelector = ({ onTenantChange, selectedTenant, isLoading }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Mock tenant data - in real app this would come from API\n  const tenantOptions = [\n    {\n      value: 'empresa-matriz',\n      label: 'Empresa Matriz',\n      description: 'Sede principal - São Paulo'\n    },\n    {\n      value: 'filial-rj',\n      label: 'Filial Rio de Janeiro',\n      description: 'Unidade RJ - Centro'\n    },\n    {\n      value: 'filial-mg',\n      label: 'Filial Minas Gerais',\n      description: 'Unidade BH - Savassi'\n    },\n    {\n      value: 'filial-rs',\n      label: 'Filial Rio Grande do Sul',\n      description: 'Unidade POA - Centro'\n    }\n  ];\n\n  const handleTenantChange = (value) => {\n    const tenant = tenantOptions?.find(t => t?.value === value);\n    onTenantChange(tenant);\n  };\n\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Building2\" size={16} className=\"text-primary\" />\n          <span className=\"text-sm font-medium text-foreground\">Organização</span>\n        </div>\n        \n        <button\n          type=\"button\"\n          onClick={toggleExpanded}\n          className=\"text-xs text-muted-foreground hover:text-foreground transition-enterprise\"\n          disabled={isLoading}\n        >\n          {isExpanded ? 'Ocultar opções' : 'Ver todas'}\n        </button>\n      </div>\n      {/* Tenant Selector */}\n      <Select\n        label=\"Selecione sua empresa\"\n        description=\"Escolha a organização para fazer login\"\n        placeholder=\"Selecione uma empresa...\"\n        options={tenantOptions}\n        value={selectedTenant?.value || ''}\n        onChange={handleTenantChange}\n        disabled={isLoading}\n        searchable={tenantOptions?.length > 5}\n        required\n        className=\"transition-enterprise\"\n      />\n      {/* Selected Tenant Info */}\n      {selectedTenant && (\n        <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-3\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"flex items-center justify-center w-8 h-8 bg-primary/10 rounded-lg\">\n              <Icon name=\"Building2\" size={16} className=\"text-primary\" />\n            </div>\n            \n            <div className=\"flex-1 space-y-1\">\n              <h4 className=\"text-sm font-medium text-foreground\">{selectedTenant?.label}</h4>\n              <p className=\"text-xs text-muted-foreground\">{selectedTenant?.description}</p>\n              \n              {/* Tenant Features */}\n              <div className=\"flex items-center space-x-3 text-xs text-muted-foreground mt-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"Users\" size={10} />\n                  <span>Multi-usuário</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"Shield\" size={10} />\n                  <span>SSO Ativo</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"Database\" size={10} />\n                  <span>Backup Diário</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Expanded Options */}\n      {isExpanded && (\n        <div className=\"space-y-2\">\n          <h5 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n            Organizações Disponíveis\n          </h5>\n          \n          <div className=\"grid gap-2\">\n            {tenantOptions?.map((tenant) => (\n              <button\n                key={tenant?.value}\n                onClick={() => handleTenantChange(tenant?.value)}\n                disabled={isLoading}\n                className={`\n                  flex items-center space-x-3 p-3 rounded-lg border transition-enterprise text-left\n                  ${selectedTenant?.value === tenant?.value\n                    ? 'border-primary bg-primary/5 text-primary' :'border-border hover:border-primary/50 hover:bg-muted/50'\n                  }\n                `}\n              >\n                <div className={`\n                  flex items-center justify-center w-6 h-6 rounded\n                  ${selectedTenant?.value === tenant?.value\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-muted-foreground'\n                  }\n                `}>\n                  <Icon name=\"Building2\" size={12} />\n                </div>\n                \n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-medium\">{tenant?.label}</div>\n                  <div className=\"text-xs text-muted-foreground\">{tenant?.description}</div>\n                </div>\n                \n                {selectedTenant?.value === tenant?.value && (\n                  <Icon name=\"Check\" size={16} className=\"text-primary\" />\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n      {/* Help Text */}\n      <div className=\"text-xs text-muted-foreground text-center\">\n        Não encontra sua empresa? Entre em contato com o administrador do sistema\n      </div>\n    </div>\n  );\n};\n\nexport default TenantSelector;","size_bytes":5568},"attached_assets/TicketCard_1754603675756.jsx":{"content":"import React, { useState } from 'react';\nimport { useDrag } from 'react-dnd';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst TicketCard = ({ \n  ticket, \n  onEdit, \n  onSelect, \n  isSelected, \n  canDrag = true,\n  showGhost = false \n}) => {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'ticket',\n    item: { id: ticket?.id, status: ticket?.status },\n    canDrag,\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'Critical': return 'bg-error text-error-foreground';\n      case 'High': return 'bg-warning text-warning-foreground';\n      case 'Medium': return 'bg-accent text-accent-foreground';\n      case 'Low': return 'bg-secondary text-secondary-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getSLAStatus = (slaPercentage) => {\n    if (slaPercentage >= 90) return { color: 'text-error', bg: 'bg-error/10', pulse: true };\n    if (slaPercentage >= 70) return { color: 'text-warning', bg: 'bg-warning/10', pulse: false };\n    return { color: 'text-success', bg: 'bg-success/10', pulse: false };\n  };\n\n  const slaStatus = getSLAStatus(ticket?.slaPercentage);\n  const isOverdue = ticket?.slaPercentage >= 90;\n\n  return (\n    <div\n      ref={drag}\n      className={`\n        bg-card border border-border rounded-lg p-4 shadow-enterprise cursor-pointer\n        transition-all duration-200 hover:shadow-enterprise-lg\n        ${isDragging ? 'opacity-50 rotate-2 scale-105' : ''}\n        ${showGhost ? 'opacity-30 border-dashed' : ''}\n        ${isSelected ? 'ring-2 ring-primary' : ''}\n        ${isOverdue ? 'border-error animate-pulse' : ''}\n        ${!canDrag ? 'cursor-default' : 'cursor-grab active:cursor-grabbing'}\n      `}\n      onClick={() => onEdit(ticket)}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            checked={isSelected}\n            onChange={(e) => {\n              e?.stopPropagation();\n              onSelect(ticket?.id, e?.target?.checked);\n            }}\n            className=\"w-4 h-4 text-primary border-border rounded focus:ring-primary\"\n          />\n          <span className=\"text-sm font-mono text-muted-foreground\">#{ticket?.id}</span>\n        </div>\n        <div className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(ticket?.priority)}`}>\n          {ticket?.priority}\n        </div>\n      </div>\n      {/* Subject */}\n      <h3 className=\"font-medium text-sm text-foreground mb-2 line-clamp-2 leading-tight\">\n        {ticket?.subject}\n      </h3>\n      {/* Requester */}\n      <div className=\"flex items-center space-x-2 mb-3\">\n        <Image\n          src={ticket?.requester?.avatar}\n          alt={ticket?.requester?.name}\n          className=\"w-6 h-6 rounded-full object-cover\"\n        />\n        <span className=\"text-xs text-muted-foreground truncate\">\n          {ticket?.requester?.name}\n        </span>\n      </div>\n      {/* SLA Timer */}\n      <div className={`flex items-center space-x-2 mb-3 p-2 rounded-md ${slaStatus?.bg}`}>\n        <Icon \n          name=\"Clock\" \n          size={14} \n          className={`${slaStatus?.color} ${slaStatus?.pulse ? 'animate-pulse' : ''}`} \n        />\n        <div className=\"flex-1\">\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className={`text-xs font-medium ${slaStatus?.color}`}>\n              SLA: {ticket?.slaRemaining}\n            </span>\n            <span className={`text-xs ${slaStatus?.color}`}>\n              {ticket?.slaPercentage}%\n            </span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-1.5\">\n            <div\n              className={`h-1.5 rounded-full transition-all duration-300 ${\n                ticket?.slaPercentage >= 90 ? 'bg-error' :\n                ticket?.slaPercentage >= 70 ? 'bg-warning' : 'bg-success'\n              }`}\n              style={{ width: `${Math.min(ticket?.slaPercentage, 100)}%` }}\n            />\n          </div>\n        </div>\n      </div>\n      {/* Assigned Agent */}\n      {ticket?.assignedAgent && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Image\n              src={ticket?.assignedAgent?.avatar}\n              alt={ticket?.assignedAgent?.name}\n              className=\"w-5 h-5 rounded-full object-cover\"\n            />\n            <span className=\"text-xs text-muted-foreground truncate\">\n              {ticket?.assignedAgent?.name}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            {ticket?.hasAttachments && (\n              <Icon name=\"Paperclip\" size={12} className=\"text-muted-foreground\" />\n            )}\n            {ticket?.commentCount > 0 && (\n              <div className=\"flex items-center space-x-1\">\n                <Icon name=\"MessageCircle\" size={12} className=\"text-muted-foreground\" />\n                <span className=\"text-xs text-muted-foreground\">{ticket?.commentCount}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {/* Quick Actions */}\n      <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border\">\n        <div className=\"flex items-center space-x-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"xs\"\n            iconName=\"Play\"\n            iconSize={12}\n            onClick={(e) => {\n              e?.stopPropagation();\n              // Handle play action\n            }}\n            className=\"text-success hover:text-success hover:bg-success/10\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"xs\"\n            iconName=\"Pause\"\n            iconSize={12}\n            onClick={(e) => {\n              e?.stopPropagation();\n              // Handle pause action\n            }}\n            className=\"text-warning hover:text-warning hover:bg-warning/10\"\n          />\n        </div>\n        <span className=\"text-xs text-muted-foreground\">\n          {new Date(ticket?.updatedAt)?.toLocaleDateString('pt-BR')}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketCard;","size_bytes":6403},"attached_assets/TicketGrid_1754603794889.jsx":{"content":"import React, { useState, useMemo } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst TicketGrid = ({ tickets, selectedTickets, onTicketSelect, onTicketPreview, searchQuery }) => {\n  const [sortConfig, setSortConfig] = useState({ key: 'id', direction: 'desc' });\n  const [selectedRows, setSelectedRows] = useState(new Set());\n\n  const priorityConfig = {\n    critical: { label: 'Crítica', color: 'text-red-600 bg-red-50', icon: 'AlertTriangle' },\n    high: { label: 'Alta', color: 'text-orange-600 bg-orange-50', icon: 'ArrowUp' },\n    medium: { label: 'Média', color: 'text-yellow-600 bg-yellow-50', icon: 'Minus' },\n    low: { label: 'Baixa', color: 'text-green-600 bg-green-50', icon: 'ArrowDown' }\n  };\n\n  const statusConfig = {\n    todo: { label: 'A Fazer', color: 'text-gray-600 bg-gray-50' },\n    attending: { label: 'Atendendo', color: 'text-blue-600 bg-blue-50' },\n    paused: { label: 'Pausado', color: 'text-yellow-600 bg-yellow-50' },\n    completed: { label: 'Concluído', color: 'text-green-600 bg-green-50' }\n  };\n\n  const getSLAColor = (percentage) => {\n    if (percentage >= 90) return 'bg-red-500';\n    if (percentage >= 70) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  const getSLATextColor = (percentage) => {\n    if (percentage >= 90) return 'text-red-600';\n    if (percentage >= 70) return 'text-yellow-600';\n    return 'text-green-600';\n  };\n\n  const formatTimeRemaining = (minutes) => {\n    if (minutes <= 0) return 'Vencido';\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 24) {\n      const days = Math.floor(hours / 24);\n      return `${days}d ${hours % 24}h`;\n    }\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const sortedTickets = useMemo(() => {\n    let filteredTickets = tickets;\n    \n    if (searchQuery) {\n      filteredTickets = tickets?.filter(ticket =>\n        ticket?.subject?.toLowerCase()?.includes(searchQuery?.toLowerCase()) ||\n        ticket?.requester?.toLowerCase()?.includes(searchQuery?.toLowerCase()) ||\n        ticket?.id?.toString()?.includes(searchQuery)\n      );\n    }\n\n    return [...filteredTickets]?.sort((a, b) => {\n      if (sortConfig?.key === 'id') {\n        return sortConfig?.direction === 'asc' ? a?.id - b?.id : b?.id - a?.id;\n      }\n      \n      const aValue = a?.[sortConfig?.key];\n      const bValue = b?.[sortConfig?.key];\n      \n      if (aValue < bValue) return sortConfig?.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortConfig?.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tickets, sortConfig, searchQuery]);\n\n  const handleSort = (key) => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev?.key === key && prev?.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleRowSelect = (ticketId) => {\n    const newSelected = new Set(selectedRows);\n    if (newSelected?.has(ticketId)) {\n      newSelected?.delete(ticketId);\n    } else {\n      newSelected?.add(ticketId);\n    }\n    setSelectedRows(newSelected);\n    onTicketSelect(Array.from(newSelected));\n  };\n\n  const handleSelectAll = () => {\n    if (selectedRows?.size === sortedTickets?.length) {\n      setSelectedRows(new Set());\n      onTicketSelect([]);\n    } else {\n      const allIds = new Set(sortedTickets.map(t => t.id));\n      setSelectedRows(allIds);\n      onTicketSelect(Array.from(allIds));\n    }\n  };\n\n  const SortableHeader = ({ label, sortKey, className = \"\" }) => (\n    <th \n      className={`px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted transition-enterprise ${className}`}\n      onClick={() => handleSort(sortKey)}\n    >\n      <div className=\"flex items-center space-x-1\">\n        <span>{label}</span>\n        <Icon \n          name={sortConfig?.key === sortKey && sortConfig?.direction === 'desc' ? \"ChevronDown\" : \"ChevronUp\"} \n          size={12}\n          className={sortConfig?.key === sortKey ? 'text-primary' : 'text-muted-foreground'}\n        />\n      </div>\n    </th>\n  );\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border shadow-enterprise h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h2 className=\"text-lg font-semibold text-foreground\">\n              Tickets ({sortedTickets?.length})\n            </h2>\n            {selectedRows?.size > 0 && (\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedRows?.size} selecionados\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" iconName=\"Download\">\n              Exportar\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" iconName=\"RefreshCw\">\n              Atualizar\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Table */}\n      <div className=\"flex-1 overflow-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/50 sticky top-0 z-10\">\n            <tr>\n              <th className=\"px-4 py-3 w-12\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedRows?.size === sortedTickets?.length && sortedTickets?.length > 0}\n                  onChange={handleSelectAll}\n                  className=\"rounded border-border\"\n                />\n              </th>\n              <SortableHeader label=\"ID\" sortKey=\"id\" className=\"w-20\" />\n              <SortableHeader label=\"Assunto\" sortKey=\"subject\" className=\"min-w-64\" />\n              <SortableHeader label=\"Solicitante\" sortKey=\"requester\" className=\"w-48\" />\n              <SortableHeader label=\"Responsável\" sortKey=\"assignee\" className=\"w-48\" />\n              <SortableHeader label=\"Prioridade\" sortKey=\"priority\" className=\"w-32\" />\n              <SortableHeader label=\"Status\" sortKey=\"status\" className=\"w-32\" />\n              <SortableHeader label=\"SLA\" sortKey=\"slaPercentage\" className=\"w-32\" />\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider w-32\">\n                Ações\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {sortedTickets?.map((ticket) => (\n              <tr\n                key={ticket?.id}\n                className={`hover:bg-muted/50 transition-enterprise cursor-pointer ${\n                  selectedRows?.has(ticket?.id) ? 'bg-primary/5' : ''\n                }`}\n                onClick={() => onTicketPreview(ticket)}\n              >\n                <td className=\"px-4 py-3\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedRows?.has(ticket?.id)}\n                    onChange={(e) => {\n                      e?.stopPropagation();\n                      handleRowSelect(ticket?.id);\n                    }}\n                    className=\"rounded border-border\"\n                  />\n                </td>\n                <td className=\"px-4 py-3\">\n                  <span className=\"text-sm font-medium text-foreground\">#{ticket?.id}</span>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"max-w-xs\">\n                    <p className=\"text-sm font-medium text-foreground truncate\">{ticket?.subject}</p>\n                    <p className=\"text-xs text-muted-foreground truncate\">{ticket?.category}</p>\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Image\n                      src={ticket?.requesterAvatar}\n                      alt={ticket?.requester}\n                      className=\"w-6 h-6 rounded-full\"\n                    />\n                    <span className=\"text-sm text-foreground\">{ticket?.requester}</span>\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  {ticket?.assignee ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <Image\n                        src={ticket?.assigneeAvatar}\n                        alt={ticket?.assignee}\n                        className=\"w-6 h-6 rounded-full\"\n                      />\n                      <span className=\"text-sm text-foreground\">{ticket?.assignee}</span>\n                    </div>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">Não atribuído</span>\n                  )}\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${priorityConfig?.[ticket?.priority]?.color}`}>\n                    <Icon name={priorityConfig?.[ticket?.priority]?.icon} size={12} />\n                    <span>{priorityConfig?.[ticket?.priority]?.label}</span>\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${statusConfig?.[ticket?.status]?.color}`}>\n                    {statusConfig?.[ticket?.status]?.label}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex-1 bg-gray-200 rounded-full h-1.5\">\n                        <div\n                          className={`h-1.5 rounded-full transition-all ${getSLAColor(ticket?.slaPercentage)}`}\n                          style={{ width: `${Math.min(ticket?.slaPercentage, 100)}%` }}\n                        ></div>\n                      </div>\n                      <span className={`text-xs font-medium ${getSLATextColor(ticket?.slaPercentage)}`}>\n                        {ticket?.slaPercentage}%\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatTimeRemaining(ticket?.timeRemaining)}\n                    </p>\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={(e) => {\n                        e?.stopPropagation();\n                        // Handle play/pause action\n                      }}\n                      className=\"w-6 h-6\"\n                    >\n                      <Icon name={ticket?.status === 'attending' ? \"Pause\" : \"Play\"} size={12} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={(e) => {\n                        e?.stopPropagation();\n                        // Handle edit action\n                      }}\n                      className=\"w-6 h-6\"\n                    >\n                      <Icon name=\"Edit\" size={12} />\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {/* Keyboard Shortcuts Help */}\n      <div className=\"p-3 border-t border-border bg-muted/30\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span><kbd className=\"px-1 py-0.5 bg-muted rounded\">j/k</kbd> navegar</span>\n            <span><kbd className=\"px-1 py-0.5 bg-muted rounded\">espaço</kbd> preview</span>\n            <span><kbd className=\"px-1 py-0.5 bg-muted rounded\">a</kbd> atribuir</span>\n          </div>\n          <span>Última atualização: {new Date()?.toLocaleTimeString('pt-BR')}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketGrid;","size_bytes":12273},"attached_assets/TicketModal_1754603675756.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst TicketModal = ({ ticket, isOpen, onClose, onSave, onDelete }) => {\n  const [formData, setFormData] = useState({\n    subject: '',\n    description: '',\n    priority: 'Medium',\n    status: 'todo',\n    assignedAgent: '',\n    category: '',\n    tags: []\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState('details');\n\n  useEffect(() => {\n    if (ticket) {\n      setFormData({\n        subject: ticket?.subject || '',\n        description: ticket?.description || '',\n        priority: ticket?.priority || 'Medium',\n        status: ticket?.status || 'todo',\n        assignedAgent: ticket?.assignedAgent?.id || '',\n        category: ticket?.category || '',\n        tags: ticket?.tags || []\n      });\n    }\n  }, [ticket]);\n\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      await onSave({ ...ticket, ...formData });\n      onClose();\n    } catch (error) {\n      console.error('Erro ao salvar ticket:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (window.confirm('Tem certeza que deseja excluir este ticket?')) {\n      setIsLoading(true);\n      try {\n        await onDelete(ticket?.id);\n        onClose();\n      } catch (error) {\n        console.error('Erro ao excluir ticket:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const priorityOptions = [\n    { value: 'Low', label: 'Baixa' },\n    { value: 'Medium', label: 'Média' },\n    { value: 'High', label: 'Alta' },\n    { value: 'Critical', label: 'Crítica' }\n  ];\n\n  const statusOptions = [\n    { value: 'todo', label: 'A Fazer' },\n    { value: 'attending', label: 'Em Atendimento' },\n    { value: 'paused', label: 'Pausado' },\n    { value: 'completed', label: 'Concluído' }\n  ];\n\n  const agentOptions = [\n    { value: '', label: 'Não atribuído' },\n    { value: 'ana.silva', label: 'Ana Silva' },\n    { value: 'carlos.santos', label: 'Carlos Santos' },\n    { value: 'maria.oliveira', label: 'Maria Oliveira' },\n    { value: 'joao.ferreira', label: 'João Ferreira' }\n  ];\n\n  const categoryOptions = [\n    { value: 'technical', label: 'Técnico' },\n    { value: 'billing', label: 'Financeiro' },\n    { value: 'general', label: 'Geral' },\n    { value: 'feature', label: 'Funcionalidade' }\n  ];\n\n  const mockComments = [\n    {\n      id: 1,\n      author: { name: 'Ana Silva', avatar: 'https://randomuser.me/api/portraits/women/1.jpg' },\n      content: 'Iniciando análise do problema reportado pelo cliente.',\n      timestamp: new Date(Date.now() - 3600000),\n      isInternal: false\n    },\n    {\n      id: 2,\n      author: { name: 'Carlos Santos', avatar: 'https://randomuser.me/api/portraits/men/2.jpg' },\n      content: 'Identificado problema na configuração do sistema. Aplicando correção.',\n      timestamp: new Date(Date.now() - 1800000),\n      isInternal: true\n    }\n  ];\n\n  const mockHistory = [\n    {\n      id: 1,\n      action: 'Ticket criado',\n      user: 'Sistema',\n      timestamp: new Date(Date.now() - 86400000),\n      details: 'Ticket criado automaticamente via formulário web'\n    },\n    {\n      id: 2,\n      action: 'Status alterado',\n      user: 'Ana Silva',\n      timestamp: new Date(Date.now() - 7200000),\n      details: 'De \"A Fazer\" para \"Em Atendimento\"'\n    },\n    {\n      id: 3,\n      action: 'Prioridade alterada',\n      user: 'Carlos Santos',\n      timestamp: new Date(Date.now() - 3600000),\n      details: 'De \"Média\" para \"Alta\"'\n    }\n  ];\n\n  if (!isOpen || !ticket) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-card rounded-lg shadow-enterprise-lg w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Ticket\" size={24} className=\"text-primary\" />\n              <h2 className=\"text-xl font-semibold text-foreground\">\n                Ticket #{ticket?.id}\n              </h2>\n            </div>\n            <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n              ticket?.priority === 'Critical' ? 'bg-error text-error-foreground' :\n              ticket?.priority === 'High' ? 'bg-warning text-warning-foreground' :\n              ticket?.priority === 'Medium' ? 'bg-accent text-accent-foreground' :\n              'bg-secondary text-secondary-foreground'\n            }`}>\n              {ticket?.priority}\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            iconName=\"X\"\n            iconSize={20}\n            onClick={onClose}\n          />\n        </div>\n\n        {/* Tabs */}\n        <div className=\"border-b border-border\">\n          <nav className=\"flex space-x-8 px-6\">\n            {[\n              { id: 'details', label: 'Detalhes', icon: 'FileText' },\n              { id: 'comments', label: 'Comentários', icon: 'MessageCircle' },\n              { id: 'history', label: 'Histórico', icon: 'Clock' },\n              { id: 'attachments', label: 'Anexos', icon: 'Paperclip' }\n            ]?.map((tab) => (\n              <button\n                key={tab?.id}\n                onClick={() => setActiveTab(tab?.id)}\n                className={`flex items-center space-x-2 py-4 border-b-2 transition-colors ${\n                  activeTab === tab?.id\n                    ? 'border-primary text-primary' :'border-transparent text-muted-foreground hover:text-foreground'\n                }`}\n              >\n                <Icon name={tab?.icon} size={16} />\n                <span className=\"font-medium\">{tab?.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto max-h-96\">\n          {activeTab === 'details' && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <Input\n                    label=\"Assunto\"\n                    value={formData?.subject}\n                    onChange={(e) => setFormData({ ...formData, subject: e?.target?.value })}\n                    required\n                  />\n                  \n                  <Select\n                    label=\"Prioridade\"\n                    options={priorityOptions}\n                    value={formData?.priority}\n                    onChange={(value) => setFormData({ ...formData, priority: value })}\n                  />\n                  \n                  <Select\n                    label=\"Status\"\n                    options={statusOptions}\n                    value={formData?.status}\n                    onChange={(value) => setFormData({ ...formData, status: value })}\n                  />\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <Select\n                    label=\"Agente Responsável\"\n                    options={agentOptions}\n                    value={formData?.assignedAgent}\n                    onChange={(value) => setFormData({ ...formData, assignedAgent: value })}\n                  />\n                  \n                  <Select\n                    label=\"Categoria\"\n                    options={categoryOptions}\n                    value={formData?.category}\n                    onChange={(value) => setFormData({ ...formData, category: value })}\n                  />\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Solicitante\n                    </label>\n                    <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                      <Image\n                        src={ticket?.requester?.avatar}\n                        alt={ticket?.requester?.name}\n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                      <div>\n                        <p className=\"font-medium text-foreground\">{ticket?.requester?.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{ticket?.requester?.email}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Descrição\n                </label>\n                <textarea\n                  value={formData?.description}\n                  onChange={(e) => setFormData({ ...formData, description: e?.target?.value })}\n                  rows={6}\n                  className=\"w-full px-3 py-2 border border-border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent resize-none\"\n                  placeholder=\"Descreva o problema ou solicitação...\"\n                />\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'comments' && (\n            <div className=\"space-y-4\">\n              {mockComments?.map((comment) => (\n                <div key={comment?.id} className=\"flex space-x-3\">\n                  <Image\n                    src={comment?.author?.avatar}\n                    alt={comment?.author?.name}\n                    className=\"w-8 h-8 rounded-full object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <span className=\"font-medium text-foreground\">{comment?.author?.name}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {comment?.timestamp?.toLocaleString('pt-BR')}\n                      </span>\n                      {comment?.isInternal && (\n                        <span className=\"text-xs bg-warning text-warning-foreground px-2 py-1 rounded\">\n                          Interno\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-foreground\">{comment?.content}</p>\n                  </div>\n                </div>\n              ))}\n              \n              <div className=\"border-t border-border pt-4\">\n                <textarea\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent resize-none\"\n                  placeholder=\"Adicionar comentário...\"\n                />\n                <div className=\"flex justify-between items-center mt-2\">\n                  <label className=\"flex items-center space-x-2\">\n                    <input type=\"checkbox\" className=\"rounded\" />\n                    <span className=\"text-sm text-muted-foreground\">Comentário interno</span>\n                  </label>\n                  <Button variant=\"default\" size=\"sm\">\n                    Adicionar Comentário\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'history' && (\n            <div className=\"space-y-4\">\n              {mockHistory?.map((entry) => (\n                <div key={entry?.id} className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <span className=\"font-medium text-foreground\">{entry?.action}</span>\n                      <span className=\"text-sm text-muted-foreground\">por {entry?.user}</span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">{entry?.details}</p>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {entry?.timestamp?.toLocaleString('pt-BR')}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === 'attachments' && (\n            <div className=\"text-center py-8\">\n              <Icon name=\"Paperclip\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-4\">Nenhum anexo encontrado</p>\n              <Button variant=\"outline\" iconName=\"Upload\" iconPosition=\"left\">\n                Adicionar Anexo\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between p-6 border-t border-border bg-muted/30\">\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"destructive\"\n              iconName=\"Trash2\"\n              iconPosition=\"left\"\n              iconSize={16}\n              onClick={handleDelete}\n              disabled={isLoading}\n            >\n              Excluir\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n            >\n              Cancelar\n            </Button>\n            <Button\n              variant=\"default\"\n              iconName=\"Save\"\n              iconPosition=\"left\"\n              iconSize={16}\n              loading={isLoading}\n              onClick={handleSave}\n            >\n              Salvar Alterações\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketModal;","size_bytes":14036},"attached_assets/TicketPreview_1754603794889.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst TicketPreview = ({ ticket, onClose, onAssign, onStatusChange }) => {\n  const [activeTab, setActiveTab] = useState('details');\n\n  if (!ticket) {\n    return (\n      <div className=\"w-full bg-card h-full flex items-center justify-center\">\n        <div className=\"text-center text-muted-foreground\">\n          <Icon name=\"FileText\" size={48} className=\"mx-auto mb-4 opacity-50\" />\n          <p>Selecione um ticket para visualizar</p>\n        </div>\n      </div>\n    );\n  }\n\n  const priorityConfig = {\n    critical: { label: 'Crítica', color: 'text-red-600 bg-red-50', icon: 'AlertTriangle' },\n    high: { label: 'Alta', color: 'text-orange-600 bg-orange-50', icon: 'ArrowUp' },\n    medium: { label: 'Média', color: 'text-yellow-600 bg-yellow-50', icon: 'Minus' },\n    low: { label: 'Baixa', color: 'text-green-600 bg-green-50', icon: 'ArrowDown' }\n  };\n\n  const statusConfig = {\n    todo: { label: 'A Fazer', color: 'text-gray-600 bg-gray-50' },\n    attending: { label: 'Atendendo', color: 'text-blue-600 bg-blue-50' },\n    paused: { label: 'Pausado', color: 'text-yellow-600 bg-yellow-50' },\n    completed: { label: 'Concluído', color: 'text-green-600 bg-green-50' }\n  };\n\n  const getSLAColor = (percentage) => {\n    if (percentage >= 90) return 'bg-red-500';\n    if (percentage >= 70) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  const formatTimeRemaining = (minutes) => {\n    if (minutes <= 0) return 'Vencido';\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 24) {\n      const days = Math.floor(hours / 24);\n      return `${days}d ${hours % 24}h`;\n    }\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const recentActivity = [\n    {\n      id: 1,\n      type: 'comment',\n      user: 'Ana Silva',\n      avatar: 'https://randomuser.me/api/portraits/women/1.jpg',\n      action: 'adicionou um comentário',\n      time: '2 min atrás',\n      content: 'Problema identificado no servidor de email. Iniciando correção.'\n    },\n    {\n      id: 2,\n      type: 'status',\n      user: 'Sistema',\n      avatar: null,\n      action: 'alterou status para Atendendo',\n      time: '15 min atrás'\n    },\n    {\n      id: 3,\n      type: 'assignment',\n      user: 'Carlos Santos',\n      avatar: 'https://randomuser.me/api/portraits/men/2.jpg',\n      action: 'atribuiu ticket para Ana Silva',\n      time: '1h atrás'\n    }\n  ];\n\n  const tabs = [\n    { id: 'details', label: 'Detalhes', icon: 'FileText' },\n    { id: 'activity', label: 'Atividade', icon: 'Activity' },\n    { id: 'comments', label: 'Comentários', icon: 'MessageSquare' }\n  ];\n\n  return (\n    <div className=\"w-full bg-card h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border flex-shrink-0\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground truncate\">Ticket #{ticket?.id}</h3>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <Icon name=\"X\" size={16} />\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={ticket?.status === 'attending' ? \"outline\" : \"default\"}\n            size=\"sm\"\n            iconName={ticket?.status === 'attending' ? \"Pause\" : \"Play\"}\n            iconPosition=\"left\"\n            onClick={() => onStatusChange(ticket?.id, ticket?.status === 'attending' ? 'paused' : 'attending')}\n            className=\"text-xs\"\n          >\n            {ticket?.status === 'attending' ? 'Pausar' : 'Iniciar'}\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"User\" onClick={() => onAssign(ticket?.id)} className=\"text-xs\">\n            Atribuir\n          </Button>\n        </div>\n      </div>\n      \n      {/* Tabs */}\n      <div className=\"border-b border-border flex-shrink-0\">\n        <nav className=\"flex\">\n          {tabs?.map((tab) => (\n            <button\n              key={tab?.id}\n              onClick={() => setActiveTab(tab?.id)}\n              className={`flex items-center space-x-1 px-3 py-2 text-xs font-medium transition-enterprise ${\n                activeTab === tab?.id\n                  ? 'text-primary border-b-2 border-primary' : 'text-muted-foreground hover:text-foreground'\n              }`}\n            >\n              <Icon name={tab?.icon} size={14} />\n              <span>{tab?.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n      \n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {activeTab === 'details' && (\n          <div className=\"space-y-6\">\n            {/* Basic Info */}\n            <div>\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">Informações Básicas</h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"text-xs text-muted-foreground\">Assunto</label>\n                  <p className=\"text-sm text-foreground font-medium\">{ticket?.subject}</p>\n                </div>\n                <div>\n                  <label className=\"text-xs text-muted-foreground\">Categoria</label>\n                  <p className=\"text-sm text-foreground\">{ticket?.category}</p>\n                </div>\n                <div>\n                  <label className=\"text-xs text-muted-foreground\">Descrição</label>\n                  <p className=\"text-sm text-foreground\">{ticket?.description}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Status & Priority */}\n            <div>\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">Status & Prioridade</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground\">Status</span>\n                  <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${statusConfig?.[ticket?.status]?.color}`}>\n                    {statusConfig?.[ticket?.status]?.label}\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground\">Prioridade</span>\n                  <div className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${priorityConfig?.[ticket?.priority]?.color}`}>\n                    <Icon name={priorityConfig?.[ticket?.priority]?.icon} size={12} />\n                    <span>{priorityConfig?.[ticket?.priority]?.label}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* SLA Information */}\n            <div>\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">SLA</h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-xs text-muted-foreground\">Progresso</span>\n                    <span className=\"text-xs font-medium text-foreground\">{ticket?.slaPercentage}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full transition-all ${getSLAColor(ticket?.slaPercentage)}`}\n                      style={{ width: `${Math.min(ticket?.slaPercentage, 100)}%` }}\n                    ></div>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground\">Tempo Restante</span>\n                  <span className=\"text-xs font-medium text-foreground\">\n                    {formatTimeRemaining(ticket?.timeRemaining)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* People */}\n            <div>\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">Pessoas</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <Image\n                    src={ticket?.requesterAvatar}\n                    alt={ticket?.requester}\n                    className=\"w-8 h-8 rounded-full flex-shrink-0\"\n                  />\n                  <div className=\"min-w-0\">\n                    <p className=\"text-sm font-medium text-foreground truncate\">{ticket?.requester}</p>\n                    <p className=\"text-xs text-muted-foreground\">Solicitante</p>\n                  </div>\n                </div>\n                {ticket?.assignee && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Image\n                      src={ticket?.assigneeAvatar}\n                      alt={ticket?.assignee}\n                      className=\"w-8 h-8 rounded-full flex-shrink-0\"\n                    />\n                    <div className=\"min-w-0\">\n                      <p className=\"text-sm font-medium text-foreground truncate\">{ticket?.assignee}</p>\n                      <p className=\"text-xs text-muted-foreground\">Responsável</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Timestamps */}\n            <div>\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">Datas</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground\">Criado em</span>\n                  <span className=\"text-xs text-foreground\">{ticket?.createdAt}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground\">Atualizado em</span>\n                  <span className=\"text-xs text-foreground\">{ticket?.updatedAt}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'activity' && (\n          <div className=\"space-y-4\">\n            <h4 className=\"text-sm font-medium text-foreground\">Atividade Recente</h4>\n            <div className=\"space-y-4\">\n              {recentActivity?.map((activity) => (\n                <div key={activity?.id} className=\"flex items-start space-x-3\">\n                  {activity?.avatar ? (\n                    <Image\n                      src={activity?.avatar}\n                      alt={activity?.user}\n                      className=\"w-6 h-6 rounded-full flex-shrink-0\"\n                    />\n                  ) : (\n                    <div className=\"w-6 h-6 bg-muted rounded-full flex items-center justify-center\">\n                      <Icon name=\"Settings\" size={12} className=\"text-muted-foreground\" />\n                    </div>\n                  )}\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-foreground\">\n                      <span className=\"font-medium\">{activity?.user}</span> {activity?.action}\n                    </p>\n                    {activity?.content && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">{activity?.content}</p>\n                    )}\n                    <p className=\"text-xs text-muted-foreground mt-1\">{activity?.time}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'comments' && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-sm font-medium text-foreground\">Comentários</h4>\n              <Button variant=\"outline\" size=\"sm\" iconName=\"Plus\" className=\"text-xs\">\n                Adicionar\n              </Button>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted/50 rounded-lg p-3\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Image\n                    src=\"https://randomuser.me/api/portraits/women/1.jpg\"\n                    alt=\"Ana Silva\"\n                    className=\"w-6 h-6 rounded-full flex-shrink-0\"\n                  />\n                  <span className=\"text-sm font-medium text-foreground\">Ana Silva</span>\n                  <span className=\"text-xs text-muted-foreground\">2 min atrás</span>\n                </div>\n                <p className=\"text-sm text-foreground\">\n                  Problema identificado no servidor de email. Iniciando correção do sistema de autenticação SMTP.\n                </p>\n              </div>\n              <div className=\"bg-muted/50 rounded-lg p-3\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Image\n                    src=\"https://randomuser.me/api/portraits/men/2.jpg\"\n                    alt=\"Carlos Santos\"\n                    className=\"w-6 h-6 rounded-full flex-shrink-0\"\n                  />\n                  <span className=\"text-sm font-medium text-foreground\">Carlos Santos</span>\n                  <span className=\"text-xs text-muted-foreground\">1h atrás</span>\n                </div>\n                <p className=\"text-sm text-foreground\">\n                  Ticket atribuído para análise técnica. Prioridade alta devido ao impacto no sistema de email corporativo.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TicketPreview;","size_bytes":13780},"attached_assets/UserCard_1754604173019.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst UserCard = ({ user, onEdit, onDelete, onToggleStatus, isSelected, onSelect }) => {\n  const [showActions, setShowActions] = useState(false);\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Ativo': return 'bg-success text-success-foreground';\n      case 'Inativo': return 'bg-error text-error-foreground';\n      case 'Suspenso': return 'bg-warning text-warning-foreground';\n      case 'Pendente': return 'bg-secondary text-secondary-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getRoleColor = (role) => {\n    switch (role) {\n      case 'Administrador': return 'bg-primary text-primary-foreground';\n      case 'Supervisor': return 'bg-accent text-accent-foreground';\n      case 'Atendente': return 'bg-secondary text-secondary-foreground';\n      case 'Usuário': return 'bg-muted text-muted-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <div \n      className={`bg-card border border-border rounded-lg p-4 transition-enterprise hover:shadow-enterprise-lg ${\n        isSelected ? 'ring-2 ring-primary' : ''\n      }`}\n      onMouseEnter={() => setShowActions(true)}\n      onMouseLeave={() => setShowActions(false)}\n    >\n      <div className=\"flex items-start space-x-4\">\n        <div className=\"flex items-center space-x-3\">\n          <Checkbox\n            checked={isSelected}\n            onChange={(e) => onSelect(user?.id, e?.target?.checked)}\n            className=\"mt-1\"\n          />\n          <div className=\"relative\">\n            <Image\n              src={user?.avatar}\n              alt={user?.nome}\n              className=\"w-12 h-12 rounded-full object-cover\"\n            />\n            <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-card ${\n              user?.status === 'Ativo' ? 'bg-success' : 'bg-error'\n            }`}></div>\n          </div>\n        </div>\n\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h3 className=\"text-sm font-semibold text-foreground truncate\">{user?.nome}</h3>\n              <p className=\"text-xs text-muted-foreground truncate\">{user?.email}</p>\n              <p className=\"text-xs text-muted-foreground\">{user?.departamento}</p>\n            </div>\n            \n            <div className=\"flex flex-col items-end space-y-1\">\n              <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(user?.status)}`}>\n                {user?.status}\n              </span>\n              <span className={`px-2 py-1 text-xs font-medium rounded-full ${getRoleColor(user?.funcao)}`}>\n                {user?.funcao}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"mt-3 flex items-center justify-between text-xs text-muted-foreground\">\n            <div className=\"flex items-center space-x-4\">\n              <span>ID: {user?.id}</span>\n              <span>Criado: {user?.dataCriacao}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Calendar\" size={12} />\n              <span>Último acesso: {user?.ultimoAcesso}</span>\n            </div>\n          </div>\n\n          {showActions && (\n            <div className=\"mt-3 flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"xs\"\n                iconName=\"Edit\"\n                iconPosition=\"left\"\n                iconSize={12}\n                onClick={() => onEdit(user)}\n              >\n                Editar\n              </Button>\n              <Button\n                variant={user?.status === 'Ativo' ? 'warning' : 'success'}\n                size=\"xs\"\n                iconName={user?.status === 'Ativo' ? 'UserX' : 'UserCheck'}\n                iconPosition=\"left\"\n                iconSize={12}\n                onClick={() => onToggleStatus(user)}\n              >\n                {user?.status === 'Ativo' ? 'Suspender' : 'Ativar'}\n              </Button>\n              <Button\n                variant=\"destructive\"\n                size=\"xs\"\n                iconName=\"Trash2\"\n                iconPosition=\"left\"\n                iconSize={12}\n                onClick={() => onDelete(user)}\n              >\n                Excluir\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserCard;","size_bytes":4711},"attached_assets/UserDataGrid_1754604173019.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst UserDataGrid = ({ \n  users, \n  selectedUsers, \n  onUserSelect, \n  onSelectAll, \n  onEdit, \n  onDelete, \n  onToggleStatus,\n  sortConfig,\n  onSort \n}) => {\n  const [hoveredRow, setHoveredRow] = useState(null);\n\n  const columns = [\n    { key: 'select', label: '', width: '50px', sortable: false },\n    { key: 'avatar', label: '', width: '60px', sortable: false },\n    { key: 'id', label: 'ID', width: '80px', sortable: true },\n    { key: 'nome', label: 'Nome', width: 'auto', sortable: true },\n    { key: 'email', label: 'E-mail', width: 'auto', sortable: true },\n    { key: 'departamento', label: 'Departamento', width: '150px', sortable: true },\n    { key: 'funcao', label: 'Função', width: '120px', sortable: true },\n    { key: 'status', label: 'Status', width: '100px', sortable: true },\n    { key: 'ultimoAcesso', label: 'Último Acesso', width: '140px', sortable: true },\n    { key: 'actions', label: 'Ações', width: '120px', sortable: false }\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Ativo': return 'bg-success text-success-foreground';\n      case 'Inativo': return 'bg-error text-error-foreground';\n      case 'Suspenso': return 'bg-warning text-warning-foreground';\n      case 'Pendente': return 'bg-secondary text-secondary-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getRoleColor = (role) => {\n    switch (role) {\n      case 'Administrador': return 'bg-primary text-primary-foreground';\n      case 'Supervisor': return 'bg-accent text-accent-foreground';\n      case 'Atendente': return 'bg-secondary text-secondary-foreground';\n      case 'Usuário': return 'bg-muted text-muted-foreground';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getSortIcon = (columnKey) => {\n    if (sortConfig?.key !== columnKey) return 'ArrowUpDown';\n    return sortConfig?.direction === 'asc' ? 'ArrowUp' : 'ArrowDown';\n  };\n\n  const isAllSelected = users?.length > 0 && selectedUsers?.length === users?.length;\n  const isIndeterminate = selectedUsers?.length > 0 && selectedUsers?.length < users?.length;\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise overflow-hidden\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Users\" size={16} />\n          <h3 className=\"text-sm font-semibold text-foreground\">\n            Lista de Usuários ({users?.length})\n          </h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"xs\"\n            iconName=\"Download\"\n            iconPosition=\"left\"\n          >\n            Exportar\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"xs\"\n            iconName=\"Upload\"\n            iconPosition=\"left\"\n          >\n            Importar CSV\n          </Button>\n        </div>\n      </div>\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/50\">\n            <tr>\n              {columns?.map((column) => (\n                <th\n                  key={column?.key}\n                  className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\"\n                  style={{ width: column?.width }}\n                >\n                  {column?.key === 'select' ? (\n                    <Checkbox\n                      checked={isAllSelected}\n                      indeterminate={isIndeterminate}\n                      onChange={(e) => onSelectAll(e?.target?.checked)}\n                    />\n                  ) : column?.sortable ? (\n                    <button\n                      onClick={() => onSort(column?.key)}\n                      className=\"flex items-center space-x-1 hover:text-foreground transition-enterprise\"\n                    >\n                      <span>{column?.label}</span>\n                      <Icon name={getSortIcon(column?.key)} size={12} />\n                    </button>\n                  ) : (\n                    column?.label\n                  )}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {users?.map((user) => (\n              <tr\n                key={user?.id}\n                className={`transition-enterprise hover:bg-muted/50 ${\n                  selectedUsers?.includes(user?.id) ? 'bg-primary/5' : ''\n                }`}\n                onMouseEnter={() => setHoveredRow(user?.id)}\n                onMouseLeave={() => setHoveredRow(null)}\n              >\n                {/* Select */}\n                <td className=\"px-4 py-3\">\n                  <Checkbox\n                    checked={selectedUsers?.includes(user?.id)}\n                    onChange={(e) => onUserSelect(user?.id, e?.target?.checked)}\n                  />\n                </td>\n\n                {/* Avatar */}\n                <td className=\"px-4 py-3\">\n                  <div className=\"relative\">\n                    <Image\n                      src={user?.avatar}\n                      alt={user?.nome}\n                      className=\"w-8 h-8 rounded-full object-cover\"\n                    />\n                    <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-card ${\n                      user?.status === 'Ativo' ? 'bg-success' : 'bg-error'\n                    }`}></div>\n                  </div>\n                </td>\n\n                {/* ID */}\n                <td className=\"px-4 py-3 text-sm font-mono text-muted-foreground\">\n                  #{user?.id}\n                </td>\n\n                {/* Nome */}\n                <td className=\"px-4 py-3\">\n                  <div>\n                    <div className=\"text-sm font-medium text-foreground\">{user?.nome}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Criado em {user?.dataCriacao}\n                    </div>\n                  </div>\n                </td>\n\n                {/* Email */}\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">{user?.email}</div>\n                  <div className=\"text-xs text-muted-foreground\">{user?.telefone}</div>\n                </td>\n\n                {/* Departamento */}\n                <td className=\"px-4 py-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"Building\" size={12} className=\"text-muted-foreground\" />\n                    <span className=\"text-sm text-foreground\">{user?.departamento}</span>\n                  </div>\n                </td>\n\n                {/* Função */}\n                <td className=\"px-4 py-3\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getRoleColor(user?.funcao)}`}>\n                    {user?.funcao}\n                  </span>\n                </td>\n\n                {/* Status */}\n                <td className=\"px-4 py-3\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(user?.status)}`}>\n                    {user?.status}\n                  </span>\n                </td>\n\n                {/* Último Acesso */}\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">{user?.ultimoAcesso}</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {user?.sessaoAtiva ? 'Online' : 'Offline'}\n                  </div>\n                </td>\n\n                {/* Actions */}\n                <td className=\"px-4 py-3\">\n                  <div className={`flex items-center space-x-1 transition-opacity ${\n                    hoveredRow === user?.id ? 'opacity-100' : 'opacity-0'\n                  }`}>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => onEdit(user)}\n                      iconName=\"Edit\"\n                      iconSize={14}\n                      className=\"w-8 h-8\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => onToggleStatus(user)}\n                      iconName={user?.status === 'Ativo' ? 'UserX' : 'UserCheck'}\n                      iconSize={14}\n                      className=\"w-8 h-8\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => onDelete(user)}\n                      iconName=\"Trash2\"\n                      iconSize={14}\n                      className=\"w-8 h-8 text-error hover:text-error\"\n                    />\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {/* Empty State */}\n      {users?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Icon name=\"Users\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Nenhum usuário encontrado</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Não há usuários que correspondam aos filtros aplicados.\n          </p>\n          <Button variant=\"outline\" iconName=\"UserPlus\" iconPosition=\"left\">\n            Adicionar Primeiro Usuário\n          </Button>\n        </div>\n      )}\n      {/* Footer */}\n      {users?.length > 0 && (\n        <div className=\"flex items-center justify-between p-4 border-t border-border bg-muted/25\">\n          <div className=\"text-sm text-muted-foreground\">\n            {selectedUsers?.length > 0 && (\n              <span>{selectedUsers?.length} usuário(s) selecionado(s)</span>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">\n              Mostrando {users?.length} usuários\n            </span>\n            <div className=\"flex items-center space-x-1\">\n              <Button variant=\"outline\" size=\"xs\" iconName=\"ChevronLeft\" disabled />\n              <Button variant=\"outline\" size=\"xs\">1</Button>\n              <Button variant=\"outline\" size=\"xs\" iconName=\"ChevronRight\" disabled />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserDataGrid;","size_bytes":10818},"attached_assets/UserDetailsPanel_1754604173019.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst UserDetailsPanel = ({ user, onSave, onClose }) => {\n  const [formData, setFormData] = useState({\n    nome: user?.nome || '',\n    email: user?.email || '',\n    telefone: user?.telefone || '',\n    departamento: user?.departamento || '',\n    funcao: user?.funcao || '',\n    status: user?.status || 'Ativo',\n    avatar: user?.avatar || '',\n    assinatura: user?.assinatura || '',\n    permissoes: user?.permissoes || []\n  });\n\n  const [activeTab, setActiveTab] = useState('perfil');\n\n  const departamentoOptions = [\n    { value: 'TI', label: 'Tecnologia da Informação' },\n    { value: 'Suporte', label: 'Suporte Técnico' },\n    { value: 'Vendas', label: 'Vendas' },\n    { value: 'Marketing', label: 'Marketing' },\n    { value: 'RH', label: 'Recursos Humanos' },\n    { value: 'Financeiro', label: 'Financeiro' }\n  ];\n\n  const funcaoOptions = [\n    { value: 'Administrador', label: 'Administrador' },\n    { value: 'Supervisor', label: 'Supervisor' },\n    { value: 'Atendente', label: 'Atendente' },\n    { value: 'Usuário', label: 'Usuário' }\n  ];\n\n  const statusOptions = [\n    { value: 'Ativo', label: 'Ativo' },\n    { value: 'Inativo', label: 'Inativo' },\n    { value: 'Suspenso', label: 'Suspenso' },\n    { value: 'Pendente', label: 'Pendente' }\n  ];\n\n  const permissoesDisponiveis = [\n    { id: 'tickets_criar', label: 'Criar Tickets', categoria: 'Tickets' },\n    { id: 'tickets_editar', label: 'Editar Tickets', categoria: 'Tickets' },\n    { id: 'tickets_excluir', label: 'Excluir Tickets', categoria: 'Tickets' },\n    { id: 'tickets_atribuir', label: 'Atribuir Tickets', categoria: 'Tickets' },\n    { id: 'usuarios_visualizar', label: 'Visualizar Usuários', categoria: 'Usuários' },\n    { id: 'usuarios_criar', label: 'Criar Usuários', categoria: 'Usuários' },\n    { id: 'usuarios_editar', label: 'Editar Usuários', categoria: 'Usuários' },\n    { id: 'usuarios_excluir', label: 'Excluir Usuários', categoria: 'Usuários' },\n    { id: 'relatorios_visualizar', label: 'Visualizar Relatórios', categoria: 'Relatórios' },\n    { id: 'relatorios_exportar', label: 'Exportar Relatórios', categoria: 'Relatórios' },\n    { id: 'configuracoes_sistema', label: 'Configurações do Sistema', categoria: 'Sistema' },\n    { id: 'auditoria_logs', label: 'Logs de Auditoria', categoria: 'Sistema' }\n  ];\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handlePermissaoChange = (permissaoId, checked) => {\n    setFormData(prev => ({\n      ...prev,\n      permissoes: checked \n        ? [...prev?.permissoes, permissaoId]\n        : prev?.permissoes?.filter(p => p !== permissaoId)\n    }));\n  };\n\n  const handleSave = () => {\n    onSave(formData);\n  };\n\n  const tabs = [\n    { id: 'perfil', label: 'Perfil', icon: 'User' },\n    { id: 'permissoes', label: 'Permissões', icon: 'Shield' },\n    { id: 'atividade', label: 'Atividade', icon: 'Activity' }\n  ];\n\n  const categorias = [...new Set(permissoesDisponiveis.map(p => p.categoria))];\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise-lg h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <h2 className=\"text-lg font-semibold text-foreground\">\n          {user ? 'Editar Usuário' : 'Novo Usuário'}\n        </h2>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onClose}\n          iconName=\"X\"\n          iconSize={16}\n        />\n      </div>\n      {/* Tabs */}\n      <div className=\"flex border-b border-border\">\n        {tabs?.map((tab) => (\n          <button\n            key={tab?.id}\n            onClick={() => setActiveTab(tab?.id)}\n            className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-enterprise ${\n              activeTab === tab?.id\n                ? 'border-b-2 border-primary text-primary' :'text-muted-foreground hover:text-foreground'\n            }`}\n          >\n            <Icon name={tab?.icon} size={16} />\n            <span>{tab?.label}</span>\n          </button>\n        ))}\n      </div>\n      {/* Content */}\n      <div className=\"flex-1 p-4 overflow-y-auto\">\n        {activeTab === 'perfil' && (\n          <div className=\"space-y-6\">\n            {/* Avatar Section */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Image\n                  src={formData?.avatar}\n                  alt=\"Avatar do usuário\"\n                  className=\"w-20 h-20 rounded-full object-cover\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"absolute -bottom-2 -right-2 w-8 h-8\"\n                  iconName=\"Camera\"\n                  iconSize={14}\n                />\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-foreground\">Foto do Perfil</h3>\n                <p className=\"text-xs text-muted-foreground\">Clique no ícone para alterar</p>\n              </div>\n            </div>\n\n            {/* Basic Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                label=\"Nome Completo\"\n                type=\"text\"\n                value={formData?.nome}\n                onChange={(e) => handleInputChange('nome', e?.target?.value)}\n                required\n              />\n              <Input\n                label=\"E-mail\"\n                type=\"email\"\n                value={formData?.email}\n                onChange={(e) => handleInputChange('email', e?.target?.value)}\n                required\n              />\n              <Input\n                label=\"Telefone\"\n                type=\"tel\"\n                value={formData?.telefone}\n                onChange={(e) => handleInputChange('telefone', e?.target?.value)}\n              />\n              <Select\n                label=\"Status\"\n                options={statusOptions}\n                value={formData?.status}\n                onChange={(value) => handleInputChange('status', value)}\n              />\n            </div>\n\n            {/* Department and Role */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Select\n                label=\"Departamento\"\n                options={departamentoOptions}\n                value={formData?.departamento}\n                onChange={(value) => handleInputChange('departamento', value)}\n                searchable\n              />\n              <Select\n                label=\"Função\"\n                options={funcaoOptions}\n                value={formData?.funcao}\n                onChange={(value) => handleInputChange('funcao', value)}\n              />\n            </div>\n\n            {/* Digital Signature */}\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Assinatura Digital\n              </label>\n              <div className=\"border border-border rounded-lg p-4 bg-muted/50\">\n                {formData?.assinatura ? (\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"FileSignature\" size={16} className=\"text-success\" />\n                      <span className=\"text-sm text-foreground\">Assinatura configurada</span>\n                    </div>\n                    <Button variant=\"outline\" size=\"xs\">Alterar</Button>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <Icon name=\"FileSignature\" size={24} className=\"text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground mb-2\">Nenhuma assinatura configurada</p>\n                    <Button variant=\"outline\" size=\"sm\">Configurar Assinatura</Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'permissoes' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-sm font-medium text-foreground\">Matriz de Permissões</h3>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"xs\">Copiar de Usuário</Button>\n                <Button variant=\"outline\" size=\"xs\">Aplicar Template</Button>\n              </div>\n            </div>\n\n            {categorias?.map((categoria) => (\n              <div key={categoria} className=\"space-y-3\">\n                <h4 className=\"text-sm font-medium text-foreground border-b border-border pb-2\">\n                  {categoria}\n                </h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                  {permissoesDisponiveis?.filter(p => p?.categoria === categoria)?.map((permissao) => (\n                      <Checkbox\n                        key={permissao?.id}\n                        label={permissao?.label}\n                        checked={formData?.permissoes?.includes(permissao?.id)}\n                        onChange={(e) => handlePermissaoChange(permissao?.id, e?.target?.checked)}\n                      />\n                    ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {activeTab === 'atividade' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium text-foreground\">Histórico de Atividades</h3>\n            \n            <div className=\"space-y-3\">\n              {[\n                {\n                  acao: 'Login realizado',\n                  data: '07/08/2025 18:30',\n                  ip: '192.168.1.100',\n                  dispositivo: 'Chrome - Windows'\n                },\n                {\n                  acao: 'Ticket #1234 atualizado',\n                  data: '07/08/2025 16:45',\n                  ip: '192.168.1.100',\n                  dispositivo: 'Chrome - Windows'\n                },\n                {\n                  acao: 'Perfil atualizado',\n                  data: '06/08/2025 14:20',\n                  ip: '192.168.1.100',\n                  dispositivo: 'Chrome - Windows'\n                }\n              ]?.map((atividade, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">{atividade?.acao}</p>\n                    <p className=\"text-xs text-muted-foreground\">{atividade?.dispositivo}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-muted-foreground\">{atividade?.data}</p>\n                    <p className=\"text-xs text-muted-foreground\">{atividade?.ip}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-6 p-4 bg-warning/10 border border-warning/20 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <Icon name=\"AlertTriangle\" size={16} className=\"text-warning mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-foreground\">Controles de Segurança</h4>\n                  <div className=\"mt-2 space-y-2\">\n                    <Button variant=\"outline\" size=\"xs\" iconName=\"Key\" iconPosition=\"left\">\n                      Forçar Redefinição de Senha\n                    </Button>\n                    <Button variant=\"outline\" size=\"xs\" iconName=\"LogOut\" iconPosition=\"left\">\n                      Encerrar Todas as Sessões\n                    </Button>\n                    <Button variant=\"destructive\" size=\"xs\" iconName=\"Lock\" iconPosition=\"left\">\n                      Bloquear Conta\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {/* Footer */}\n      <div className=\"flex items-center justify-end space-x-2 p-4 border-t border-border\">\n        <Button variant=\"outline\" onClick={onClose}>\n          Cancelar\n        </Button>\n        <Button variant=\"default\" onClick={handleSave} iconName=\"Save\" iconPosition=\"left\">\n          Salvar Alterações\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default UserDetailsPanel;","size_bytes":12814},"attached_assets/ViolationHistory_1754603788535.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ViolationHistory = ({ violations, onViewDetails }) => {\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date?.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getViolationSeverity = (hoursOverdue) => {\n    if (hoursOverdue >= 24) return { color: 'text-error', bg: 'bg-error/10', label: 'Crítica' };\n    if (hoursOverdue >= 8) return { color: 'text-warning', bg: 'bg-warning/10', label: 'Alta' };\n    return { color: 'text-primary', bg: 'bg-primary/10', label: 'Média' };\n  };\n\n  const formatDuration = (hours) => {\n    if (hours < 1) return `${Math.round(hours * 60)}min`;\n    if (hours < 24) return `${Math.round(hours)}h`;\n    const days = Math.floor(hours / 24);\n    const remainingHours = Math.round(hours % 24);\n    return `${days}d ${remainingHours}h`;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-enterprise\">\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-foreground flex items-center space-x-2\">\n            <Icon name=\"AlertTriangle\" size={18} className=\"text-error\" />\n            <span>Histórico de Violações</span>\n          </h3>\n          <span className=\"text-sm text-muted-foreground\">\n            Últimas 24h\n          </span>\n        </div>\n      </div>\n      <div className=\"max-h-96 overflow-y-auto\">\n        {violations?.length === 0 ? (\n          <div className=\"p-6 text-center\">\n            <Icon name=\"CheckCircle\" size={32} className=\"text-success mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Nenhuma violação nas últimas 24 horas\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-border\">\n            {violations?.map((violation) => {\n              const severity = getViolationSeverity(violation?.hoursOverdue);\n              \n              return (\n                <div key={violation?.id} className=\"p-4 hover:bg-muted/50 transition-colors\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium text-foreground\">\n                        #{violation?.ticketId}\n                      </span>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${severity?.color} ${severity?.bg}`}>\n                        {severity?.label}\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDate(violation?.violatedAt)}\n                    </span>\n                  </div>\n                  <h4 className=\"text-sm font-medium text-foreground mb-2 line-clamp-1\">\n                    {violation?.subject}\n                  </h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-xs text-muted-foreground mb-3\">\n                    <div>\n                      <span className=\"font-medium\">Cliente:</span> {violation?.client}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Responsável:</span> {violation?.responsible}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Departamento:</span> {violation?.department}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Prioridade:</span> {violation?.priority}\n                    </div>\n                  </div>\n                  <div className=\"bg-error/5 border border-error/20 rounded-md p-3 mb-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-xs font-medium text-error\">\n                        Detalhes da Violação\n                      </span>\n                      <span className=\"text-xs text-error\">\n                        Atrasado: {formatDuration(violation?.hoursOverdue)}\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      SLA Original: {violation?.originalSLA}h | \n                      Tempo Decorrido: {formatDuration(violation?.totalTimeSpent)}\n                    </p>\n                    {violation?.reason && (\n                      <p className=\"text-xs text-error/80 mt-1\">\n                        Motivo: {violation?.reason}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {violation?.status === 'resolved' ? (\n                        <div className=\"flex items-center space-x-1 text-success\">\n                          <Icon name=\"CheckCircle\" size={14} />\n                          <span className=\"text-xs font-medium\">Resolvido</span>\n                        </div>\n                      ) : violation?.status === 'escalated' ? (\n                        <div className=\"flex items-center space-x-1 text-warning\">\n                          <Icon name=\"ArrowUp\" size={14} />\n                          <span className=\"text-xs font-medium\">Escalado</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-1 text-error\">\n                          <Icon name=\"Clock\" size={14} />\n                          <span className=\"text-xs font-medium\">Em Andamento</span>\n                        </div>\n                      )}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onViewDetails(violation)}\n                      iconName=\"ExternalLink\"\n                      iconSize={12}\n                      className=\"text-primary hover:text-primary\"\n                    >\n                      Ver Detalhes\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      {violations?.length > 0 && (\n        <div className=\"p-4 border-t border-border\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Download\"\n            iconPosition=\"left\"\n            iconSize={14}\n            className=\"w-full\"\n          >\n            Exportar Relatório de Violações\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViolationHistory;","size_bytes":6905},"attached_assets/cn_1754603529089.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}","size_bytes":139},"attached_assets/index_1754603526662.css":{"content":"body {\n  margin: 0;\n  padding: 0;\n  font-family: Inter;\n}\n\n* {\n  box-sizing: border-box;\n  line-height: normal;\n  font-family: inherit;\n  margin: unset;\n}\n","size_bytes":155},"attached_assets/index_1754603556930.jsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./styles/tailwind.css\";\nimport \"./styles/index.css\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\n\nroot.render(<App />);\n","size_bytes":271},"attached_assets/index_1754603675756.jsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { isMobile } from 'react-device-detect';\nimport Header from '../../components/ui/Header';\nimport Sidebar from '../../components/ui/Sidebar';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Input from '../../components/ui/Input';\nimport KanbanColumn from './components/KanbanColumn';\nimport FilterSidebar from './components/FilterSidebar';\nimport BulkActions from './components/BulkActions';\nimport TicketModal from './components/TicketModal';\n\nconst KanbanBoardView = () => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  const [isFilterSidebarOpen, setIsFilterSidebarOpen] = useState(false);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTicket, setSelectedTicket] = useState(null);\n  const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\n  const [filters, setFilters] = useState({});\n  const [columnFilters, setColumnFilters] = useState({});\n  const [lastSelectedIndex, setLastSelectedIndex] = useState(null);\n\n  // Mock data for tickets\n  const [tickets, setTickets] = useState([\n    {\n      id: 'TK-2025-001',\n      subject: 'Sistema de login apresentando lentidão durante horário de pico',\n      description: `O sistema de autenticação está apresentando lentidão significativa durante os horários de maior movimento (9h-11h e 14h-16h).\\n\\nUsuários relatam tempo de resposta superior a 30 segundos para realizar login.\\n\\nImpacto: Alto - afeta produtividade de toda equipe comercial.`,\n      priority: 'High',\n      status: 'todo',\n      category: 'technical',\n      requester: {\n        name: 'Maria Santos',\n        email: 'maria.santos@empresa.com.br',\n        avatar: 'https://randomuser.me/api/portraits/women/1.jpg'\n      },\n      assignedAgent: {\n        id: 'ana.silva',\n        name: 'Ana Silva',\n        avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\n      },\n      slaPercentage: 25,\n      slaRemaining: '6h 30min',\n      hasAttachments: true,\n      commentCount: 3,\n      tags: ['login', 'performance', 'urgente'],\n      createdAt: new Date(Date.now() - 86400000),\n      updatedAt: new Date(Date.now() - 3600000)\n    },\n    {\n      id: 'TK-2025-002',\n      subject: 'Solicitação de nova funcionalidade no módulo de relatórios',\n      description: `Necessidade de implementar filtros avançados no módulo de relatórios financeiros.\\n\\nFuncionalidades solicitadas:\\n- Filtro por período customizado\\n- Agrupamento por categoria\\n- Exportação em múltiplos formatos`,\n      priority: 'Medium',\n      status: 'attending',\n      category: 'feature',\n      requester: {\n        name: 'Carlos Oliveira',\n        email: 'carlos.oliveira@empresa.com.br',\n        avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\n      },\n      assignedAgent: {\n        id: 'carlos.santos',\n        name: 'Carlos Santos',\n        avatar: 'https://randomuser.me/api/portraits/men/2.jpg'\n      },\n      slaPercentage: 45,\n      slaRemaining: '4h 15min',\n      hasAttachments: false,\n      commentCount: 7,\n      tags: ['feature', 'relatórios', 'financeiro'],\n      createdAt: new Date(Date.now() - 172800000),\n      updatedAt: new Date(Date.now() - 1800000)\n    },\n    {\n      id: 'TK-2025-003',\n      subject: 'Erro crítico no processamento de pagamentos via PIX',\n      description: `Sistema apresenta erro 500 ao processar pagamentos via PIX.\\n\\nErro ocorre em aproximadamente 30% das transações.\\n\\nLog de erro: \"Payment gateway timeout - PIX processing failed\"\\n\\nAção necessária: Investigação urgente e correção imediata.`,\n      priority: 'Critical',\n      status: 'paused',\n      category: 'technical',\n      requester: {\n        name: 'Ana Ferreira',\n        email: 'ana.ferreira@empresa.com.br',\n        avatar: 'https://randomuser.me/api/portraits/women/3.jpg'\n      },\n      assignedAgent: {\n        id: 'maria.oliveira',\n        name: 'Maria Oliveira',\n        avatar: 'https://randomuser.me/api/portraits/women/4.jpg'\n      },\n      slaPercentage: 95,\n      slaRemaining: '30min',\n      hasAttachments: true,\n      commentCount: 12,\n      tags: ['crítico', 'pagamento', 'pix', 'bug'],\n      createdAt: new Date(Date.now() - 259200000),\n      updatedAt: new Date(Date.now() - 900000)\n    },\n    {\n      id: 'TK-2025-004',\n      subject: 'Configuração de backup automático implementada com sucesso',\n      description: `Sistema de backup automático foi configurado e testado.\\n\\nConfigurações implementadas:\\n- Backup diário às 02:00\\n- Retenção de 30 dias\\n- Notificação por email em caso de falha\\n\\nTestes realizados com sucesso. Sistema em produção.`,\n      priority: 'Low',\n      status: 'completed',\n      category: 'technical',\n      requester: {\n        name: 'João Silva',\n        email: 'joao.silva@empresa.com.br',\n        avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\n      },\n      assignedAgent: {\n        id: 'joao.ferreira',\n        name: 'João Ferreira',\n        avatar: 'https://randomuser.me/api/portraits/men/4.jpg'\n      },\n      slaPercentage: 100,\n      slaRemaining: 'Concluído',\n      hasAttachments: false,\n      commentCount: 5,\n      tags: ['backup', 'infraestrutura', 'concluído'],\n      createdAt: new Date(Date.now() - 432000000),\n      updatedAt: new Date(Date.now() - 86400000)\n    },\n    {\n      id: 'TK-2025-005',\n      subject: 'Dúvida sobre cobrança na fatura do mês anterior',\n      description: `Cliente questiona cobrança adicional na fatura de dezembro/2024.\\n\\nValor questionado: R$ 1.250,00\\nReferente a: Serviços adicionais\\n\\nSolicitação: Detalhamento da cobrança e justificativa dos valores.`,\n      priority: 'Medium',\n      status: 'todo',\n      category: 'billing',\n      requester: {\n        name: 'Patricia Costa',\n        email: 'patricia.costa@cliente.com.br',\n        avatar: 'https://randomuser.me/api/portraits/women/5.jpg'\n      },\n      assignedAgent: null,\n      slaPercentage: 15,\n      slaRemaining: '7h 45min',\n      hasAttachments: true,\n      commentCount: 1,\n      tags: ['cobrança', 'fatura', 'financeiro'],\n      createdAt: new Date(Date.now() - 21600000),\n      updatedAt: new Date(Date.now() - 21600000)\n    },\n    {\n      id: 'TK-2025-006',\n      subject: 'Treinamento da equipe no novo sistema CRM',\n      description: `Organização de treinamento para equipe comercial no novo sistema CRM.\\n\\nParticipantes: 15 pessoas\\nDuração estimada: 4 horas\\nModalidade: Presencial\\n\\nTópicos a abordar:\\n- Navegação básica\\n- Cadastro de leads\\n- Acompanhamento de oportunidades\\n- Relatórios gerenciais`,\n      priority: 'Low',\n      status: 'attending',\n      category: 'general',\n      requester: {\n        name: 'Roberto Lima',\n        email: 'roberto.lima@empresa.com.br',\n        avatar: 'https://randomuser.me/api/portraits/men/5.jpg'\n      },\n      assignedAgent: {\n        id: 'ana.silva',\n        name: 'Ana Silva',\n        avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\n      },\n      slaPercentage: 60,\n      slaRemaining: '2h 20min',\n      hasAttachments: false,\n      commentCount: 4,\n      tags: ['treinamento', 'crm', 'equipe'],\n      createdAt: new Date(Date.now() - 345600000),\n      updatedAt: new Date(Date.now() - 7200000)\n    }\n  ]);\n\n  // Column definitions\n  const columns = [\n    {\n      id: 'todo',\n      title: 'A Fazer',\n      description: 'Tickets aguardando atendimento'\n    },\n    {\n      id: 'attending',\n      title: 'Em Atendimento',\n      description: 'Tickets sendo processados'\n    },\n    {\n      id: 'paused',\n      title: 'Pausado',\n      description: 'Tickets temporariamente suspensos'\n    },\n    {\n      id: 'completed',\n      title: 'Concluído',\n      description: 'Tickets finalizados'\n    }\n  ];\n\n  // Filter tickets based on search and filters\n  const filteredTickets = tickets?.filter(ticket => {\n    // Search filter\n    if (searchQuery) {\n      const searchLower = searchQuery?.toLowerCase();\n      const matchesSearch = \n        ticket?.id?.toLowerCase()?.includes(searchLower) ||\n        ticket?.subject?.toLowerCase()?.includes(searchLower) ||\n        ticket?.requester?.name?.toLowerCase()?.includes(searchLower) ||\n        (ticket?.assignedAgent?.name || '')?.toLowerCase()?.includes(searchLower);\n      \n      if (!matchesSearch) return false;\n    }\n\n    // Advanced filters\n    if (filters?.priorities?.length && !filters?.priorities?.includes(ticket?.priority)) return false;\n    if (filters?.statuses?.length && !filters?.statuses?.includes(ticket?.status)) return false;\n    if (filters?.agents?.length && !filters?.agents?.includes(ticket?.assignedAgent?.id)) return false;\n    if (filters?.categories?.length && !filters?.categories?.includes(ticket?.category)) return false;\n    \n    // SLA filters\n    if (filters?.slaStatuses?.length) {\n      const slaStatus = ticket?.slaPercentage >= 90 ? 'critical' : \n                      ticket?.slaPercentage >= 70 ? 'warning' : 'normal';\n      if (!filters?.slaStatuses?.includes(slaStatus)) return false;\n    }\n\n    // Date filters\n    if (filters?.startDate && new Date(ticket.createdAt) < new Date(filters.startDate)) return false;\n    if (filters?.endDate && new Date(ticket.createdAt) > new Date(filters.endDate)) return false;\n\n    return true;\n  });\n\n  // Group tickets by status\n  const ticketsByStatus = columns?.reduce((acc, column) => {\n    acc[column.id] = filteredTickets?.filter(ticket => {\n      // Apply column-specific filters\n      const columnFilter = columnFilters?.[column?.id];\n      if (columnFilter?.priority && columnFilter?.priority !== 'all' && ticket?.priority !== columnFilter?.priority) {\n        return false;\n      }\n      if (columnFilter?.agent && columnFilter?.agent !== 'all' && ticket?.assignedAgent?.id !== columnFilter?.agent) {\n        return false;\n      }\n      if (columnFilter?.sla && columnFilter?.sla !== 'all') {\n        const slaStatus = ticket?.slaPercentage >= 90 ? 'critical' : \n                         ticket?.slaPercentage >= 70 ? 'warning' : 'normal';\n        if (slaStatus !== columnFilter?.sla) return false;\n      }\n      \n      return ticket?.status === column?.id;\n    });\n    return acc;\n  }, {});\n\n  // Calculate ticket counts for filters\n  const ticketCounts = {\n    priority: tickets?.reduce((acc, ticket) => {\n      acc[ticket.priority] = (acc?.[ticket?.priority] || 0) + 1;\n      return acc;\n    }, {}),\n    status: tickets?.reduce((acc, ticket) => {\n      acc[ticket.status] = (acc?.[ticket?.status] || 0) + 1;\n      return acc;\n    }, {}),\n    agent: tickets?.reduce((acc, ticket) => {\n      if (ticket?.assignedAgent) {\n        acc[ticket.assignedAgent.id] = (acc?.[ticket?.assignedAgent?.id] || 0) + 1;\n      }\n      return acc;\n    }, {}),\n    category: tickets?.reduce((acc, ticket) => {\n      acc[ticket.category] = (acc?.[ticket?.category] || 0) + 1;\n      return acc;\n    }, {}),\n    sla: tickets?.reduce((acc, ticket) => {\n      const slaStatus = ticket?.slaPercentage >= 90 ? 'critical' : \n                       ticket?.slaPercentage >= 70 ? 'warning' : 'normal';\n      acc[slaStatus] = (acc?.[slaStatus] || 0) + 1;\n      return acc;\n    }, {})\n  };\n\n  // Handle ticket move\n  const handleTicketMove = useCallback((ticketId, newStatus) => {\n    setTickets(prevTickets => \n      prevTickets?.map(ticket => \n        ticket?.id === ticketId \n          ? { ...ticket, status: newStatus, updatedAt: new Date() }\n          : ticket\n      )\n    );\n  }, []);\n\n  // Handle ticket selection\n  const handleTicketSelect = useCallback((ticketId, isSelected, shiftKey = false) => {\n    if (shiftKey && lastSelectedIndex !== null) {\n      // Range selection with Shift+Click\n      const currentIndex = filteredTickets?.findIndex(t => t?.id === ticketId);\n      const start = Math.min(lastSelectedIndex, currentIndex);\n      const end = Math.max(lastSelectedIndex, currentIndex);\n      const rangeTickets = filteredTickets?.slice(start, end + 1)?.map(t => t?.id);\n      \n      setSelectedTickets(prev => {\n        const newSelection = [...prev];\n        rangeTickets?.forEach(id => {\n          if (!newSelection?.includes(id)) {\n            newSelection?.push(id);\n          }\n        });\n        return newSelection;\n      });\n    } else {\n      // Single selection\n      setSelectedTickets(prev => \n        isSelected \n          ? [...prev, ticketId]\n          : prev?.filter(id => id !== ticketId)\n      );\n      setLastSelectedIndex(filteredTickets?.findIndex(t => t?.id === ticketId));\n    }\n  }, [filteredTickets, lastSelectedIndex]);\n\n  // Handle bulk actions\n  const handleBulkAction = useCallback(async (action, ticketIds) => {\n    switch (action) {\n      case 'move-todo':\n      case 'move-attending': case'move-paused': case'move-completed':\n        const newStatus = action?.split('-')?.[1];\n        setTickets(prevTickets =>\n          prevTickets?.map(ticket =>\n            ticketIds?.includes(ticket?.id)\n              ? { ...ticket, status: newStatus, updatedAt: new Date() }\n              : ticket\n          )\n        );\n        break;\n      case 'export':\n        // Mock export functionality\n        console.log('Exporting tickets:', ticketIds);\n        break;\n      case 'select-all':\n        setSelectedTickets(filteredTickets?.map(t => t?.id));\n        break;\n      default:\n        console.log('Bulk action:', action, ticketIds);\n    }\n  }, [filteredTickets]);\n\n  // Handle ticket edit\n  const handleTicketEdit = useCallback((ticket) => {\n    setSelectedTicket(ticket);\n    setIsTicketModalOpen(true);\n  }, []);\n\n  // Handle ticket save\n  const handleTicketSave = useCallback(async (updatedTicket) => {\n    setTickets(prevTickets =>\n      prevTickets?.map(ticket =>\n        ticket?.id === updatedTicket?.id\n          ? { ...updatedTicket, updatedAt: new Date() }\n          : ticket\n      )\n    );\n  }, []);\n\n  // Handle ticket delete\n  const handleTicketDelete = useCallback(async (ticketId) => {\n    setTickets(prevTickets => prevTickets?.filter(ticket => ticket?.id !== ticketId));\n  }, []);\n\n  // Handle column filter change\n  const handleColumnFilterChange = useCallback((columnId, filterType, value) => {\n    setColumnFilters(prev => ({\n      ...prev,\n      [columnId]: {\n        ...prev?.[columnId],\n        [filterType]: value\n      }\n    }));\n  }, []);\n\n  // Clear all filters\n  const handleClearFilters = useCallback(() => {\n    setFilters({});\n    setColumnFilters({});\n    setSearchQuery('');\n  }, []);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e?.ctrlKey || e?.metaKey) {\n        switch (e?.key) {\n          case 'f':\n            e?.preventDefault();\n            setIsFilterSidebarOpen(true);\n            break;\n          case 'a':\n            e?.preventDefault();\n            setSelectedTickets(filteredTickets?.map(t => t?.id));\n            break;\n        }\n      }\n      if (e?.key === 'Escape') {\n        setSelectedTickets([]);\n        setIsFilterSidebarOpen(false);\n        setIsTicketModalOpen(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [filteredTickets]);\n\n  return (\n    <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\n      <div className=\"min-h-screen bg-background\">\n        <Header \n          onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n          isSidebarCollapsed={isSidebarCollapsed}\n        />\n        \n        <Sidebar\n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          isCollapsed={isSidebarCollapsed}\n          onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)}\n        />\n\n        <main className={`\n          pt-16 transition-all duration-300\n          ${isSidebarCollapsed ? 'lg:ml-16' : 'lg:ml-60'}\n        `}>\n          <div className=\"p-6\">\n            {/* Page Header */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n                  Quadro Kanban\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Gerencie tickets através de arrastar e soltar entre as colunas de status\n                </p>\n              </div>\n              \n              <div className=\"flex items-center space-x-3 mt-4 lg:mt-0\">\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    type=\"search\"\n                    placeholder=\"Buscar tickets...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e?.target?.value)}\n                    className=\"w-64\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    iconName=\"Search\"\n                    iconSize={16}\n                  />\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  iconName=\"Filter\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  onClick={() => setIsFilterSidebarOpen(true)}\n                  className={isFilterSidebarOpen ? 'bg-muted' : ''}\n                >\n                  Filtros\n                </Button>\n                \n                <Button\n                  variant=\"default\"\n                  iconName=\"Plus\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  onClick={() => window.location.href = '/ticket-creation-form'}\n                >\n                  Novo Ticket\n                </Button>\n              </div>\n            </div>\n\n            {/* Stats Bar */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              {columns?.map((column) => {\n                const count = ticketsByStatus?.[column?.id]?.length || 0;\n                const totalCount = tickets?.filter(t => t?.status === column?.id)?.length;\n                \n                return (\n                  <div key={column?.id} className=\"bg-card border border-border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">{column?.title}</p>\n                        <p className=\"text-2xl font-bold text-foreground\">\n                          {count}\n                          {count !== totalCount && (\n                            <span className=\"text-sm text-muted-foreground ml-1\">\n                              de {totalCount}\n                            </span>\n                          )}\n                        </p>\n                      </div>\n                      <Icon \n                        name={\n                          column?.id === 'todo' ? 'Circle' :\n                          column?.id === 'attending' ? 'Play' :\n                          column?.id === 'paused' ? 'Pause' : 'CheckCircle'\n                        } \n                        size={24} \n                        className=\"text-muted-foreground\" \n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Kanban Board */}\n            <div className=\"flex space-x-6 overflow-x-auto pb-6\">\n              {columns?.map((column) => (\n                <div key={column?.id} className=\"flex-shrink-0 w-80\">\n                  <KanbanColumn\n                    column={column}\n                    tickets={ticketsByStatus?.[column?.id] || []}\n                    onTicketMove={handleTicketMove}\n                    onTicketEdit={handleTicketEdit}\n                    onTicketSelect={handleTicketSelect}\n                    selectedTickets={selectedTickets}\n                    canDrag={true}\n                    activeFilters={columnFilters?.[column?.id] || {}}\n                    onFilterChange={(filterType, value) => \n                      handleColumnFilterChange(column?.id, filterType, value)\n                    }\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        </main>\n\n        {/* Filter Sidebar */}\n        <FilterSidebar\n          isOpen={isFilterSidebarOpen}\n          onClose={() => setIsFilterSidebarOpen(false)}\n          filters={filters}\n          onFiltersChange={setFilters}\n          onClearFilters={handleClearFilters}\n          ticketCounts={ticketCounts}\n        />\n\n        {/* Bulk Actions */}\n        <BulkActions\n          selectedTickets={selectedTickets}\n          onBulkAction={handleBulkAction}\n          onClearSelection={() => setSelectedTickets([])}\n          totalTickets={filteredTickets?.length}\n        />\n\n        {/* Ticket Modal */}\n        <TicketModal\n          ticket={selectedTicket}\n          isOpen={isTicketModalOpen}\n          onClose={() => {\n            setIsTicketModalOpen(false);\n            setSelectedTicket(null);\n          }}\n          onSave={handleTicketSave}\n          onDelete={handleTicketDelete}\n        />\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default KanbanBoardView;","size_bytes":21450},"attached_assets/index_1754603785407.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport LoginForm from './components/LoginForm';\nimport ForgotPasswordForm from './components/ForgotPasswordForm';\nimport CompanyBranding from './components/CompanyBranding';\nimport SecurityIndicators from './components/SecurityIndicators';\nimport TenantSelector from './components/TenantSelector';\nimport Icon from '../../components/AppIcon';\n\nconst LoginAndAuthentication = () => {\n  const navigate = useNavigate();\n  const [currentView, setCurrentView] = useState('login'); // 'login', 'forgot-password'\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [selectedTenant, setSelectedTenant] = useState(null);\n  const [failedAttempts, setFailedAttempts] = useState(0);\n  const [lastLoginTime] = useState(new Date('2025-08-06T14:30:00'));\n  const [passwordResetSuccess, setPasswordResetSuccess] = useState(false);\n\n  // Mock credentials for different user roles\n  const mockCredentials = {\n    'admin@ticketflow.com': { password: 'admin123', role: 'Manager-Admin', redirect: '/user-management-console' },\n    'agente@ticketflow.com': { password: 'agente123', role: 'Agent', redirect: '/support-agent-dashboard' },\n    'supervisor@ticketflow.com': { password: 'super123', role: 'Attendant', redirect: '/kanban-board-view' }\n  };\n\n  useEffect(() => {\n    // Check for saved tenant preference\n    const savedTenant = localStorage.getItem('selectedTenant');\n    if (savedTenant) {\n      setSelectedTenant(JSON.parse(savedTenant));\n    }\n\n    // Clear any existing authentication\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userRole');\n  }, []);\n\n  const handleLogin = async (formData) => {\n    setIsLoading(true);\n    setError('');\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      const credentials = mockCredentials?.[formData?.email?.toLowerCase()];\n      \n      if (!credentials || credentials?.password !== formData?.password) {\n        setFailedAttempts(prev => prev + 1);\n        setError('Email ou senha incorretos. Verifique suas credenciais.');\n        return;\n      }\n\n      if (!selectedTenant) {\n        setError('Selecione uma organização para continuar.');\n        return;\n      }\n\n      // Simulate successful authentication\n      const authToken = `jwt_${Date.now()}_${Math.random()?.toString(36)?.substr(2, 9)}`;\n      \n      // Store authentication data\n      localStorage.setItem('authToken', authToken);\n      localStorage.setItem('userRole', credentials?.role);\n      localStorage.setItem('userEmail', formData?.email);\n      localStorage.setItem('selectedTenant', JSON.stringify(selectedTenant));\n      \n      if (formData?.rememberDevice) {\n        localStorage.setItem('rememberDevice', 'true');\n      }\n\n      // Reset failed attempts on successful login\n      setFailedAttempts(0);\n\n      // Role-based redirect\n      navigate(credentials?.redirect);\n\n    } catch (err) {\n      setError('Erro interno do servidor. Tente novamente em alguns minutos.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleForgotPassword = () => {\n    setCurrentView('forgot-password');\n    setError('');\n    setPasswordResetSuccess(false);\n  };\n\n  const handleResetPassword = async (email) => {\n    setIsLoading(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Check if email exists in mock credentials\n      if (!mockCredentials?.[email?.toLowerCase()]) {\n        setError('Email não encontrado no sistema.');\n        return;\n      }\n\n      setPasswordResetSuccess(true);\n    } catch (err) {\n      setError('Erro ao enviar email de recuperação. Tente novamente.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBackToLogin = () => {\n    setCurrentView('login');\n    setError('');\n    setPasswordResetSuccess(false);\n  };\n\n  const handleTenantChange = (tenant) => {\n    setSelectedTenant(tenant);\n    if (tenant) {\n      localStorage.setItem('selectedTenant', JSON.stringify(tenant));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid lg:grid-cols-2 gap-8 items-center\">\n        {/* Left Panel - Company Branding */}\n        <div className=\"hidden lg:block\">\n          <div className=\"bg-card border border-border rounded-2xl shadow-enterprise-lg p-8\">\n            <CompanyBranding />\n          </div>\n        </div>\n\n        {/* Right Panel - Authentication Form */}\n        <div className=\"w-full max-w-md mx-auto lg:mx-0\">\n          <div className=\"bg-card border border-border rounded-2xl shadow-enterprise-lg p-8 space-y-8\">\n            {/* Mobile Branding Header */}\n            <div className=\"lg:hidden text-center\">\n              <div className=\"flex items-center justify-center w-12 h-12 bg-primary rounded-xl mx-auto mb-4\">\n                <Icon name=\"Ticket\" size={24} color=\"white\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">TicketFlow Pro</h1>\n              <p className=\"text-sm text-muted-foreground\">Sistema de Gestão de Tickets</p>\n            </div>\n\n            {/* Tenant Selection */}\n            {currentView === 'login' && (\n              <TenantSelector\n                selectedTenant={selectedTenant}\n                onTenantChange={handleTenantChange}\n                isLoading={isLoading}\n              />\n            )}\n\n            {/* Authentication Forms */}\n            <div className=\"space-y-6\">\n              {currentView === 'login' ? (\n                <>\n                  <div className=\"text-center space-y-2\">\n                    <h2 className=\"text-2xl font-bold text-foreground\">Bem-vindo de volta</h2>\n                    <p className=\"text-muted-foreground\">\n                      Entre com suas credenciais corporativas para acessar o sistema\n                    </p>\n                  </div>\n\n                  <LoginForm\n                    onLogin={handleLogin}\n                    onForgotPassword={handleForgotPassword}\n                    isLoading={isLoading}\n                    error={error}\n                  />\n                </>\n              ) : (\n                <ForgotPasswordForm\n                  onBack={handleBackToLogin}\n                  onResetPassword={handleResetPassword}\n                  isLoading={isLoading}\n                  success={passwordResetSuccess}\n                />\n              )}\n            </div>\n\n            {/* Security Indicators */}\n            {currentView === 'login' && (\n              <SecurityIndicators\n                failedAttempts={failedAttempts}\n                lastLoginTime={lastLoginTime}\n                sessionTimeout={30}\n              />\n            )}\n\n            {/* Help Section */}\n            <div className=\"text-center space-y-2 pt-4 border-t border-border\">\n              <p className=\"text-xs text-muted-foreground\">\n                Problemas para acessar? Entre em contato com o suporte\n              </p>\n              <div className=\"flex items-center justify-center space-x-4 text-xs\">\n                <a href=\"mailto:suporte@ticketflow.com\" className=\"text-primary hover:text-primary/80 transition-enterprise\">\n                  suporte@ticketflow.com\n                </a>\n                <span className=\"text-muted-foreground\">•</span>\n                <a href=\"tel:+551133334444\" className=\"text-primary hover:text-primary/80 transition-enterprise\">\n                  (11) 3333-4444\n                </a>\n              </div>\n            </div>\n\n            {/* Mock Credentials Info */}\n            <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Info\" size={14} className=\"text-primary\" />\n                <span className=\"text-xs font-medium text-foreground\">Credenciais de Demonstração</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground space-y-1\">\n                <div><strong>Admin:</strong> admin@ticketflow.com / admin123</div>\n                <div><strong>Agente:</strong> agente@ticketflow.com / agente123</div>\n                <div><strong>Supervisor:</strong> supervisor@ticketflow.com / super123</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginAndAuthentication;","size_bytes":8593},"attached_assets/index_1754603788535.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Header from '../../components/ui/Header';\nimport Sidebar from '../../components/ui/Sidebar';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport SLATicketCard from './components/SLATicketCard';\nimport EscalationQueue from './components/EscalationQueue';\nimport SLAFilters from './components/SLAFilters';\nimport ViolationHistory from './components/ViolationHistory';\nimport SLAMetrics from './components/SLAMetrics';\nimport BulkActions from './components/BulkActions';\n\nconst SLAMonitoringCenter = () => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const [refreshInterval, setRefreshInterval] = useState(30);\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n\n  // Mock data for SLA tickets\n  const [tickets] = useState([\n    {\n      id: 'TK-2024-001',\n      subject: 'Sistema de vendas apresentando lentidão extrema durante picos de acesso',\n      client: 'TechCorp Ltda',\n      responsible: 'Carlos Silva',\n      priority: 'Crítica',\n      slaPercentage: 95,\n      timeRemaining: 15,\n      slaStatus: 'critical',\n      isPaused: false,\n      createdAt: '07/08/2024 14:30',\n      department: 'TI'\n    },\n    {\n      id: 'TK-2024-002',\n      subject: 'Erro de integração com sistema de pagamento causando falhas nas transações',\n      client: 'ComercioMax S.A.',\n      responsible: 'Ana Santos',\n      priority: 'Alta',\n      slaPercentage: 75,\n      timeRemaining: 120,\n      slaStatus: 'warning',\n      isPaused: false,\n      createdAt: '07/08/2024 13:15',\n      department: 'TI'\n    },\n    {\n      id: 'TK-2024-003',\n      subject: 'Solicitação de novo usuário no sistema corporativo',\n      client: 'Empresa ABC',\n      responsible: 'Pedro Oliveira',\n      priority: 'Média',\n      slaPercentage: 45,\n      timeRemaining: 240,\n      slaStatus: 'normal',\n      isPaused: false,\n      createdAt: '07/08/2024 12:00',\n      department: 'RH'\n    },\n    {\n      id: 'TK-2024-004',\n      subject: 'Backup do servidor principal falhou durante a madrugada',\n      client: 'DataCenter Pro',\n      responsible: 'Maria Costa',\n      priority: 'Alta',\n      slaPercentage: 105,\n      timeRemaining: -30,\n      slaStatus: 'violated',\n      isPaused: false,\n      createdAt: '06/08/2024 23:45',\n      department: 'TI'\n    },\n    {\n      id: 'TK-2024-005',\n      subject: 'Configuração de novo ambiente de desenvolvimento para equipe',\n      client: 'StartupTech',\n      responsible: 'João Ferreira',\n      priority: 'Média',\n      slaPercentage: 30,\n      timeRemaining: 480,\n      slaStatus: 'normal',\n      isPaused: true,\n      createdAt: '07/08/2024 10:30',\n      department: 'TI'\n    },\n    {\n      id: 'TK-2024-006',\n      subject: 'Problema de conectividade com VPN corporativa',\n      client: 'RemoteWork Inc',\n      responsible: 'Carlos Silva',\n      priority: 'Alta',\n      slaPercentage: 85,\n      timeRemaining: 45,\n      slaStatus: 'critical',\n      isPaused: false,\n      createdAt: '07/08/2024 11:20',\n      department: 'TI'\n    }\n  ]);\n\n  // Mock data for escalations\n  const [escalations] = useState([\n    {\n      id: 'ESC-001',\n      ticketId: 'TK-2024-004',\n      subject: 'Backup do servidor principal falhou durante a madrugada',\n      client: 'DataCenter Pro',\n      responsible: 'Maria Costa',\n      priority: 'Alta',\n      timeOverdue: 30,\n      violationTime: 30,\n      reason: 'SLA de 4 horas excedido. Backup crítico não executado.'\n    },\n    {\n      id: 'ESC-002',\n      ticketId: 'TK-2024-001',\n      subject: 'Sistema de vendas apresentando lentidão extrema',\n      client: 'TechCorp Ltda',\n      responsible: 'Carlos Silva',\n      priority: 'Crítica',\n      timeOverdue: 15,\n      violationTime: 15,\n      reason: 'Ticket crítico próximo ao vencimento do SLA.'\n    }\n  ]);\n\n  // Mock data for violation history\n  const [violations] = useState([\n    {\n      id: 'VIO-001',\n      ticketId: 'TK-2024-004',\n      subject: 'Backup do servidor principal falhou durante a madrugada',\n      client: 'DataCenter Pro',\n      responsible: 'Maria Costa',\n      department: 'TI',\n      priority: 'Alta',\n      violatedAt: '2024-08-07T03:45:00',\n      hoursOverdue: 0.5,\n      originalSLA: 4,\n      totalTimeSpent: 4.5,\n      reason: 'Complexidade técnica maior que o esperado',\n      status: 'active'\n    },\n    {\n      id: 'VIO-002',\n      ticketId: 'TK-2024-003',\n      subject: 'Erro crítico no sistema de pagamentos',\n      client: 'FinanceMax',\n      responsible: 'Ana Santos',\n      department: 'TI',\n      priority: 'Crítica',\n      violatedAt: '2024-08-06T16:30:00',\n      hoursOverdue: 2,\n      originalSLA: 2,\n      totalTimeSpent: 4,\n      reason: 'Dependência de fornecedor externo',\n      status: 'resolved'\n    }\n  ]);\n\n  // Filters state\n  const [filters, setFilters] = useState({\n    search: '',\n    slaStatus: 'all',\n    priority: 'all',\n    department: 'all',\n    sortBy: 'timeRemaining'\n  });\n\n  const [savedFilters] = useState([\n    { id: 1, name: 'Críticos', filters: { slaStatus: 'critical', priority: 'all' } },\n    { id: 2, name: 'Violados', filters: { slaStatus: 'violated', priority: 'all' } },\n    { id: 3, name: 'TI Urgente', filters: { department: 'TI', priority: 'Crítica' } }\n  ]);\n\n  // Calculate metrics\n  const metrics = {\n    totalTickets: tickets?.length,\n    normalTickets: tickets?.filter(t => t?.slaPercentage < 60)?.length,\n    warningTickets: tickets?.filter(t => t?.slaPercentage >= 60 && t?.slaPercentage < 80)?.length,\n    criticalTickets: tickets?.filter(t => t?.slaPercentage >= 80 && t?.slaPercentage < 100)?.length,\n    violatedTickets: tickets?.filter(t => t?.slaPercentage >= 100)?.length,\n    complianceRate: Math.round(((tickets?.length - tickets?.filter(t => t?.slaPercentage >= 100)?.length) / tickets?.length) * 100)\n  };\n\n  // Filter tickets based on current filters\n  const filteredTickets = tickets?.filter(ticket => {\n    const matchesSearch = ticket?.subject?.toLowerCase()?.includes(filters?.search?.toLowerCase()) ||\n                         ticket?.client?.toLowerCase()?.includes(filters?.search?.toLowerCase()) ||\n                         ticket?.id?.toLowerCase()?.includes(filters?.search?.toLowerCase());\n    \n    const matchesSLAStatus = filters?.slaStatus === 'all' || \n                            (filters?.slaStatus === 'normal' && ticket?.slaPercentage < 60) ||\n                            (filters?.slaStatus === 'warning' && ticket?.slaPercentage >= 60 && ticket?.slaPercentage < 80) ||\n                            (filters?.slaStatus === 'critical' && ticket?.slaPercentage >= 80 && ticket?.slaPercentage < 100) ||\n                            (filters?.slaStatus === 'violated' && ticket?.slaPercentage >= 100);\n    \n    const matchesPriority = filters?.priority === 'all' || ticket?.priority === filters?.priority;\n    const matchesDepartment = filters?.department === 'all' || ticket?.department === filters?.department;\n\n    return matchesSearch && matchesSLAStatus && matchesPriority && matchesDepartment;\n  })?.sort((a, b) => {\n    switch (filters?.sortBy) {\n      case 'timeRemaining':\n        return a?.timeRemaining - b?.timeRemaining;\n      case 'slaPercentage':\n        return b?.slaPercentage - a?.slaPercentage;\n      case 'priority':\n        const priorityOrder = { 'Crítica': 4, 'Alta': 3, 'Média': 2, 'Baixa': 1 };\n        return priorityOrder?.[b?.priority] - priorityOrder?.[a?.priority];\n      case 'createdAt':\n        return new Date(b.createdAt) - new Date(a.createdAt);\n      default:\n        return 0;\n    }\n  });\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLastRefresh(new Date());\n    }, refreshInterval * 1000);\n\n    return () => clearInterval(interval);\n  }, [refreshInterval]);\n\n  const handleTicketSelection = (ticketId) => {\n    setSelectedTickets(prev => \n      prev?.includes(ticketId) \n        ? prev?.filter(id => id !== ticketId)\n        : [...prev, ticketId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    if (selectedTickets?.length === filteredTickets?.length) {\n      setSelectedTickets([]);\n    } else {\n      setSelectedTickets(filteredTickets?.map(t => t?.id));\n    }\n  };\n\n  const handlePauseTicket = (ticketId) => {\n    console.log('Pausar ticket:', ticketId);\n  };\n\n  const handleResumeTicket = (ticketId) => {\n    console.log('Retomar ticket:', ticketId);\n  };\n\n  const handleViewDetails = (ticket) => {\n    console.log('Ver detalhes do ticket:', ticket);\n  };\n\n  const handleEscalate = (escalationId) => {\n    console.log('Escalar:', escalationId);\n  };\n\n  const handleDismissEscalation = (escalationId) => {\n    console.log('Dispensar escalação:', escalationId);\n  };\n\n  const handleBulkAction = (actionData) => {\n    console.log('Ação em lote:', actionData);\n  };\n\n  const handleSaveFilter = (name, filterData) => {\n    console.log('Salvar filtro:', name, filterData);\n  };\n\n  const handleLoadFilter = (savedFilter) => {\n    setFilters({ ...filters, ...savedFilter?.filters });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n        isSidebarCollapsed={isSidebarCollapsed}\n      />\n      <Sidebar \n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        isCollapsed={isSidebarCollapsed}\n        onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)}\n      />\n      <main className={`pt-16 transition-all duration-300 ${\n        isSidebarCollapsed ? 'lg:ml-16' : 'lg:ml-60'\n      }`}>\n        <div className=\"p-6\">\n          {/* Page Header */}\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">Centro de Monitoramento SLA</h1>\n              <p className=\"text-muted-foreground\">\n                Acompanhe o desempenho dos SLAs em tempo real e gerencie violações\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4 mt-4 lg:mt-0\">\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <Icon name=\"RefreshCw\" size={16} />\n                <span>Última atualização: {lastRefresh?.toLocaleTimeString('pt-BR')}</span>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setLastRefresh(new Date())}\n                iconName=\"RefreshCw\"\n                iconPosition=\"left\"\n                iconSize={14}\n              >\n                Atualizar\n              </Button>\n            </div>\n          </div>\n\n          {/* SLA Metrics */}\n          <SLAMetrics metrics={metrics} />\n\n          {/* Filters */}\n          <SLAFilters\n            filters={filters}\n            onFiltersChange={setFilters}\n            onSaveFilter={handleSaveFilter}\n            savedFilters={savedFilters}\n            onLoadFilter={handleLoadFilter}\n          />\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Main Monitoring Grid */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-card border border-border rounded-lg shadow-enterprise\">\n                <div className=\"p-4 border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-semibold text-foreground flex items-center space-x-2\">\n                      <Icon name=\"Monitor\" size={18} className=\"text-primary\" />\n                      <span>Tickets Ativos ({filteredTickets?.length})</span>\n                    </h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleSelectAll}\n                        iconName={selectedTickets?.length === filteredTickets?.length ? \"CheckSquare\" : \"Square\"}\n                        iconSize={14}\n                      >\n                        {selectedTickets?.length === filteredTickets?.length ? 'Desmarcar Todos' : 'Selecionar Todos'}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4\">\n                  {filteredTickets?.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <Icon name=\"Search\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                        Nenhum ticket encontrado\n                      </h3>\n                      <p className=\"text-muted-foreground\">\n                        Ajuste os filtros para ver mais resultados\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4\">\n                      {filteredTickets?.map((ticket) => (\n                        <div key={ticket?.id} className=\"relative\">\n                          <div \n                            className={`absolute top-2 left-2 z-10 cursor-pointer ${\n                              selectedTickets?.includes(ticket?.id) ? 'text-primary' : 'text-muted-foreground'\n                            }`}\n                            onClick={() => handleTicketSelection(ticket?.id)}\n                          >\n                            <Icon \n                              name={selectedTickets?.includes(ticket?.id) ? \"CheckSquare\" : \"Square\"} \n                              size={16} \n                            />\n                          </div>\n                          <SLATicketCard\n                            ticket={ticket}\n                            onPause={handlePauseTicket}\n                            onResume={handleResumeTicket}\n                            onViewDetails={handleViewDetails}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Right Panel */}\n            <div className=\"space-y-6\">\n              {/* Escalation Queue */}\n              <EscalationQueue\n                escalations={escalations}\n                onEscalate={handleEscalate}\n                onDismiss={handleDismissEscalation}\n              />\n\n              {/* Violation History */}\n              <ViolationHistory\n                violations={violations}\n                onViewDetails={handleViewDetails}\n              />\n            </div>\n          </div>\n        </div>\n      </main>\n      {/* Bulk Actions */}\n      <BulkActions\n        selectedTickets={selectedTickets}\n        onBulkAction={handleBulkAction}\n        onClearSelection={() => setSelectedTickets([])}\n      />\n    </div>\n  );\n};\n\nexport default SLAMonitoringCenter;","size_bytes":15134},"attached_assets/index_1754603794889.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Header from '../../components/ui/Header';\nimport Sidebar from '../../components/ui/Sidebar';\nimport FilterSidebar from './components/FilterSidebar';\nimport DashboardToolbar from './components/DashboardToolbar';\nimport TicketGrid from './components/TicketGrid';\nimport TicketPreview from './components/TicketPreview';\nimport ProductivityWidget from './components/ProductivityWidget';\n\nconst SupportAgentDashboard = () => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [filterSidebarCollapsed, setFilterSidebarCollapsed] = useState(false);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const [previewTicket, setPreviewTicket] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState({\n    status: [],\n    priority: [],\n    sla: [],\n    assignment: []\n  });\n\n  const mockTickets = [\n    {\n      id: 1001,\n      subject: \"Problema de autenticação no sistema de email corporativo\",\n      category: \"Email & Comunicação\",\n      description: \"Usuários relatam dificuldades para acessar o sistema de email corporativo após a última atualização. Erro de autenticação SMTP persistente.\",\n      requester: \"Maria Santos\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/women/1.jpg\",\n      assignee: \"Ana Silva\",\n      assigneeAvatar: \"https://randomuser.me/api/portraits/women/2.jpg\",\n      priority: \"high\",\n      status: \"attending\",\n      slaPercentage: 75,\n      timeRemaining: 180,\n      createdAt: \"07/08/2025 14:30\",\n      updatedAt: \"07/08/2025 18:45\"\n    },\n    {\n      id: 1002,\n      subject: \"Solicitação de acesso ao sistema financeiro\",\n      category: \"Acesso & Permissões\",\n      description: \"Novo funcionário precisa de acesso ao sistema financeiro para executar suas funções no departamento de contabilidade.\",\n      requester: \"João Oliveira\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/men/1.jpg\",\n      assignee: null,\n      assigneeAvatar: null,\n      priority: \"medium\",\n      status: \"todo\",\n      slaPercentage: 45,\n      timeRemaining: 420,\n      createdAt: \"07/08/2025 13:15\",\n      updatedAt: \"07/08/2025 13:15\"\n    },\n    {\n      id: 1003,\n      subject: \"Falha crítica no servidor de banco de dados\",\n      category: \"Infraestrutura\",\n      description: \"Servidor principal de banco de dados apresentando instabilidade. Múltiplas conexões sendo rejeitadas, impactando sistemas críticos.\",\n      requester: \"Carlos Santos\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/men/2.jpg\",\n      assignee: \"Pedro Lima\",\n      assigneeAvatar: \"https://randomuser.me/api/portraits/men/3.jpg\",\n      priority: \"critical\",\n      status: \"attending\",\n      slaPercentage: 95,\n      timeRemaining: 30,\n      createdAt: \"07/08/2025 16:20\",\n      updatedAt: \"07/08/2025 18:50\"\n    },\n    {\n      id: 1004,\n      subject: \"Atualização de software antivírus\",\n      category: \"Segurança\",\n      description: \"Solicitação para atualização do software antivírus em todas as estações de trabalho do departamento de RH.\",\n      requester: \"Fernanda Costa\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/women/3.jpg\",\n      assignee: \"Ana Silva\",\n      assigneeAvatar: \"https://randomuser.me/api/portraits/women/2.jpg\",\n      priority: \"low\",\n      status: \"completed\",\n      slaPercentage: 100,\n      timeRemaining: 0,\n      createdAt: \"06/08/2025 09:00\",\n      updatedAt: \"07/08/2025 11:30\"\n    },\n    {\n      id: 1005,\n      subject: \"Configuração de impressora de rede\",\n      category: \"Hardware\",\n      description: \"Nova impressora multifuncional precisa ser configurada na rede corporativa e disponibilizada para o departamento de marketing.\",\n      requester: \"Roberto Silva\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/men/4.jpg\",\n      assignee: \"Carlos Santos\",\n      assigneeAvatar: \"https://randomuser.me/api/portraits/men/2.jpg\",\n      priority: \"medium\",\n      status: \"paused\",\n      slaPercentage: 60,\n      timeRemaining: 240,\n      createdAt: \"07/08/2025 10:45\",\n      updatedAt: \"07/08/2025 15:20\"\n    },\n    {\n      id: 1006,\n      subject: \"Backup de dados não executado\",\n      category: \"Backup & Recuperação\",\n      description: \"Sistema de backup automático falhou na execução programada. Necessário verificar logs e executar backup manual.\",\n      requester: \"Lucia Ferreira\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/women/4.jpg\",\n      assignee: \"Pedro Lima\",\n      assigneeAvatar: \"https://randomuser.me/api/portraits/men/3.jpg\",\n      priority: \"high\",\n      status: \"todo\",\n      slaPercentage: 85,\n      timeRemaining: 90,\n      createdAt: \"07/08/2025 17:00\",\n      updatedAt: \"07/08/2025 17:00\"\n    },\n    {\n      id: 1007,\n      subject: \"Treinamento em nova ferramenta de CRM\",\n      category: \"Treinamento\",\n      description: \"Equipe de vendas solicita treinamento para utilização da nova ferramenta de CRM implementada na empresa.\",\n      requester: \"Amanda Rodrigues\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/women/5.jpg\",\n      assignee: null,\n      assigneeAvatar: null,\n      priority: \"low\",\n      status: \"todo\",\n      slaPercentage: 25,\n      timeRemaining: 600,\n      createdAt: \"07/08/2025 08:30\",\n      updatedAt: \"07/08/2025 08:30\"\n    },\n    {\n      id: 1008,\n      subject: \"Lentidão na rede corporativa\",\n      category: \"Rede & Conectividade\",\n      description: \"Usuários relatam lentidão significativa na rede corporativa, especialmente ao acessar recursos compartilhados e internet.\",\n      requester: \"Marcos Pereira\",\n      requesterAvatar: \"https://randomuser.me/api/portraits/men/5.jpg\",\n      assignee: \"Ana Silva\",\n      assigneeAvatar: \"https://randomuser.me/api/portraits/women/2.jpg\",\n      priority: \"medium\",\n      status: \"attending\",\n      slaPercentage: 70,\n      timeRemaining: 150,\n      createdAt: \"07/08/2025 12:00\",\n      updatedAt: \"07/08/2025 18:30\"\n    }\n  ];\n\n  const handleFilterChange = (section, optionId, checked) => {\n    setFilters(prev => ({\n      ...prev,\n      [section]: checked\n        ? [...prev?.[section], optionId]\n        : prev?.[section]?.filter(id => id !== optionId)\n    }));\n  };\n\n  const handleBulkAction = (actionId, ticketIds) => {\n    console.log(`Bulk action ${actionId} on tickets:`, ticketIds);\n    // Implement bulk action logic here\n  };\n\n  const handleTicketPreview = (ticket) => {\n    setPreviewTicket(ticket);\n  };\n\n  const handleTicketAssign = (ticketId) => {\n    console.log(`Assign ticket ${ticketId}`);\n    // Implement assignment logic here\n  };\n\n  const handleStatusChange = (ticketId, newStatus) => {\n    console.log(`Change ticket ${ticketId} status to ${newStatus}`);\n    // Implement status change logic here\n  };\n\n  const handleRefresh = () => {\n    console.log('Refreshing data...');\n    // Implement refresh logic here\n  };\n\n  const handleExport = () => {\n    console.log('Exporting data...');\n    // Implement export logic here\n  };\n\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e?.target?.tagName === 'INPUT' || e?.target?.tagName === 'TEXTAREA') return;\n      \n      switch (e?.key?.toLowerCase()) {\n        case 'j':\n          // Navigate down\n          break;\n        case 'k':\n          // Navigate up\n          break;\n        case ' ':\n          e?.preventDefault();\n          // Toggle preview\n          break;\n        case 'a':\n          // Assign ticket\n          break;\n        case 'r':\n          if (e?.ctrlKey || e?.metaKey) {\n            e?.preventDefault();\n            handleRefresh();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, []);\n\n  return (\n    <div className=\"h-screen bg-background overflow-hidden\">\n      {/* Header */}\n      <Header\n        onSidebarToggle={() => setSidebarOpen(!sidebarOpen)}\n        isSidebarCollapsed={sidebarCollapsed}\n      />\n\n      {/* Main Layout */}\n      <div className=\"flex h-[calc(100vh-64px)]\">\n        {/* Main Sidebar */}\n        <Sidebar\n          isOpen={sidebarOpen}\n          onClose={() => setSidebarOpen(false)}\n          isCollapsed={sidebarCollapsed}\n          onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        />\n\n        {/* Content Area */}\n        <div className={`flex-1 transition-all duration-300 ${sidebarCollapsed ? 'lg:ml-16' : 'lg:ml-60'} min-w-0`}>\n          <div className=\"flex h-full\">\n            {/* Filter Sidebar */}\n            <div className={`flex-shrink-0 transition-all duration-300 ${filterSidebarCollapsed ? 'w-16' : 'w-72'}`}>\n              <FilterSidebar\n                isCollapsed={filterSidebarCollapsed}\n                onToggleCollapse={() => setFilterSidebarCollapsed(!filterSidebarCollapsed)}\n                filters={filters}\n                onFilterChange={handleFilterChange}\n              />\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1 flex flex-col min-w-0\">\n              {/* Toolbar */}\n              <div className=\"flex-shrink-0\">\n                <DashboardToolbar\n                  selectedTickets={selectedTickets}\n                  onBulkAction={handleBulkAction}\n                  searchQuery={searchQuery}\n                  onSearchChange={setSearchQuery}\n                  onRefresh={handleRefresh}\n                  onExport={handleExport}\n                />\n              </div>\n\n              {/* Content Grid */}\n              <div className=\"flex-1 flex min-h-0\">\n                {/* Ticket Grid */}\n                <div className=\"flex-1 p-4 min-w-0\">\n                  <TicketGrid\n                    tickets={mockTickets}\n                    selectedTickets={selectedTickets}\n                    onTicketSelect={setSelectedTickets}\n                    onTicketPreview={handleTicketPreview}\n                    searchQuery={searchQuery}\n                  />\n                </div>\n\n                {/* Right Panel */}\n                <div className=\"w-80 xl:w-96 flex-shrink-0 border-l border-border flex flex-col\">\n                  {/* Ticket Preview */}\n                  <div className=\"flex-1 min-h-0\">\n                    <TicketPreview\n                      ticket={previewTicket}\n                      onClose={() => setPreviewTicket(null)}\n                      onAssign={handleTicketAssign}\n                      onStatusChange={handleStatusChange}\n                    />\n                  </div>\n\n                  {/* Productivity Widget */}\n                  <div className=\"flex-shrink-0 p-4 border-t border-border\">\n                    <ProductivityWidget />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SupportAgentDashboard;","size_bytes":11048},"attached_assets/index_1754604173019.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Header from '../../components/ui/Header';\nimport Sidebar from '../../components/ui/Sidebar';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport UserCard from './components/UserCard';\nimport UserDetailsPanel from './components/UserDetailsPanel';\nimport BulkActionsPanel from './components/BulkActionsPanel';\nimport FilterPanel from './components/FilterPanel';\nimport UserDataGrid from './components/UserDataGrid';\nimport ActivityMonitor from './components/ActivityMonitor';\n\nconst UserManagementConsole = () => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  const [viewMode, setViewMode] = useState('grid'); // 'grid', 'cards'\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [showUserDetails, setShowUserDetails] = useState(false);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [sortConfig, setSortConfig] = useState({ key: 'nome', direction: 'asc' });\n  const [filters, setFilters] = useState({\n    search: '',\n    status: '',\n    department: '',\n    role: '',\n    activity: '',\n    dateFrom: '',\n    dateTo: '',\n    hasAvatar: false,\n    hasSignature: false,\n    ldapSync: false\n  });\n\n  // Mock data for users\n  const mockUsers = [\n    {\n      id: 1001,\n      nome: 'Ana Silva Santos',\n      email: 'ana.silva@ticketflow.com.br',\n      telefone: '(11) 99999-1234',\n      departamento: 'TI',\n      funcao: 'Administrador',\n      status: 'Ativo',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150',\n      dataCriacao: '15/01/2024',\n      ultimoAcesso: '07/08/2025 18:30',\n      sessaoAtiva: true,\n      assinatura: 'assinatura_ana.png',\n      permissoes: ['tickets_criar', 'tickets_editar', 'usuarios_criar', 'configuracoes_sistema']\n    },\n    {\n      id: 1002,\n      nome: 'Carlos Eduardo Santos',\n      email: 'carlos.santos@ticketflow.com.br',\n      telefone: '(11) 98888-5678',\n      departamento: 'Suporte',\n      funcao: 'Supervisor',\n      status: 'Ativo',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150',\n      dataCriacao: '20/02/2024',\n      ultimoAcesso: '07/08/2025 17:45',\n      sessaoAtiva: true,\n      assinatura: '',\n      permissoes: ['tickets_criar', 'tickets_editar', 'tickets_atribuir']\n    },\n    {\n      id: 1003,\n      nome: 'Maria Oliveira Costa',\n      email: 'maria.oliveira@ticketflow.com.br',\n      telefone: '(11) 97777-9012',\n      departamento: 'Suporte',\n      funcao: 'Atendente',\n      status: 'Ativo',\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150',\n      dataCriacao: '10/03/2024',\n      ultimoAcesso: '07/08/2025 16:20',\n      sessaoAtiva: false,\n      assinatura: 'assinatura_maria.png',\n      permissoes: ['tickets_criar', 'tickets_editar']\n    },\n    {\n      id: 1004,\n      nome: 'João Pedro Almeida',\n      email: 'joao.almeida@ticketflow.com.br',\n      telefone: '(11) 96666-3456',\n      departamento: 'Vendas',\n      funcao: 'Usuário',\n      status: 'Suspenso',\n      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150',\n      dataCriacao: '05/04/2024',\n      ultimoAcesso: '05/08/2025 14:30',\n      sessaoAtiva: false,\n      assinatura: '',\n      permissoes: ['tickets_criar']\n    },\n    {\n      id: 1005,\n      nome: 'Fernanda Lima Rodrigues',\n      email: 'fernanda.lima@ticketflow.com.br',\n      telefone: '(11) 95555-7890',\n      departamento: 'RH',\n      funcao: 'Supervisor',\n      status: 'Ativo',\n      avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150',\n      dataCriacao: '12/05/2024',\n      ultimoAcesso: '07/08/2025 18:15',\n      sessaoAtiva: true,\n      assinatura: 'assinatura_fernanda.png',\n      permissoes: ['usuarios_visualizar', 'usuarios_editar', 'relatorios_visualizar']\n    },\n    {\n      id: 1006,\n      nome: 'Roberto Silva Mendes',\n      email: 'roberto.mendes@ticketflow.com.br',\n      telefone: '(11) 94444-2468',\n      departamento: 'Financeiro',\n      funcao: 'Usuário',\n      status: 'Pendente',\n      avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=150',\n      dataCriacao: '01/08/2025',\n      ultimoAcesso: 'Nunca acessou',\n      sessaoAtiva: false,\n      assinatura: '',\n      permissoes: []\n    }\n  ];\n\n  const [users, setUsers] = useState(mockUsers);\n  const [filteredUsers, setFilteredUsers] = useState(mockUsers);\n\n  // Mock saved filter presets\n  const [savedPresets] = useState([\n    { id: 1, name: 'Usuários Ativos', filters: { status: 'Ativo' } },\n    { id: 2, name: 'Equipe de Suporte', filters: { department: 'Suporte' } },\n    { id: 3, name: 'Administradores', filters: { role: 'Administrador' } }\n  ]);\n\n  // Filter and sort users\n  useEffect(() => {\n    let filtered = [...users];\n\n    // Apply filters\n    if (filters?.search) {\n      const searchTerm = filters?.search?.toLowerCase();\n      filtered = filtered?.filter(user =>\n        user?.nome?.toLowerCase()?.includes(searchTerm) ||\n        user?.email?.toLowerCase()?.includes(searchTerm) ||\n        user?.id?.toString()?.includes(searchTerm)\n      );\n    }\n\n    if (filters?.status) {\n      filtered = filtered?.filter(user => user?.status === filters?.status);\n    }\n\n    if (filters?.department) {\n      filtered = filtered?.filter(user => user?.departamento === filters?.department);\n    }\n\n    if (filters?.role) {\n      filtered = filtered?.filter(user => user?.funcao === filters?.role);\n    }\n\n    if (filters?.hasAvatar) {\n      filtered = filtered?.filter(user => user?.avatar);\n    }\n\n    if (filters?.hasSignature) {\n      filtered = filtered?.filter(user => user?.assinatura);\n    }\n\n    // Apply sorting\n    filtered?.sort((a, b) => {\n      const aValue = a?.[sortConfig?.key];\n      const bValue = b?.[sortConfig?.key];\n      \n      if (aValue < bValue) return sortConfig?.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortConfig?.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    setFilteredUsers(filtered);\n  }, [users, filters, sortConfig]);\n\n  const handleSidebarToggle = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const handleSidebarCollapse = () => {\n    setIsSidebarCollapsed(!isSidebarCollapsed);\n  };\n\n  const handleUserSelect = (userId, selected) => {\n    if (selected) {\n      setSelectedUsers([...selectedUsers, userId]);\n    } else {\n      setSelectedUsers(selectedUsers?.filter(id => id !== userId));\n    }\n  };\n\n  const handleSelectAll = (selected) => {\n    if (selected) {\n      setSelectedUsers(filteredUsers?.map(user => user?.id));\n    } else {\n      setSelectedUsers([]);\n    }\n  };\n\n  const handleSort = (key) => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev?.key === key && prev?.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  const handleEditUser = (user) => {\n    setSelectedUser(user);\n    setShowUserDetails(true);\n  };\n\n  const handleDeleteUser = (user) => {\n    if (window.confirm(`Tem certeza que deseja excluir o usuário ${user?.nome}?`)) {\n      setUsers(users?.filter(u => u?.id !== user?.id));\n      setSelectedUsers(selectedUsers?.filter(id => id !== user?.id));\n    }\n  };\n\n  const handleToggleUserStatus = (user) => {\n    const newStatus = user?.status === 'Ativo' ? 'Suspenso' : 'Ativo';\n    setUsers(users?.map(u => \n      u?.id === user?.id ? { ...u, status: newStatus } : u\n    ));\n  };\n\n  const handleSaveUser = (userData) => {\n    if (selectedUser) {\n      // Update existing user\n      setUsers(users?.map(u => \n        u?.id === selectedUser?.id ? { ...selectedUser, ...userData } : u\n      ));\n    } else {\n      // Create new user\n      const newUser = {\n        ...userData,\n        id: Math.max(...users?.map(u => u?.id)) + 1,\n        dataCriacao: new Date()?.toLocaleDateString('pt-BR'),\n        ultimoAcesso: 'Nunca acessou',\n        sessaoAtiva: false\n      };\n      setUsers([...users, newUser]);\n    }\n    setShowUserDetails(false);\n    setSelectedUser(null);\n  };\n\n  const handleBulkAction = (action, actionData, userIds) => {\n    switch (action) {\n      case 'status':\n        setUsers(users?.map(u => \n          userIds?.includes(u?.id) ? { ...u, status: actionData?.status } : u\n        ));\n        break;\n      case 'department':\n        setUsers(users?.map(u => \n          userIds?.includes(u?.id) ? { ...u, departamento: actionData?.department } : u\n        ));\n        break;\n      case 'role':\n        setUsers(users?.map(u => \n          userIds?.includes(u?.id) ? { ...u, funcao: actionData?.role } : u\n        ));\n        break;\n      case 'delete':\n        setUsers(users?.filter(u => !userIds?.includes(u?.id)));\n        break;\n      default:\n        console.log(`Bulk action ${action} executed for users:`, userIds);\n    }\n    setSelectedUsers([]);\n  };\n\n  const handleSavePreset = (name, filterData) => {\n    console.log('Saving preset:', name, filterData);\n  };\n\n  const handleLoadPreset = (preset) => {\n    setFilters({ ...filters, ...preset?.filters });\n  };\n\n  const sidebarWidth = isSidebarCollapsed ? 'ml-16' : 'ml-60';\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Helmet>\n        <title>Console de Gerenciamento de Usuários - TicketFlow Pro</title>\n        <meta name=\"description\" content=\"Centro administrativo para gerenciamento completo de usuários, permissões e controle de acesso no TicketFlow Pro\" />\n      </Helmet>\n      <Header \n        onSidebarToggle={handleSidebarToggle}\n        isSidebarCollapsed={isSidebarCollapsed}\n      />\n      <Sidebar\n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        isCollapsed={isSidebarCollapsed}\n        onToggleCollapse={handleSidebarCollapse}\n      />\n      <main className={`pt-16 lg:${sidebarWidth} transition-all duration-300`}>\n        <div className=\"p-6 space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Console de Gerenciamento de Usuários</h1>\n              <p className=\"text-muted-foreground\">\n                Gerencie usuários, permissões e monitore atividades do sistema\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                iconName=\"Download\"\n                iconPosition=\"left\"\n                iconSize={16}\n              >\n                Exportar\n              </Button>\n              <Button\n                variant=\"outline\"\n                iconName=\"Upload\"\n                iconPosition=\"left\"\n                iconSize={16}\n              >\n                Importar CSV\n              </Button>\n              <Button\n                variant=\"default\"\n                iconName=\"UserPlus\"\n                iconPosition=\"left\"\n                iconSize={16}\n                onClick={() => {\n                  setSelectedUser(null);\n                  setShowUserDetails(true);\n                }}\n              >\n                Novo Usuário\n              </Button>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[\n              { label: 'Total de Usuários', value: users?.length, icon: 'Users', color: 'text-primary' },\n              { label: 'Usuários Ativos', value: users?.filter(u => u?.status === 'Ativo')?.length, icon: 'UserCheck', color: 'text-success' },\n              { label: 'Online Agora', value: users?.filter(u => u?.sessaoAtiva)?.length, icon: 'Wifi', color: 'text-accent' },\n              { label: 'Pendentes', value: users?.filter(u => u?.status === 'Pendente')?.length, icon: 'Clock', color: 'text-warning' }\n            ]?.map((stat, index) => (\n              <div key={index} className=\"bg-card border border-border rounded-lg p-6 shadow-enterprise\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">{stat?.label}</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{stat?.value}</p>\n                  </div>\n                  <Icon name={stat?.icon} size={24} className={stat?.color} />\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n            {/* Left Panel - Filters and User List */}\n            <div className=\"xl:col-span-2 space-y-6\">\n              {/* Filters */}\n              <FilterPanel\n                filters={filters}\n                onFiltersChange={setFilters}\n                onSavePreset={handleSavePreset}\n                savedPresets={savedPresets}\n                onLoadPreset={handleLoadPreset}\n              />\n\n              {/* Toolbar */}\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant={viewMode === 'grid' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    iconName=\"Grid3X3\"\n                    iconSize={16}\n                    onClick={() => setViewMode('grid')}\n                  >\n                    Grade\n                  </Button>\n                  <Button\n                    variant={viewMode === 'cards' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    iconName=\"LayoutGrid\"\n                    iconSize={16}\n                    onClick={() => setViewMode('cards')}\n                  >\n                    Cartões\n                  </Button>\n                </div>\n                \n                {selectedUsers?.length > 0 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    iconName=\"Settings\"\n                    iconPosition=\"left\"\n                    iconSize={16}\n                    onClick={() => setShowBulkActions(true)}\n                  >\n                    Ações em Lote ({selectedUsers?.length})\n                  </Button>\n                )}\n              </div>\n\n              {/* User List */}\n              {viewMode === 'grid' ? (\n                <UserDataGrid\n                  users={filteredUsers}\n                  selectedUsers={selectedUsers}\n                  onUserSelect={handleUserSelect}\n                  onSelectAll={handleSelectAll}\n                  onEdit={handleEditUser}\n                  onDelete={handleDeleteUser}\n                  onToggleStatus={handleToggleUserStatus}\n                  sortConfig={sortConfig}\n                  onSort={handleSort}\n                />\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-semibold text-foreground\">\n                      Usuários ({filteredUsers?.length})\n                    </h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {filteredUsers?.map((user) => (\n                      <UserCard\n                        key={user?.id}\n                        user={user}\n                        onEdit={handleEditUser}\n                        onDelete={handleDeleteUser}\n                        onToggleStatus={handleToggleUserStatus}\n                        isSelected={selectedUsers?.includes(user?.id)}\n                        onSelect={handleUserSelect}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Right Panel - Activity Monitor */}\n            <div className=\"space-y-6\">\n              <ActivityMonitor />\n            </div>\n          </div>\n        </div>\n      </main>\n      {/* User Details Panel */}\n      {showUserDetails && (\n        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n          <div className=\"w-full max-w-4xl h-full max-h-[90vh]\">\n            <UserDetailsPanel\n              user={selectedUser}\n              onSave={handleSaveUser}\n              onClose={() => {\n                setShowUserDetails(false);\n                setSelectedUser(null);\n              }}\n            />\n          </div>\n        </div>\n      )}\n      {/* Bulk Actions Panel */}\n      {showBulkActions && (\n        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n          <div className=\"w-full max-w-2xl\">\n            <BulkActionsPanel\n              selectedUsers={selectedUsers}\n              onBulkAction={handleBulkAction}\n              onClose={() => setShowBulkActions(false)}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserManagementConsole;","size_bytes":17163},"attached_assets/tailwind_1754603526662.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Core Colors */\n    --color-background: #FAFBFC; /* gray-50 */\n    --color-foreground: #1E293B; /* slate-800 */\n    --color-border: #E2E8F0; /* slate-200 */\n    --color-input: #FFFFFF; /* white */\n    --color-ring: #2563EB; /* blue-600 */\n    \n    /* Card Colors */\n    --color-card: #FFFFFF; /* white */\n    --color-card-foreground: #1E293B; /* slate-800 */\n    \n    /* Popover Colors */\n    --color-popover: #FFFFFF; /* white */\n    --color-popover-foreground: #1E293B; /* slate-800 */\n    \n    /* Muted Colors */\n    --color-muted: #F1F5F9; /* slate-100 */\n    --color-muted-foreground: #64748B; /* slate-500 */\n    \n    /* Primary Colors */\n    --color-primary: #2563EB; /* blue-600 */\n    --color-primary-foreground: #FFFFFF; /* white */\n    \n    /* Secondary Colors */\n    --color-secondary: #64748B; /* slate-500 */\n    --color-secondary-foreground: #FFFFFF; /* white */\n    \n    /* Accent Colors */\n    --color-accent: #F59E0B; /* amber-500 */\n    --color-accent-foreground: #FFFFFF; /* white */\n    \n    /* Success Colors */\n    --color-success: #059669; /* emerald-600 */\n    --color-success-foreground: #FFFFFF; /* white */\n    \n    /* Warning Colors */\n    --color-warning: #D97706; /* amber-600 */\n    --color-warning-foreground: #FFFFFF; /* white */\n    \n    /* Error/Destructive Colors */\n    --color-error: #DC2626; /* red-600 */\n    --color-error-foreground: #FFFFFF; /* white */\n    --color-destructive: #DC2626; /* red-600 */\n    --color-destructive-foreground: #FFFFFF; /* white */\n  }\n  \n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer utilities {\n  .text-shadow-sm {\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  }\n  \n  .shadow-enterprise {\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  }\n  \n  .shadow-enterprise-lg {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  }\n  \n  .transition-enterprise {\n    transition: all 200ms ease-out;\n  }\n  \n  .transition-modal {\n    transition: all 300ms ease-in-out;\n  }\n}","size_bytes":2317},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/departmentStorage.ts":{"content":"import { db } from \"./db\";\nimport { departments, users, tickets } from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport type { Department, InsertDepartment, User, Ticket, TicketWithDetails } from \"@shared/schema\";\n\nexport class DatabaseDepartmentStorage {\n  // Department methods\n  async getDepartment(id: string): Promise<Department | undefined> {\n    const [department] = await db.select().from(departments).where(eq(departments.id, id));\n    return department || undefined;\n  }\n\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async createDepartment(insertDepartment: InsertDepartment): Promise<Department> {\n    const [department] = await db\n      .insert(departments)\n      .values(insertDepartment)\n      .returning();\n    return department;\n  }\n\n  async updateDepartment(id: string, updates: Partial<InsertDepartment>): Promise<Department | undefined> {\n    const [department] = await db\n      .update(departments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(departments.id, id))\n      .returning();\n    return department || undefined;\n  }\n\n  async deleteDepartment(id: string): Promise<boolean> {\n    const result = await db.delete(departments).where(eq(departments.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Department-specific user methods\n  async getUsersByDepartment(departmentId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.departmentId, departmentId));\n  }\n\n  // Department-specific ticket methods\n  async getTicketsByDepartment(departmentId: string): Promise<Ticket[]> {\n    return await db.select().from(tickets).where(eq(tickets.departmentId, departmentId));\n  }\n\n  // Check if user can access ticket (same department)\n  async canUserAccessTicket(userId: string, ticketId: string): Promise<boolean> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) return false;\n\n    // Admin can access all tickets\n    if (user.role === 'admin') return true;\n\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.id, ticketId));\n    if (!ticket) return false;\n\n    // Users can only access tickets from their department\n    return user.departmentId === ticket.departmentId;\n  }\n\n  // Get tickets accessible by user (same department or admin)\n  async getAccessibleTickets(userId: string): Promise<Ticket[]> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) return [];\n\n    // Admin can see all tickets\n    if (user.role === 'admin') {\n      return await db.select().from(tickets);\n    }\n\n    // Users can only see tickets from their department\n    if (user.departmentId) {\n      return await db.select().from(tickets).where(eq(tickets.departmentId, user.departmentId));\n    }\n\n    return [];\n  }\n}\n\nexport const departmentStorage = new DatabaseDepartmentStorage();","size_bytes":2917},"client/src/components/AppIcon.tsx":{"content":"import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { HelpCircle } from 'lucide-react';\n\ninterface IconProps {\n    name: string;\n    size?: number;\n    color?: string;\n    className?: string;\n    strokeWidth?: number;\n    [key: string]: any;\n}\n\nfunction Icon({\n    name,\n    size = 24,\n    color = \"currentColor\",\n    className = \"\",\n    strokeWidth = 2,\n    ...props\n}: IconProps) {\n    const IconComponent = (LucideIcons as any)?.[name];\n\n    if (!IconComponent) {\n        return <HelpCircle size={size} color=\"gray\" strokeWidth={strokeWidth} className={className} {...props} />;\n    }\n\n    return <IconComponent\n        size={size}\n        color={color}\n        strokeWidth={strokeWidth}\n        className={className}\n        {...props}\n    />;\n}\n\nexport default Icon;","size_bytes":798},"client/src/components/AppImage.tsx":{"content":"import React from 'react';\n\ninterface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  fallback?: string;\n}\n\nconst AppImage: React.FC<ImageProps> = ({ src, alt, fallback, className, ...props }) => {\n  const [error, setError] = React.useState(false);\n\n  const handleError = () => {\n    setError(true);\n  };\n\n  if (error || !src) {\n    return (\n      <div className={`bg-muted flex items-center justify-center ${className}`}>\n        <span className=\"text-xs text-muted-foreground\">\n          {fallback || alt?.charAt(0)?.toUpperCase() || '?'}\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <img\n      src={src}\n      alt={alt}\n      onError={handleError}\n      className={className}\n      {...props}\n    />\n  );\n};\n\nexport default AppImage;","size_bytes":794},"client/src/components/Button.tsx":{"content":"import React from 'react';\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"../utils/cn\";\nimport Icon from './AppIcon';\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n                success: \"bg-success text-success-foreground hover:bg-success/90\",\n                warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n                danger: \"bg-error text-error-foreground hover:bg-error/90\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n                xs: \"h-8 rounded-md px-2 text-xs\",\n                xl: \"h-12 rounded-md px-10 text-base\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    className?: string;\n    variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link' | 'success' | 'warning' | 'danger';\n    size?: 'default' | 'sm' | 'lg' | 'icon' | 'xs' | 'xl';\n    asChild?: boolean;\n    children?: React.ReactNode;\n    loading?: boolean;\n    iconName?: string;\n    iconPosition?: 'left' | 'right';\n    iconSize?: number;\n    fullWidth?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({\n    className,\n    variant,\n    size,\n    asChild = false,\n    children,\n    loading = false,\n    iconName,\n    iconPosition = 'left',\n    iconSize,\n    fullWidth = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Icon size mapping based on button size\n    const iconSizeMap = {\n        xs: 12,\n        sm: 14,\n        default: 16,\n        lg: 18,\n        xl: 20,\n        icon: 16,\n    };\n\n    const calculatedIconSize = iconSize || iconSizeMap?.[size || 'default'] || 16;\n\n    // Loading spinner\n    const LoadingSpinner = () => (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n        </svg>\n    );\n\n    // Icon rendering\n    const renderIcon = () => {\n        if (!iconName) return null;\n\n        return (\n            <Icon\n                name={iconName}\n                size={calculatedIconSize}\n                className={cn(\n                    children && iconPosition === 'left' && \"mr-2\",\n                    children && iconPosition === 'right' && \"ml-2\"\n                )}\n            />\n        );\n    };\n\n    return (\n        <Comp\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </Comp>\n    );\n});\n\nButton.displayName = \"Button\";\n\nexport default Button;","size_bytes":4235},"client/src/components/CreateTicketPopup.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { X, Paperclip, Upload } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface DynamicField {\n  id: string;\n  label: string;\n  type: 'text' | 'textarea' | 'select' | 'number' | 'email' | 'tel';\n  placeholder?: string;\n  required?: boolean;\n  options?: string[];\n}\n\n// Configurações de campos dinâmicos por categoria (baseado nas categorias reais do banco)\nconst DYNAMIC_FIELDS_CONFIG: Record<string, DynamicField[]> = {\n  'Suporte Técnico': [\n    { id: 'tipo_problema', label: 'Tipo de Problema', type: 'select', required: true, \n      options: ['Instalação de Software', 'Problemas de Hardware', 'Problemas de Rede', 'Acesso ao Sistema', 'Outros'] },\n    { id: 'equipamento', label: 'Equipamento/Sistema Afetado', type: 'text', placeholder: 'Ex: Notebook Dell, Sistema XYZ', required: true },\n    { id: 'urgencia_negocio', label: 'Impacto no Negócio', type: 'select', required: true,\n      options: ['Baixo - Não impacta operação', 'Médio - Impacta algumas funções', 'Alto - Impacta operação crítica', 'Crítico - Para toda operação'] }\n  ],\n  'Problemas de Hardware': [\n    { id: 'equipamento_problema', label: 'Equipamento com Problema', type: 'text', placeholder: 'Ex: Notebook HP, Impressora Xerox', required: true },\n    { id: 'numero_patrimonio', label: 'Número do Patrimônio', type: 'text', placeholder: 'Se disponível' },\n    { id: 'descricao_problema', label: 'Descrição Detalhada do Problema', type: 'textarea', required: true },\n    { id: 'local_equipamento', label: 'Localização do Equipamento', type: 'text', required: true }\n  ],\n  'Folha de Pagamento': [\n    { id: 'cpf_funcionario', label: 'CPF do Funcionário', type: 'text', placeholder: '000.000.000-00', required: true },\n    { id: 'tipo_solicitacao', label: 'Tipo de Solicitação', type: 'select', required: true,\n      options: ['Correção de Dados', 'Inclusão de Benefício', 'Exclusão de Benefício', 'Férias', 'Licença', 'Outros'] },\n    { id: 'periodo_referencia', label: 'Período de Referência', type: 'text', placeholder: 'Ex: Janeiro/2025', required: true },\n    { id: 'centro_custo', label: 'Centro de Custo', type: 'text', required: true }\n  ],\n  'Contas a Pagar': [\n    { id: 'fornecedor', label: 'Nome do Fornecedor', type: 'text', required: true },\n    { id: 'numero_nota_fiscal', label: 'Número da Nota Fiscal', type: 'text', required: true },\n    { id: 'valor_pagamento', label: 'Valor do Pagamento (R$)', type: 'number', required: true },\n    { id: 'data_vencimento', label: 'Data de Vencimento', type: 'text', placeholder: 'DD/MM/AAAA', required: true }\n  ]\n};\n\ninterface CreateTicketPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateTicketPopup({ isOpen, onClose }: CreateTicketPopupProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    subject: '',\n    description: '',\n    requesterDepartment: '',\n    primaryCategory: '',\n    secondaryCategory: '',\n    assignedTo: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical',\n    dynamicFields: {} as Record<string, string>\n  });\n  \n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [availableCategories, setAvailableCategories] = useState<any[]>([]);\n\n  // Buscar dados necessários\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n    enabled: isOpen,\n  });\n\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n    enabled: isOpen,\n  });\n\n  const { data: allCategories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n    enabled: isOpen,\n  });\n\n  // Usuário atual\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Atualizar categorias disponíveis quando departamento primário muda\n  useEffect(() => {\n    if (formData.primaryCategory && allCategories) {\n      const selectedDept = departments?.find(d => d.name === formData.primaryCategory);\n      if (selectedDept) {\n        const deptCategories = allCategories.filter(cat => cat.departmentId === selectedDept.id);\n        setAvailableCategories(deptCategories);\n      } else {\n        setAvailableCategories([]);\n      }\n      \n      setFormData(prev => ({ \n        ...prev, \n        secondaryCategory: '',\n        dynamicFields: {}\n      }));\n    }\n  }, [formData.primaryCategory, allCategories, departments]);\n\n  // Mutation para criar ticket\n  const createTicketMutation = useMutation({\n    mutationFn: async (ticketData: any) => {\n      return apiRequest('/api/tickets', 'POST', ticketData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Ticket criado com sucesso!',\n        description: 'O ticket foi criado e será processado em breve.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      onClose();\n      // Reset form\n      setFormData({\n        subject: '',\n        description: '',\n        requesterDepartment: '',\n        primaryCategory: '',\n        secondaryCategory: '',\n        assignedTo: '',\n        priority: 'medium',\n        dynamicFields: {}\n      });\n      setSelectedFiles([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro ao criar ticket',\n        description: error.message || 'Ocorreu um erro inesperado.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const selectedDept = departments?.find(d => d.name === formData.primaryCategory);\n    const selectedCategory = availableCategories.find(c => c.name === formData.secondaryCategory);\n    \n    const ticketData = {\n      title: formData.subject,\n      description: formData.description,\n      departmentId: selectedDept?.id,\n      categoryId: selectedCategory?.id,\n      priority: formData.priority,\n      requesterId: currentUser?.id,\n      assignedToId: formData.assignedTo || null,\n      requesterDepartment: formData.requesterDepartment,\n      customFields: formData.dynamicFields,\n      status: 'open'\n    };\n\n    createTicketMutation.mutate(ticketData);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleDynamicFieldChange = (fieldId: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      dynamicFields: {\n        ...prev.dynamicFields,\n        [fieldId]: value\n      }\n    }));\n  };\n\n  const primaryCategories = departments?.map(d => d.name) || [];\n  const dynamicFields = DYNAMIC_FIELDS_CONFIG[formData.secondaryCategory] || [];\n\n  // Se não estiver aberto, não renderizar nada\n  if (!isOpen) return null;\n\n  return (\n    <div \n      style={{ \n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.6)',\n        zIndex: 999999,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '16px'\n      }}\n      onClick={onClose}\n    >\n      <div \n        style={{\n          backgroundColor: 'white',\n          borderRadius: '12px',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)',\n          width: '100%',\n          maxWidth: '900px',\n          maxHeight: '90vh',\n          overflow: 'hidden'\n        }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          padding: '24px',\n          borderBottom: '1px solid #e5e7eb',\n          background: 'linear-gradient(to right, #eff6ff, #eef2ff)'\n        }}>\n          <div>\n            <h2 style={{\n              fontSize: '24px',\n              fontWeight: 'bold',\n              color: '#111827',\n              margin: 0\n            }}>Novo Ticket</h2>\n            <p style={{\n              fontSize: '14px',\n              color: '#6b7280',\n              margin: '4px 0 0 0'\n            }}>Preencha os campos abaixo para criar seu ticket</p>\n          </div>\n          <button\n            onClick={onClose}\n            style={{\n              padding: '8px',\n              borderRadius: '50%',\n              border: 'none',\n              backgroundColor: 'transparent',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}\n          >\n            <X style={{ width: '20px', height: '20px', color: '#6b7280' }} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div style={{\n          overflowY: 'auto',\n          maxHeight: 'calc(90vh - 120px)'\n        }}>\n          <form onSubmit={handleSubmit} style={{ padding: '24px' }}>\n            {/* Assunto */}\n            <div style={{ marginBottom: '20px' }}>\n              <label style={{\n                display: 'block',\n                fontSize: '14px',\n                fontWeight: '500',\n                color: '#374151',\n                marginBottom: '4px'\n              }}>\n                Assunto <span style={{ color: '#ef4444' }}>*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.subject}\n                onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n                style={{\n                  width: '100%',\n                  padding: '8px 12px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '14px',\n                  outline: 'none',\n                  transition: 'all 0.2s'\n                }}\n                onFocus={(e) => e.target.style.borderColor = '#3b82f6'}\n                onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                required\n              />\n            </div>\n\n            {/* Descrição */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Descrição <span className=\"text-red-500\">*</span>\n              </label>\n              <textarea\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                rows={4}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\n                required\n              />\n            </div>\n\n            {/* Setor do Solicitante */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Setor do Solicitante <span className=\"text-red-500\">*</span>\n              </label>\n              <Select\n                value={formData.requesterDepartment}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, requesterDepartment: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione o setor...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {primaryCategories.map((dept) => (\n                    <SelectItem key={dept} value={dept}>\n                      {dept}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Departamento Responsável */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Departamento Responsável <span className=\"text-red-500\">*</span>\n              </label>\n              <Select\n                value={formData.primaryCategory}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, primaryCategory: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione o departamento...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {primaryCategories.map((dept) => (\n                    <SelectItem key={dept} value={dept}>\n                      {dept}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Categoria */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Categoria <span className=\"text-red-500\">*</span>\n              </label>\n              <Select\n                value={formData.secondaryCategory}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, secondaryCategory: value }))}\n                disabled={!formData.primaryCategory || availableCategories.length === 0}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder={\n                    !formData.primaryCategory ? \"Selecione um departamento primeiro\" :\n                    availableCategories.length === 0 ? \"Nenhuma categoria disponível\" : \"Selecione...\"\n                  } />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableCategories.map((category) => (\n                    <SelectItem key={category.id} value={category.name}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Campos Dinâmicos */}\n            {dynamicFields.length > 0 && (\n              <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Informações Específicas</h3>\n                {dynamicFields.map((field) => (\n                  <div key={field.id}>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      {field.label}\n                      {field.required && <span className=\"text-red-500\">*</span>}\n                    </label>\n                    {field.type === 'select' ? (\n                      <Select\n                        value={formData.dynamicFields[field.id] || ''}\n                        onValueChange={(value) => handleDynamicFieldChange(field.id, value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {field.options?.map((option) => (\n                            <SelectItem key={option} value={option}>\n                              {option}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : field.type === 'textarea' ? (\n                      <textarea\n                        value={formData.dynamicFields[field.id] || ''}\n                        onChange={(e) => handleDynamicFieldChange(field.id, e.target.value)}\n                        placeholder={field.placeholder}\n                        required={field.required}\n                        rows={3}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\n                      />\n                    ) : (\n                      <input\n                        type={field.type}\n                        value={formData.dynamicFields[field.id] || ''}\n                        onChange={(e) => handleDynamicFieldChange(field.id, e.target.value)}\n                        placeholder={field.placeholder}\n                        required={field.required}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      />\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Prioridade */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Prioridade\n              </label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: 'low' | 'medium' | 'high' | 'critical') => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Baixa</SelectItem>\n                  <SelectItem value=\"medium\">Média</SelectItem>\n                  <SelectItem value=\"high\">Alta</SelectItem>\n                  <SelectItem value=\"critical\">Crítica</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Atribuído a */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Atribuído a\n              </label>\n              <Select\n                value={formData.assignedTo}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, assignedTo: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecionar responsável...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {users?.filter(u => u.canHandleTickets).map((user) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.name} ({user.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Arquivos */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Anexos\n              </label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center\">\n                <input\n                  type=\"file\"\n                  id=\"file-upload\"\n                  multiple\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n                <label \n                  htmlFor=\"file-upload\"\n                  className=\"cursor-pointer inline-flex items-center space-x-2 text-blue-600 hover:text-blue-700\"\n                >\n                  <Paperclip className=\"h-5 w-5\" />\n                  <span>Clique para anexar arquivos</span>\n                </label>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Máximo 10MB por arquivo\n                </p>\n              </div>\n              \n              {selectedFiles.length > 0 && (\n                <div className=\"mt-2 space-y-2\">\n                  {selectedFiles.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-100 rounded\">\n                      <span className=\"text-sm text-gray-700\">{file.name}</span>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeFile(index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Botões */}\n            <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n              >\n                Cancelar\n              </button>\n              <button\n                type=\"submit\"\n                disabled={createTicketMutation.isPending}\n                className=\"px-6 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:cursor-not-allowed flex items-center space-x-2\"\n              >\n                {createTicketMutation.isPending ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    <span>Criando...</span>\n                  </>\n                ) : (\n                  <span>Criar Ticket</span>\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21262},"client/src/components/ExpandableSidebar.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  LayoutDashboard, \n  Ticket, \n  Users, \n  Settings, \n  BarChart3, \n  UserCheck,\n  FileText,\n  Building2,\n  ChevronLeft,\n  ChevronRight,\n  CheckCircle2\n} from 'lucide-react';\n\ninterface SidebarItem {\n  icon: React.ReactNode;\n  label: string;\n  href: string;\n  badge?: number;\n}\n\ninterface ExpandableSidebarProps {\n  currentPath: string;\n  onNavigate: (path: string) => void;\n}\n\nexport function ExpandableSidebar({ currentPath, onNavigate }: ExpandableSidebarProps) {\n  const [isExpanded, setIsExpanded] = useState(true);\n\n  const menuItems: SidebarItem[] = [\n    { icon: <LayoutDashboard className=\"w-5 h-5\" />, label: 'Dashboard', href: '/' },\n    { icon: <Ticket className=\"w-5 h-5\" />, label: 'Tickets', href: '/tickets', badge: 12 },\n    { icon: <CheckCircle2 className=\"w-5 h-5\" />, label: 'Aprovações', href: '/approvals', badge: 3 },\n    { icon: <Users className=\"w-5 h-5\" />, label: 'Usuários', href: '/users' },\n    { icon: <Building2 className=\"w-5 h-5\" />, label: 'Departamentos', href: '/departments' },\n    { icon: <FileText className=\"w-5 h-5\" />, label: 'Categorias', href: '/categories' },\n    { icon: <BarChart3 className=\"w-5 h-5\" />, label: 'Relatórios', href: '/reports' },\n    { icon: <UserCheck className=\"w-5 h-5\" />, label: 'Perfil', href: '/profile' },\n    { icon: <Settings className=\"w-5 h-5\" />, label: 'Configurações', href: '/settings' },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/') return currentPath === '/';\n    return currentPath.startsWith(href);\n  };\n\n  return (\n    <div \n      className={`bg-white border-r border-gray-200 transition-all duration-300 ease-in-out flex flex-col relative ${\n        isExpanded ? 'w-64' : 'w-16'\n      }`}\n      style={{ \n        minWidth: isExpanded ? '256px' : '64px',\n        maxWidth: isExpanded ? '256px' : '64px'\n      }}\n    >\n      {/* Header */}\n      <div className={`border-b border-gray-200 ${isExpanded ? 'p-4' : 'p-2'}`}>\n        <div className={`flex items-center ${isExpanded ? 'justify-between' : 'flex-col space-y-2'}`}>\n          {isExpanded ? (\n            <div className=\"flex-1\">\n              <h2 className=\"text-lg font-bold text-gray-900\">TicketFlow Pro</h2>\n              <p className=\"text-xs text-gray-500\">Sistema de Gestão</p>\n            </div>\n          ) : (\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">T</span>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"p-2 hover:bg-gray-100 rounded-lg\"\n            title={isExpanded ? 'Recolher sidebar' : 'Expandir sidebar'}\n          >\n            {isExpanded ? <ChevronLeft className=\"w-4 h-4\" /> : <ChevronRight className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-2 space-y-1\">\n        {menuItems.map((item) => {\n          const active = isActive(item.href);\n          return (\n            <div key={item.href} className=\"relative group\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => onNavigate(item.href)}\n                className={`w-full ${isExpanded ? 'justify-start' : 'justify-center'} p-3 ${\n                  active \n                    ? 'bg-blue-600 text-white hover:bg-blue-700' \n                    : 'text-gray-700 hover:bg-gray-100'\n                }`}\n              >\n                <div className={`flex items-center ${isExpanded ? 'space-x-3' : ''} w-full`}>\n                  <div className=\"flex-shrink-0\">\n                    {item.icon}\n                  </div>\n                  {isExpanded && (\n                    <>\n                      <span className=\"text-sm font-medium flex-1 text-left\">{item.label}</span>\n                      {item.badge && item.badge > 0 && (\n                        <Badge \n                          variant=\"secondary\" \n                          className={`text-xs ${\n                            active \n                              ? 'bg-white/20 text-white' \n                              : 'bg-gray-200 text-gray-700'\n                          }`}\n                        >\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </>\n                  )}\n                </div>\n              </Button>\n              \n              {/* Tooltip para sidebar colapsada */}\n              {!isExpanded && (\n                <div className=\"absolute left-full ml-2 top-1/2 transform -translate-y-1/2 bg-gray-900 text-white px-2 py-1 rounded text-xs whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-50\">\n                  {item.label}\n                  {item.badge && item.badge > 0 && (\n                    <span className=\"ml-2 bg-red-500 text-white rounded-full px-1 text-xs\">\n                      {item.badge}\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className={`border-t border-gray-200 ${isExpanded ? 'p-4' : 'p-2'}`}>\n        {isExpanded ? (\n          <div className=\"text-xs text-gray-500 text-center\">\n            <p>Versão 2.1.0</p>\n            <p className=\"mt-1\">© 2024 TicketFlow Pro</p>\n          </div>\n        ) : (\n          <div className=\"flex justify-center\">\n            <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n              <span className=\"text-gray-600 text-xs font-bold\">v2</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5898},"client/src/components/SimpleTicketModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { X, AlertCircle, Paperclip, Upload } from 'lucide-react';\n\ninterface SimpleTicketModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  categories: Category[];\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  customFields: CustomField[];\n}\n\ninterface CustomField {\n  id: string;\n  name: string;\n  type: string;\n  required: boolean;\n  options?: string[];\n}\n\nexport default function SimpleTicketModal({ isOpen, onClose }: SimpleTicketModalProps) {\n  const [formData, setFormData] = useState({\n    subject: '',\n    requesterName: '',\n    requesterEmail: '',\n    requesterPhone: '',\n    requesterDepartment: '',\n    responsibleDepartment: '',\n    category: '',\n    priority: 'Média',\n    description: '',\n    attachments: [] as File[],\n    customFields: {} as Record<string, string>\n  });\n  \n  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: ['/api/departments'],\n    enabled: isOpen\n  });\n\n  // Buscar categorias filtradas por departamento responsável\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories/department', formData.responsibleDepartment],\n    enabled: isOpen && !!formData.responsibleDepartment\n  });\n\n  // Buscar campos customizados para categoria selecionada E departamento\n  const { data: customFields = [] } = useQuery<CustomField[]>({\n    queryKey: [\"/api/custom-fields/category\", selectedCategoryId, formData.responsibleDepartment],\n    queryFn: async () => {\n      if (!selectedCategoryId || !formData.responsibleDepartment) return [];\n      \n      const response = await fetch(\n        `/api/custom-fields/category/${selectedCategoryId}?departmentId=${formData.responsibleDepartment}`\n      );\n      \n      if (!response.ok) {\n        console.error('Error fetching custom fields:', response.statusText);\n        return [];\n      }\n      \n      return response.json();\n    },\n    enabled: isOpen && !!selectedCategoryId && !!formData.responsibleDepartment,\n  });\n\n  // Buscar dados do usuário logado\n  const { data: currentUser } = useQuery({\n    queryKey: ['/api/auth/user'],\n    enabled: isOpen\n  });\n\n  // Auto-preencher dados do usuário quando o modal abrir\n  useEffect(() => {\n    if (isOpen && currentUser) {\n      const fullName = currentUser.firstName && currentUser.lastName \n        ? `${currentUser.firstName} ${currentUser.lastName}`.trim()\n        : currentUser.name || '';\n      \n      setFormData(prev => ({\n        ...prev,\n        requesterName: fullName,\n        requesterEmail: currentUser.email || '',\n        requesterDepartment: currentUser.departmentId || '' // Auto-preenchido e travado\n      }));\n    }\n  }, [isOpen, currentUser]);\n  \n  if (!isOpen) return null;\n\n  const handleDepartmentChange = (departmentId: string) => {\n    setFormData(prev => ({ \n      ...prev, \n      responsibleDepartment: departmentId,\n      category: '',\n      customFields: {}\n    }));\n    setSelectedCategory(null);\n    setSelectedCategoryId('');\n  };\n\n  const handleCategoryChange = (categoryId: string) => {\n    const category = categories.find(c => c.id === categoryId);\n    setSelectedCategory(category || null);\n    setSelectedCategoryId(categoryId);\n    setFormData(prev => ({ \n      ...prev, \n      category: categoryId,\n      customFields: {} // Limpar campos customizados ao trocar categoria\n    }));\n  };\n\n  const handleResponsibleDepartmentChange = (departmentId: string) => {\n    setFormData(prev => ({ \n      ...prev, \n      responsibleDepartment: departmentId,\n      category: '', // Limpar categoria ao trocar departamento responsável\n      customFields: {} // Limpar campos customizados\n    }));\n    setSelectedCategory(null);\n    setSelectedCategoryId('');\n  };\n\n  const handleCustomFieldChange = (fieldId: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      customFields: {\n        ...prev.customFields,\n        [fieldId]: value\n      }\n    }));\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setFormData(prev => ({\n      ...prev,\n      attachments: [...prev.attachments, ...files]\n    }));\n  };\n\n  const removeFile = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      attachments: prev.attachments.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/tickets', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n      });\n      \n      if (response.ok) {\n        alert('Ticket criado com sucesso!');\n        onClose();\n        setFormData({\n          subject: '',\n          requesterName: '',\n          requesterEmail: '',\n          requesterPhone: '',\n          requesterDepartment: '',\n          responsibleDepartment: '',\n          category: '',\n          priority: 'Média',\n          description: '',\n          attachments: [],\n          customFields: {}\n        });\n      } else {\n        alert('Erro ao criar ticket');\n      }\n    } catch (error) {\n      alert('Erro ao criar ticket');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.6)',\n        zIndex: 999999,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '20px'\n      }}\n      onClick={onClose}\n    >\n      <div\n        style={{\n          backgroundColor: 'white',\n          borderRadius: '12px',\n          width: '100%',\n          maxWidth: '900px',\n          maxHeight: '90vh',\n          overflow: 'hidden',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)'\n        }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          padding: '24px',\n          borderBottom: '1px solid #e5e7eb',\n          background: 'linear-gradient(to right, #eff6ff, #eef2ff)'\n        }}>\n          <div>\n            <h2 style={{\n              fontSize: '24px',\n              fontWeight: 'bold',\n              color: '#111827',\n              margin: 0\n            }}>Novo Ticket</h2>\n            <p style={{\n              fontSize: '14px',\n              color: '#6b7280',\n              margin: '4px 0 0 0'\n            }}>Preencha os campos abaixo para criar seu ticket</p>\n          </div>\n          <button\n            onClick={onClose}\n            style={{\n              padding: '8px',\n              borderRadius: '50%',\n              border: 'none',\n              backgroundColor: 'transparent',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}\n          >\n            <X style={{ width: '20px', height: '20px', color: '#6b7280' }} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div style={{ overflowY: 'auto', maxHeight: 'calc(90vh - 120px)' }}>\n          <form onSubmit={handleSubmit} style={{ padding: '24px' }}>\n            {/* Grid de campos principais */}\n            <div style={{ \n              display: 'grid', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n              gap: '20px',\n              marginBottom: '24px'\n            }}>\n              {/* Assunto */}\n              <div style={{ gridColumn: 'span 2' }}>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  Assunto <span style={{ color: '#ef4444' }}>*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.subject}\n                  onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none'\n                  }}\n                  required\n                />\n              </div>\n\n              {/* Nome do Solicitante */}\n              <div>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  Nome Completo <span style={{ color: '#ef4444' }}>*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.requesterName}\n                  readOnly\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    backgroundColor: '#f9fafb',\n                    color: '#6b7280',\n                    cursor: 'not-allowed'\n                  }}\n                  required\n                />\n              </div>\n\n              {/* Email */}\n              <div>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  E-mail <span style={{ color: '#ef4444' }}>*</span>\n                </label>\n                <input\n                  type=\"email\"\n                  value={formData.requesterEmail}\n                  readOnly\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    backgroundColor: '#f9fafb',\n                    color: '#6b7280',\n                    cursor: 'not-allowed'\n                  }}\n                  required\n                />\n              </div>\n\n              {/* Telefone */}\n              <div>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  Telefone\n                </label>\n                <input\n                  type=\"tel\"\n                  value={formData.requesterPhone}\n                  onChange={(e) => setFormData(prev => ({ ...prev, requesterPhone: e.target.value }))}\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none'\n                  }}\n                />\n              </div>\n\n              {/* Departamento Solicitante */}\n              <div>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  Departamento Solicitante <span style={{ color: '#ef4444' }}>*</span>\n                  <span style={{ \n                    fontSize: '12px', \n                    color: '#6b7280', \n                    fontWeight: 'normal',\n                    display: 'block'\n                  }}>\n                    (Seu departamento)\n                  </span>\n                </label>\n                <select\n                  value={formData.requesterDepartment}\n                  readOnly\n                  disabled\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    backgroundColor: '#f9fafb',\n                    color: '#6b7280',\n                    cursor: 'not-allowed'\n                  }}\n                  required\n                >\n                  <option value=\"\">Carregando...</option>\n                  {departments.map((dept) => (\n                    <option key={dept.id} value={dept.id}>\n                      {dept.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              {/* Departamento Responsável */}\n              <div>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  Departamento Responsável <span style={{ color: '#ef4444' }}>*</span>\n                  <span style={{ \n                    fontSize: '12px', \n                    color: '#6b7280', \n                    fontWeight: 'normal',\n                    display: 'block'\n                  }}>\n                    (Qual departamento deve atender este ticket)\n                  </span>\n                </label>\n                <select\n                  value={formData.responsibleDepartment}\n                  onChange={(e) => handleDepartmentChange(e.target.value)}\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    backgroundColor: 'white'\n                  }}\n                  required\n                >\n                  <option value=\"\">Selecione o departamento que deve atender</option>\n                  {departments.map((dept) => (\n                    <option key={dept.id} value={dept.id}>\n                      {dept.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              {/* Categoria */}\n              {formData.responsibleDepartment && (\n                <div>\n                  <label style={{\n                    display: 'block',\n                    fontSize: '14px',\n                    fontWeight: '500',\n                    color: '#374151',\n                    marginBottom: '6px'\n                  }}>\n                    Categoria <span style={{ color: '#ef4444' }}>*</span>\n                  </label>\n                  <select\n                    value={formData.category}\n                    onChange={(e) => handleCategoryChange(e.target.value)}\n                    style={{\n                      width: '100%',\n                      padding: '10px 12px',\n                      border: '1px solid #d1d5db',\n                      borderRadius: '8px',\n                      fontSize: '14px',\n                      outline: 'none',\n                      backgroundColor: 'white'\n                    }}\n                    required\n                  >\n                    <option value=\"\">Selecione a categoria</option>\n                    {categories.map((category) => (\n                      <option key={category.id} value={category.id}>\n                        {category.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              )}\n\n              {/* Prioridade */}\n              <div>\n                <label style={{\n                  display: 'block',\n                  fontSize: '14px',\n                  fontWeight: '500',\n                  color: '#374151',\n                  marginBottom: '6px'\n                }}>\n                  Prioridade <span style={{ color: '#ef4444' }}>*</span>\n                </label>\n                <select\n                  value={formData.priority}\n                  onChange={(e) => setFormData(prev => ({ ...prev, priority: e.target.value }))}\n                  style={{\n                    width: '100%',\n                    padding: '10px 12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '14px',\n                    outline: 'none',\n                    backgroundColor: 'white'\n                  }}\n                  required\n                >\n                  <option value=\"Baixa\">Baixa</option>\n                  <option value=\"Média\">Média</option>\n                  <option value=\"Alta\">Alta</option>\n                  <option value=\"Crítica\">Crítica</option>\n                </select>\n              </div>\n            </div>\n\n            {/* Campos Customizados por Categoria */}\n            {selectedCategoryId && customFields && customFields.length > 0 && (\n              <div style={{ marginBottom: '24px' }}>\n                <h3 style={{ \n                  fontSize: '16px', \n                  fontWeight: '600', \n                  color: '#374151',\n                  marginBottom: '16px',\n                  borderBottom: '2px solid #e5e7eb',\n                  paddingBottom: '8px'\n                }}>\n                  Informações Específicas\n                </h3>\n                <div style={{ \n                  display: 'grid', \n                  gap: '16px'\n                }}>\n                  {customFields\n                    .sort((a, b) => a.order - b.order)\n                    .map((field) => (\n                      <div key={field.id}>\n                        <label style={{\n                          display: 'block',\n                          fontSize: '14px',\n                          fontWeight: '500',\n                          color: '#374151',\n                          marginBottom: '6px'\n                        }}>\n                          {field.name} {field.required && <span style={{ color: '#ef4444' }}>*</span>}\n                        </label>\n                        {field.type === 'text' && (\n                          <input\n                            type=\"text\"\n                            value={formData.customFields[field.id] || ''}\n                            onChange={(e) => handleCustomFieldChange(field.id, e.target.value)}\n                            placeholder={field.placeholder || `Digite ${field.name.toLowerCase()}`}\n                            style={{\n                              width: '100%',\n                              padding: '10px 12px',\n                              border: '1px solid #d1d5db',\n                              borderRadius: '8px',\n                              fontSize: '14px'\n                            }}\n                            required={field.required}\n                          />\n                        )}\n                        {field.type === 'textarea' && (\n                          <textarea\n                            value={formData.customFields[field.id] || ''}\n                            onChange={(e) => handleCustomFieldChange(field.id, e.target.value)}\n                            placeholder={field.placeholder || `Digite ${field.name.toLowerCase()}`}\n                            style={{\n                              width: '100%',\n                              padding: '10px 12px',\n                              border: '1px solid #d1d5db',\n                              borderRadius: '8px',\n                              fontSize: '14px',\n                              minHeight: '80px',\n                              resize: 'vertical'\n                            }}\n                            required={field.required}\n                          />\n                        )}\n                        {field.type === 'select' && field.options && (\n                          <select \n                            value={formData.customFields[field.id] || ''}\n                            onChange={(e) => handleCustomFieldChange(field.id, e.target.value)}\n                            style={{\n                              width: '100%',\n                              padding: '10px 12px',\n                              border: '1px solid #d1d5db',\n                              borderRadius: '8px',\n                              fontSize: '14px',\n                              backgroundColor: 'white'\n                            }}\n                            required={field.required}\n                          >\n                            <option value=\"\">{field.placeholder || `Selecione ${field.name.toLowerCase()}`}</option>\n                            {field.options.map((option, idx) => (\n                              <option key={idx} value={option}>{option}</option>\n                            ))}\n                          </select>\n                        )}\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n\n            {/* Campos dinâmicos baseados na categoria - Sistema Antigo */}\n            {selectedCategory && selectedCategory.customFields && selectedCategory.customFields.length > 0 && (\n              <div style={{ marginBottom: '24px' }}>\n                <h3 style={{ \n                  fontSize: '16px', \n                  fontWeight: '600', \n                  color: '#374151',\n                  marginBottom: '16px',\n                  borderBottom: '2px solid #e5e7eb',\n                  paddingBottom: '8px'\n                }}>\n                  Informações Específicas\n                </h3>\n                <div style={{ \n                  display: 'grid', \n                  gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n                  gap: '20px'\n                }}>\n                  {selectedCategory.customFields.map((field) => (\n                    <div key={field.id}>\n                      <label style={{\n                        display: 'block',\n                        fontSize: '14px',\n                        fontWeight: '500',\n                        color: '#374151',\n                        marginBottom: '6px'\n                      }}>\n                        {field.name} {field.required && <span style={{ color: '#ef4444' }}>*</span>}\n                      </label>\n                      {field.type === 'select' && field.options ? (\n                        <select\n                          value={formData.customFields[field.id] || ''}\n                          onChange={(e) => handleCustomFieldChange(field.id, e.target.value)}\n                          style={{\n                            width: '100%',\n                            padding: '10px 12px',\n                            border: '1px solid #d1d5db',\n                            borderRadius: '8px',\n                            fontSize: '14px',\n                            outline: 'none',\n                            backgroundColor: 'white'\n                          }}\n                          required={field.required}\n                        >\n                          <option value=\"\">Selecione...</option>\n                          {field.options.map((option) => (\n                            <option key={option} value={option}>\n                              {option}\n                            </option>\n                          ))}\n                        </select>\n                      ) : field.type === 'textarea' ? (\n                        <textarea\n                          value={formData.customFields[field.id] || ''}\n                          onChange={(e) => handleCustomFieldChange(field.id, e.target.value)}\n                          style={{\n                            width: '100%',\n                            padding: '10px 12px',\n                            border: '1px solid #d1d5db',\n                            borderRadius: '8px',\n                            fontSize: '14px',\n                            outline: 'none',\n                            minHeight: '80px',\n                            resize: 'vertical'\n                          }}\n                          required={field.required}\n                        />\n                      ) : (\n                        <input\n                          type={field.type}\n                          value={formData.customFields[field.id] || ''}\n                          onChange={(e) => handleCustomFieldChange(field.id, e.target.value)}\n                          style={{\n                            width: '100%',\n                            padding: '10px 12px',\n                            border: '1px solid #d1d5db',\n                            borderRadius: '8px',\n                            fontSize: '14px',\n                            outline: 'none'\n                          }}\n                          required={field.required}\n                        />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Descrição */}\n            <div style={{ marginBottom: '24px' }}>\n              <label style={{\n                display: 'block',\n                fontSize: '14px',\n                fontWeight: '500',\n                color: '#374151',\n                marginBottom: '6px'\n              }}>\n                Descrição <span style={{ color: '#ef4444' }}>*</span>\n              </label>\n              <textarea\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                style={{\n                  width: '100%',\n                  padding: '12px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '14px',\n                  outline: 'none',\n                  minHeight: '100px',\n                  resize: 'vertical'\n                }}\n                placeholder=\"Descreva detalhadamente o problema ou solicitação...\"\n                required\n              />\n            </div>\n\n            {/* Anexos */}\n            <div style={{ marginBottom: '24px' }}>\n              <label style={{\n                display: 'block',\n                fontSize: '14px',\n                fontWeight: '500',\n                color: '#374151',\n                marginBottom: '6px'\n              }}>\n                Anexos\n              </label>\n              \n              {/* Área de upload */}\n              <div style={{\n                border: '2px dashed #d1d5db',\n                borderRadius: '8px',\n                padding: '20px',\n                textAlign: 'center',\n                backgroundColor: '#f9fafb',\n                marginBottom: '12px'\n              }}>\n                <input\n                  type=\"file\"\n                  multiple\n                  onChange={handleFileChange}\n                  style={{ display: 'none' }}\n                  id=\"file-upload\"\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt,.xlsx,.xls\"\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  style={{\n                    cursor: 'pointer',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    gap: '8px'\n                  }}\n                >\n                  <Upload style={{ width: '24px', height: '24px', color: '#6b7280' }} />\n                  <span style={{ fontSize: '14px', color: '#6b7280' }}>\n                    Clique para selecionar arquivos ou arraste aqui\n                  </span>\n                  <span style={{ fontSize: '12px', color: '#9ca3af' }}>\n                    PDF, DOC, DOCX, JPG, PNG, TXT, XLS, XLSX (máx. 10MB cada)\n                  </span>\n                </label>\n              </div>\n\n              {/* Lista de arquivos selecionados */}\n              {formData.attachments.length > 0 && (\n                <div style={{ marginTop: '12px' }}>\n                  <p style={{ \n                    fontSize: '12px', \n                    color: '#6b7280', \n                    marginBottom: '8px' \n                  }}>\n                    Arquivos selecionados:\n                  </p>\n                  {formData.attachments.map((file, index) => (\n                    <div\n                      key={index}\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        padding: '8px 12px',\n                        backgroundColor: '#f3f4f6',\n                        borderRadius: '6px',\n                        marginBottom: '6px'\n                      }}\n                    >\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                        <Paperclip style={{ width: '14px', height: '14px', color: '#6b7280' }} />\n                        <span style={{ fontSize: '14px', color: '#374151' }}>\n                          {file.name}\n                        </span>\n                        <span style={{ fontSize: '12px', color: '#9ca3af' }}>\n                          ({(file.size / 1024 / 1024).toFixed(2)} MB)\n                        </span>\n                      </div>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeFile(index)}\n                        style={{\n                          padding: '4px',\n                          backgroundColor: 'transparent',\n                          border: 'none',\n                          cursor: 'pointer',\n                          borderRadius: '4px',\n                          color: '#ef4444'\n                        }}\n                      >\n                        <X style={{ width: '14px', height: '14px' }} />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Botões */}\n            <div style={{ \n              display: 'flex', \n              gap: '12px', \n              justifyContent: 'flex-end',\n              borderTop: '1px solid #e5e7eb',\n              paddingTop: '20px'\n            }}>\n              <button\n                type=\"button\"\n                onClick={onClose}\n                style={{\n                  padding: '12px 24px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  backgroundColor: 'white',\n                  color: '#374151',\n                  cursor: 'pointer',\n                  fontSize: '14px',\n                  fontWeight: '500'\n                }}\n              >\n                Cancelar\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                style={{\n                  padding: '12px 24px',\n                  border: 'none',\n                  borderRadius: '8px',\n                  backgroundColor: isSubmitting ? '#9ca3af' : '#3b82f6',\n                  color: 'white',\n                  cursor: isSubmitting ? 'not-allowed' : 'pointer',\n                  fontSize: '14px',\n                  fontWeight: '500'\n                }}\n              >\n                {isSubmitting ? 'Criando...' : 'Criar Ticket'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":32245},"client/src/components/TestModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface TestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function TestModal({ isOpen, onClose }: TestModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>TESTE - Modal Funcionando</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 p-4\">\n          <div className=\"border rounded-lg p-4 bg-gray-50\">\n            <h3 className=\"font-medium mb-3\">Categorização</h3>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Departamento *</label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione o departamento\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"ti\">TI</SelectItem>\n                    <SelectItem value=\"rh\">RH</SelectItem>\n                    <SelectItem value=\"financeiro\">Financeiro</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Categoria *</label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione a categoria\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cat1\">Categoria 1</SelectItem>\n                    <SelectItem value=\"cat2\">Categoria 2</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n          \n          <Button onClick={onClose} className=\"w-full\">\n            Fechar Teste\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2169},"client/src/pages/Approvals.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { \n  CheckCircle, \n  XCircle, \n  Clock, \n  Search, \n  Filter, \n  User, \n  Calendar,\n  AlertTriangle,\n  Eye,\n  FileText,\n  Users\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface Approval {\n  id: string;\n  title: string;\n  type: 'ticket_creation' | 'status_change' | 'assignment' | 'closure';\n  requestedBy: string;\n  requestedDate: Date;\n  status: 'pending' | 'approved' | 'rejected';\n  priority: 'Alta' | 'Média' | 'Baixa';\n  description: string;\n  relatedTicket?: string;\n  department: string;\n}\n\nexport default function Approvals() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n\n  const [approvals] = useState<Approval[]>([\n    {\n      id: '1',\n      title: 'Aprovação para fechamento de ticket crítico',\n      type: 'closure',\n      requestedBy: 'João Silva',\n      requestedDate: new Date('2024-12-17T09:30:00'),\n      status: 'pending',\n      priority: 'Alta',\n      description: 'Solicitação de aprovação para fechamento do ticket TK-2024-001 relacionado à falha no sistema de pagamentos.',\n      relatedTicket: 'TK-2024-001',\n      department: 'TI'\n    },\n    {\n      id: '2',\n      title: 'Criação de ticket para nova funcionalidade',\n      type: 'ticket_creation',\n      requestedBy: 'Maria Santos',\n      requestedDate: new Date('2024-12-17T14:15:00'),\n      status: 'pending',\n      priority: 'Média',\n      description: 'Aprovação necessária para criar ticket de desenvolvimento de nova funcionalidade no portal do cliente.',\n      department: 'Produto'\n    },\n    {\n      id: '3',\n      title: 'Alteração de status para produção',\n      type: 'status_change',\n      requestedBy: 'Pedro Costa',\n      requestedDate: new Date('2024-12-16T16:45:00'),\n      status: 'approved',\n      priority: 'Alta',\n      description: 'Aprovação para mudança de status do ticket TK-2024-015 para produção.',\n      relatedTicket: 'TK-2024-015',\n      department: 'DevOps'\n    },\n    {\n      id: '4',\n      title: 'Reatribuição de ticket especializado',\n      type: 'assignment',\n      requestedBy: 'Ana Oliveira',\n      requestedDate: new Date('2024-12-16T11:20:00'),\n      status: 'rejected',\n      priority: 'Baixa',\n      description: 'Solicitação de reatribuição do ticket TK-2024-008 para equipe especializada.',\n      relatedTicket: 'TK-2024-008',\n      department: 'Suporte'\n    }\n  ]);\n\n  const filteredApprovals = approvals.filter(approval => {\n    const matchesSearch = approval.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         approval.requestedBy.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (approval.relatedTicket && approval.relatedTicket.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesStatus = statusFilter === 'all' || approval.status === statusFilter;\n    const matchesType = typeFilter === 'all' || approval.type === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'approved': return 'bg-green-100 text-green-800 border-green-200';\n      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'Alta': return 'bg-red-100 text-red-800 border-red-200';\n      case 'Média': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Baixa': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'ticket_creation': return 'Criação de Ticket';\n      case 'status_change': return 'Mudança de Status';\n      case 'assignment': return 'Reatribuição';\n      case 'closure': return 'Fechamento';\n      default: return type;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'pending': return 'Pendente';\n      case 'approved': return 'Aprovado';\n      case 'rejected': return 'Rejeitado';\n      default: return status;\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'ticket_creation': return <FileText className=\"w-4 h-4\" />;\n      case 'status_change': return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'assignment': return <Users className=\"w-4 h-4\" />;\n      case 'closure': return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleApprove = (id: string) => {\n    // Implementar lógica de aprovação\n    console.log('Aprovar:', id);\n  };\n\n  const handleReject = (id: string) => {\n    // Implementar lógica de rejeição\n    console.log('Rejeitar:', id);\n  };\n\n  const stats = {\n    total: approvals.length,\n    pending: approvals.filter(a => a.status === 'pending').length,\n    approved: approvals.filter(a => a.status === 'approved').length,\n    rejected: approvals.filter(a => a.status === 'rejected').length\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Central de Aprovações</h1>\n        <p className=\"text-gray-600\">Gerencie solicitações de aprovação do sistema</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.total}</p>\n              </div>\n              <div className=\"p-3 bg-blue-100 rounded-full\">\n                <FileText className=\"w-6 h-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{stats.pending}</p>\n              </div>\n              <div className=\"p-3 bg-yellow-100 rounded-full\">\n                <Clock className=\"w-6 h-6 text-yellow-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Aprovadas</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.approved}</p>\n              </div>\n              <div className=\"p-3 bg-green-100 rounded-full\">\n                <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Rejeitadas</p>\n                <p className=\"text-2xl font-bold text-red-600\">{stats.rejected}</p>\n              </div>\n              <div className=\"p-3 bg-red-100 rounded-full\">\n                <XCircle className=\"w-6 h-6 text-red-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input \n                placeholder=\"Buscar aprovações...\" \n                className=\"pl-10\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os Status</SelectItem>\n                <SelectItem value=\"pending\">Pendente</SelectItem>\n                <SelectItem value=\"approved\">Aprovado</SelectItem>\n                <SelectItem value=\"rejected\">Rejeitado</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Tipo\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os Tipos</SelectItem>\n                <SelectItem value=\"ticket_creation\">Criação de Ticket</SelectItem>\n                <SelectItem value=\"status_change\">Mudança de Status</SelectItem>\n                <SelectItem value=\"assignment\">Reatribuição</SelectItem>\n                <SelectItem value=\"closure\">Fechamento</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Approvals Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Solicitações de Aprovação ({filteredApprovals.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Tipo</TableHead>\n                <TableHead>Título</TableHead>\n                <TableHead>Solicitante</TableHead>\n                <TableHead>Data</TableHead>\n                <TableHead>Prioridade</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredApprovals.map((approval) => (\n                <TableRow key={approval.id} className=\"hover:bg-gray-50\">\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getTypeIcon(approval.type)}\n                      <span className=\"text-sm\">{getTypeLabel(approval.type)}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium text-sm\">{approval.title}</p>\n                      {approval.relatedTicket && (\n                        <p className=\"text-xs text-gray-500\">Ticket: {approval.relatedTicket}</p>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarFallback className=\"text-xs bg-blue-100 text-blue-600\">\n                          {approval.requestedBy.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm\">{approval.requestedBy}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm\">\n                    {format(approval.requestedDate, \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className={`${getPriorityColor(approval.priority)}`}>\n                      {approval.priority}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className={`${getStatusColor(approval.status)}`}>\n                      {getStatusLabel(approval.status)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button variant=\"ghost\" size=\"icon\" className=\"w-8 h-8\">\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      {approval.status === 'pending' && (\n                        <>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            className=\"w-8 h-8 text-green-600 hover:text-green-700\"\n                            onClick={() => handleApprove(approval.id)}\n                          >\n                            <CheckCircle className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            className=\"w-8 h-8 text-red-600 hover:text-red-700\"\n                            onClick={() => handleReject(approval.id)}\n                          >\n                            <XCircle className=\"w-4 h-4\" />\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n\n          {filteredApprovals.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Clock className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Nenhuma aprovação encontrada</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                {searchTerm || statusFilter !== 'all' || typeFilter !== 'all' \n                  ? 'Tente ajustar os filtros para ver mais resultados.'\n                  : 'Não há solicitações de aprovação no momento.'\n                }\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14864},"client/src/pages/CreateTicket.tsx":{"content":"import React, { useState } from 'react';\nimport RequesterInfoSection from '@/components/tickets/RequesterInfoSection';\nimport CategorizationSection from '@/components/tickets/CategorizationSection';\nimport DescriptionEditor from '@/components/tickets/DescriptionEditor';\nimport FileAttachmentZone from '@/components/tickets/FileAttachmentZone';\nimport AssignmentControls from '@/components/tickets/AssignmentControls';\nimport FormActions from '@/components/tickets/FormActions';\nimport Icon from '@/components/AppIcon';\n\nexport default function CreateTicket() {\n  const [formData, setFormData] = useState({\n    requesterName: '',\n    requesterEmail: '',\n    requesterPhone: '',\n    requesterExtension: '',\n    client: '',\n    unit: '',\n    department: '',\n    category: '',\n    subject: '',\n    ticketType: '',\n    priority: '',\n    description: '',\n    attachments: [],\n    serviceDesk: '',\n    assignedOperator: '',\n    autoAssign: false,\n    emailNotification: true,\n    customSla: '',\n    routingRule: '',\n    bulkCreation: false,\n    skipValidations: false,\n    internalTicket: false\n  });\n\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isDraftSaving, setIsDraftSaving] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  // Mock data\n  const clients = [\n    { id: '1', name: 'Empresa ABC Ltda', document: 'CNPJ: 12.345.678/0001-90' },\n    { id: '2', name: 'Corporação XYZ S.A.', document: 'CNPJ: 98.765.432/0001-10' }\n  ];\n\n  const units = [\n    { id: '1', clientId: '1', name: 'Matriz São Paulo', address: 'Av. Paulista, 1000' },\n    { id: '2', clientId: '1', name: 'Filial Rio de Janeiro', address: 'Rua Copacabana, 500' },\n    { id: '3', clientId: '2', name: 'Sede Brasília', address: 'SCS Quadra 1, Bloco A' }\n  ];\n\n  const departments = [\n    { id: '1', unitId: '1', name: 'Tecnologia da Informação', description: 'Suporte técnico e infraestrutura' },\n    { id: '2', unitId: '1', name: 'Recursos Humanos', description: 'Gestão de pessoas e processos' },\n    { id: '3', unitId: '2', name: 'Comercial', description: 'Vendas e relacionamento' }\n  ];\n\n  const categories = [\n    { id: '1', name: 'Hardware', description: 'Problemas com equipamentos físicos' },\n    { id: '2', name: 'Software', description: 'Aplicações e sistemas' },\n    { id: '3', name: 'Rede', description: 'Conectividade e infraestrutura' }\n  ];\n\n  const subjects = [\n    { id: '1', categoryId: '1', name: 'Computador não liga', description: 'Problemas de inicialização' },\n    { id: '2', categoryId: '1', name: 'Monitor sem imagem', description: 'Problemas de vídeo' },\n    { id: '3', categoryId: '2', name: 'Erro no sistema', description: 'Falhas de aplicação' }\n  ];\n\n  const ticketTypes = [\n    { id: '1', name: 'Incidente', description: 'Problema que afeta o serviço' },\n    { id: '2', name: 'Solicitação', description: 'Pedido de serviço ou informação' },\n    { id: '3', name: 'Mudança', description: 'Alteração em sistemas ou processos' }\n  ];\n\n  const priorities = [\n    { id: '1', name: 'Baixa', level: 'low', description: 'Sem impacto significativo', slaInfo: 'SLA: 24 horas' },\n    { id: '2', name: 'Média', level: 'medium', description: 'Impacto moderado', slaInfo: 'SLA: 8 horas' },\n    { id: '3', name: 'Alta', level: 'high', description: 'Impacto alto', slaInfo: 'SLA: 4 horas' },\n    { id: '4', name: 'Crítica', level: 'critical', description: 'Impacto crítico', slaInfo: 'SLA: 1 hora' }\n  ];\n\n  const operators = [\n    { \n      id: '1', \n      name: 'João Silva', \n      department: 'TI', \n      specialties: ['Hardware', 'Rede'], \n      currentTickets: 5,\n      status: 'online',\n      serviceDeskId: '1'\n    },\n    { \n      id: '2', \n      name: 'Maria Santos', \n      department: 'Suporte', \n      specialties: ['Software', 'Aplicações'], \n      currentTickets: 3,\n      status: 'busy',\n      serviceDeskId: '1'\n    }\n  ];\n\n  const serviceDesks = [\n    { id: '1', name: 'Suporte Técnico', activeOperators: 8, defaultSla: 4 },\n    { id: '2', name: 'Help Desk', activeOperators: 12, defaultSla: 2 }\n  ];\n\n  const templates = [\n    { \n      id: '1', \n      name: 'Problema de Login', \n      description: 'Template para problemas de acesso ao sistema',\n      content: 'Não consigo fazer login no sistema.\\n\\nInformações:\\n• Sistema: \\n• Mensagem de erro: \\n• Horário do problema: '\n    },\n    { \n      id: '2', \n      name: 'Solicitação de Acesso', \n      description: 'Template para pedidos de acesso',\n      content: 'Solicito acesso ao seguinte sistema/recurso:\\n\\nDetalhes:\\n• Sistema/Recurso: \\n• Justificativa: \\n• Prazo necessário: '\n    }\n  ];\n\n  const handleFormChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    setHasUnsavedChanges(true);\n  };\n\n  const validateForm = () => {\n    const newErrors: any = {};\n    \n    if (!formData.requesterName) newErrors.requesterName = 'Nome é obrigatório';\n    if (!formData.requesterEmail) newErrors.requesterEmail = 'Email é obrigatório';\n    if (!formData.client) newErrors.client = 'Cliente é obrigatório';\n    if (!formData.unit) newErrors.unit = 'Unidade é obrigatória';\n    if (!formData.department) newErrors.department = 'Departamento é obrigatório';\n    if (!formData.category) newErrors.category = 'Categoria é obrigatória';\n    if (!formData.subject) newErrors.subject = 'Assunto é obrigatório';\n    if (!formData.ticketType) newErrors.ticketType = 'Tipo é obrigatório';\n    if (!formData.priority) newErrors.priority = 'Prioridade é obrigatória';\n    if (!formData.description?.trim()) newErrors.description = 'Descrição é obrigatória';\n    if (!formData.serviceDesk) newErrors.serviceDesk = 'Mesa de atendimento é obrigatória';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n    try {\n      // Simular criação do ticket\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log('Ticket criado:', formData);\n      \n      // Reset form após sucesso\n      setFormData({\n        requesterName: '',\n        requesterEmail: '',\n        requesterPhone: '',\n        requesterExtension: '',\n        client: '',\n        unit: '',\n        department: '',\n        category: '',\n        subject: '',\n        ticketType: '',\n        priority: '',\n        description: '',\n        attachments: [],\n        serviceDesk: '',\n        assignedOperator: '',\n        autoAssign: false,\n        emailNotification: true,\n        customSla: '',\n        routingRule: '',\n        bulkCreation: false,\n        skipValidations: false,\n        internalTicket: false\n      });\n      setHasUnsavedChanges(false);\n      setErrors({});\n      \n      alert('Ticket criado com sucesso!');\n    } catch (error) {\n      console.error('Erro ao criar ticket:', error);\n      alert('Erro ao criar ticket. Tente novamente.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSaveDraft = async () => {\n    setIsDraftSaving(true);\n    try {\n      // Simular salvamento do rascunho\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('Rascunho salvo:', formData);\n      setHasUnsavedChanges(false);\n      alert('Rascunho salvo com sucesso!');\n    } catch (error) {\n      console.error('Erro ao salvar rascunho:', error);\n    } finally {\n      setIsDraftSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    if (hasUnsavedChanges) {\n      if (window.confirm('Você tem alterações não salvas. Deseja realmente cancelar?')) {\n        // Navegar para lista de tickets ou dashboard\n        window.history.back();\n      }\n    } else {\n      window.history.back();\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n          Criar Novo Chamado\n        </h1>\n        <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n          Preencha todas as informações para criar um novo ticket de suporte\n        </p>\n      </div>\n\n      {/* Progress Indicator */}\n      <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Icon name=\"FileText\" size={20} className=\"text-blue-600 dark:text-blue-400\" />\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n              <span>Progresso do formulário:</span>\n              <span className=\"font-medium\">\n                {Math.round((Object.values(formData).filter(v => v && v !== '').length / Object.keys(formData).length) * 100)}% preenchido\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <form className=\"space-y-6\">\n        {/* Requester Information */}\n        <RequesterInfoSection\n          formData={formData}\n          onFormChange={handleFormChange}\n          errors={errors}\n          clients={clients}\n          units={units}\n          departments={departments}\n          isLoadingClients={false}\n        />\n\n        {/* Categorization */}\n        <CategorizationSection\n          formData={formData}\n          onFormChange={handleFormChange}\n          errors={errors}\n          categories={categories}\n          subjects={subjects}\n          ticketTypes={ticketTypes}\n          priorities={priorities}\n        />\n\n        {/* Description */}\n        <DescriptionEditor\n          formData={formData}\n          onFormChange={handleFormChange}\n          errors={errors}\n          templates={templates}\n        />\n\n        {/* File Attachments */}\n        <FileAttachmentZone\n          formData={formData}\n          onFormChange={handleFormChange}\n          errors={errors}\n        />\n\n        {/* Assignment Controls */}\n        <AssignmentControls\n          formData={formData}\n          onFormChange={handleFormChange}\n          errors={errors}\n          operators={operators}\n          serviceDesks={serviceDesks}\n          userRole=\"admin\"\n        />\n\n        {/* Form Actions */}\n        <FormActions\n          onSubmit={handleSubmit}\n          onSaveDraft={handleSaveDraft}\n          onCancel={handleCancel}\n          isSubmitting={isSubmitting}\n          isDraftSaving={isDraftSaving}\n          formData={formData}\n          hasUnsavedChanges={hasUnsavedChanges}\n        />\n      </form>\n    </div>\n  );\n}","size_bytes":10601},"client/src/pages/CustomFields.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit2, Trash2, GripVertical } from 'lucide-react';\n\ninterface CustomField {\n  id: string;\n  name: string;\n  type: 'texto' | 'lista' | 'data' | 'checkbox' | 'numero' | 'email' | 'telefone';\n  display: boolean;\n  visualize: boolean;\n  required: boolean;\n  defaultValue?: string;\n  options?: string[];\n  order: number;\n}\n\nexport default function CustomFields() {\n  const [fields, setFields] = useState<CustomField[]>([\n    {\n      id: '1',\n      name: 'Assunto',\n      type: 'texto',\n      display: true,\n      visualize: true,\n      required: true,\n      defaultValue: '',\n      order: 1\n    },\n    {\n      id: '2',\n      name: 'Descrição',\n      type: 'texto',\n      display: true,\n      visualize: true,\n      required: true,\n      defaultValue: '',\n      order: 2\n    },\n    {\n      id: '3',\n      name: 'Anexo',\n      type: 'texto',\n      display: true,\n      visualize: false,\n      required: false,\n      defaultValue: '',\n      order: 3\n    },\n    {\n      id: '4',\n      name: 'Contato',\n      type: 'texto',\n      display: true,\n      visualize: true,\n      required: true,\n      defaultValue: '',\n      order: 4\n    },\n    {\n      id: '5',\n      name: 'Contato Email',\n      type: 'email',\n      display: true,\n      visualize: true,\n      required: true,\n      defaultValue: '',\n      order: 5\n    },\n    {\n      id: '6',\n      name: 'Contato Telefone',\n      type: 'telefone',\n      display: true,\n      visualize: false,\n      required: false,\n      defaultValue: '',\n      order: 6\n    },\n    {\n      id: '7',\n      name: 'Dispositivo',\n      type: 'lista',\n      display: true,\n      visualize: false,\n      required: false,\n      defaultValue: 'Selecione uma opção',\n      options: ['Desktop', 'Laptop', 'Tablet', 'Smartphone'],\n      order: 7\n    }\n  ]);\n\n  const [selectedField, setSelectedField] = useState<CustomField | null>(null);\n  const [isCreateMode, setIsCreateMode] = useState(false);\n\n  const getFieldTypeIcon = (type: string) => {\n    switch (type) {\n      case 'texto': return '📝';\n      case 'lista': return '📋';\n      case 'data': return '📅';\n      case 'checkbox': return '☑️';\n      case 'numero': return '🔢';\n      case 'email': return '📧';\n      case 'telefone': return '📞';\n      default: return '📝';\n    }\n  };\n\n  const getStatusIcon = (enabled: boolean) => {\n    return enabled ? '✓' : '○';\n  };\n\n  const getStatusColor = (enabled: boolean) => {\n    return enabled ? 'text-green-600' : 'text-gray-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Configuração de campos</h1>\n          <p className=\"text-gray-600 mt-1\">Configure os campos customizáveis dos formulários</p>\n        </div>\n        <Button \n          onClick={() => setIsCreateMode(true)}\n          className=\"bg-green-600 hover:bg-green-700 text-white\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Adicionar campo customizável\n        </Button>\n      </div>\n\n      {/* Fields Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Campos Disponíveis</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Campo</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Disponível</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Visualizar</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Obrigatório</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Default</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Ações</th>\n                </tr>\n              </thead>\n              <tbody>\n                {fields\n                  .sort((a, b) => a.order - b.order)\n                  .map((field) => (\n                  <tr key={field.id} className=\"border-b border-gray-200 hover:bg-gray-50\">\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <GripVertical className=\"w-4 h-4 text-gray-400 cursor-move\" />\n                        <span className=\"text-lg\">{getFieldTypeIcon(field.type)}</span>\n                        <div>\n                          <div className=\"font-medium text-gray-900\">{field.name}</div>\n                          <div className=\"text-sm text-gray-500 capitalize\">{field.type}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className={`w-6 h-6 rounded-full mx-auto flex items-center justify-center text-sm font-bold ${\n                        field.display ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'\n                      }`}>\n                        {getStatusIcon(field.display)}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className={`w-6 h-6 rounded-full mx-auto flex items-center justify-center text-sm font-bold ${\n                        field.visualize ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'\n                      }`}>\n                        {getStatusIcon(field.visualize)}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className={`w-6 h-6 rounded-full mx-auto flex items-center justify-center text-sm font-bold ${\n                        field.required ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'\n                      }`}>\n                        {getStatusIcon(field.required)}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 text-center text-sm text-gray-600\">\n                      {field.defaultValue || '---'}\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center justify-center space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedField(field)}\n                          className=\"w-8 h-8 p-0 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                          title=\"Editar\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-8 h-8 p-0 text-red-600 hover:text-red-800 hover:bg-red-50\"\n                          title=\"Excluir\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Field Edit Modal */}\n      {(selectedField || isCreateMode) && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">\n                {isCreateMode ? 'Novo Campo' : 'Editar Campo'}\n              </h2>\n              <Button\n                variant=\"ghost\"\n                onClick={() => {\n                  setSelectedField(null);\n                  setIsCreateMode(false);\n                }}\n              >\n                ×\n              </Button>\n            </div>\n\n            <form className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome do Campo</Label>\n                <Input\n                  id=\"name\"\n                  defaultValue={selectedField?.name || ''}\n                  placeholder=\"Digite o nome do campo\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"type\">Tipo do Campo</Label>\n                <Select defaultValue={selectedField?.type || 'texto'}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecionar tipo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"texto\">📝 Texto</SelectItem>\n                    <SelectItem value=\"lista\">📋 Lista de Seleção</SelectItem>\n                    <SelectItem value=\"data\">📅 Data</SelectItem>\n                    <SelectItem value=\"checkbox\">☑️ Checkbox</SelectItem>\n                    <SelectItem value=\"numero\">🔢 Número</SelectItem>\n                    <SelectItem value=\"email\">📧 Email</SelectItem>\n                    <SelectItem value=\"telefone\">📞 Telefone</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"defaultValue\">Valor Padrão</Label>\n                <Input\n                  id=\"defaultValue\"\n                  defaultValue={selectedField?.defaultValue || ''}\n                  placeholder=\"Digite o valor padrão (opcional)\"\n                />\n              </div>\n\n              {(selectedField?.type === 'lista' || (!selectedField && isCreateMode)) && (\n                <div>\n                  <Label htmlFor=\"options\">Opções (para lista de seleção)</Label>\n                  <Input\n                    id=\"options\"\n                    defaultValue={selectedField?.options?.join(', ') || ''}\n                    placeholder=\"Digite as opções separadas por vírgula\"\n                  />\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"display\"\n                    defaultChecked={selectedField?.display !== false}\n                  />\n                  <Label htmlFor=\"display\">Disponível</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"visualize\"\n                    defaultChecked={selectedField?.visualize !== false}\n                  />\n                  <Label htmlFor=\"visualize\">Visualizar</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"required\"\n                    defaultChecked={selectedField?.required === true}\n                  />\n                  <Label htmlFor=\"required\">Obrigatório</Label>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSelectedField(null);\n                    setIsCreateMode(false);\n                  }}\n                >\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  {isCreateMode ? 'Criar' : 'Salvar'}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12350},"client/src/pages/Departments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building2, Plus, Edit, Trash2 } from \"lucide-react\";\nimport type { Department, InsertDepartment } from \"@shared/schema\";\n\nexport default function Departments() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingDepartment, setEditingDepartment] = useState<Department | null>(null);\n  const [formData, setFormData] = useState<InsertDepartment>({\n    name: \"\",\n    description: \"\",\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: departments, isLoading } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertDepartment) => apiRequest(\"/api/departments\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/departments\"] });\n      setIsCreateDialogOpen(false);\n      setFormData({ name: \"\", description: \"\" });\n      toast({\n        title: \"Sucesso\",\n        description: \"Departamento criado com sucesso!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar departamento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertDepartment> }) => \n      apiRequest(`/api/departments/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/departments\"] });\n      setEditingDepartment(null);\n      setFormData({ name: \"\", description: \"\" });\n      toast({\n        title: \"Sucesso\",\n        description: \"Departamento atualizado com sucesso!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar departamento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/departments/${id}`, {\n      method: \"DELETE\",\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/departments\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Departamento removido com sucesso!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao remover departamento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingDepartment) {\n      updateMutation.mutate({ id: editingDepartment.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (department: Department) => {\n    setEditingDepartment(department);\n    setFormData({\n      name: department.name,\n      description: department.description || \"\",\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Tem certeza que deseja remover este departamento?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Carregando departamentos...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Departamentos</h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie os departamentos e mesas de trabalho do sistema\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen || !!editingDepartment} onOpenChange={(open) => {\n          if (!open) {\n            setIsCreateDialogOpen(false);\n            setEditingDepartment(null);\n            setFormData({ name: \"\", description: \"\" });\n          }\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateDialogOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Departamento\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingDepartment ? \"Editar Departamento\" : \"Criar Novo Departamento\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingDepartment ? \n                  \"Atualize as informações do departamento.\" : \n                  \"Crie um novo departamento para organizar tickets por setor.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome do Departamento</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"Ex: TI, RH, Vendas...\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Descrição</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Descrição do departamento...\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsCreateDialogOpen(false);\n                    setEditingDepartment(null);\n                    setFormData({ name: \"\", description: \"\" });\n                  }}\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {editingDepartment ? \"Atualizar\" : \"Criar\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {departments && departments.length > 0 ? (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Building2 className=\"w-5 h-5\" />\n                <span>Departamentos Cadastrados</span>\n              </CardTitle>\n              <CardDescription>\n                Lista de todos os departamentos do sistema\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>Descrição</TableHead>\n                    <TableHead>Data de Criação</TableHead>\n                    <TableHead className=\"text-right\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {departments.map((department) => (\n                    <TableRow key={department.id}>\n                      <TableCell className=\"font-medium\">\n                        {department.name}\n                      </TableCell>\n                      <TableCell>\n                        {department.description || \"Sem descrição\"}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(department.createdAt).toLocaleDateString('pt-BR')}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEdit(department)}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => handleDelete(department.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardContent className=\"py-16\">\n              <div className=\"text-center\">\n                <Building2 className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Nenhum departamento cadastrado</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Comece criando o primeiro departamento do sistema.\n                </p>\n                <Button onClick={() => setIsCreateDialogOpen(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Criar Primeiro Departamento\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10288},"client/src/pages/Login.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Eye, EyeOff, Mail, Lock, Shield, Building2 } from 'lucide-react';\nimport { FaMicrosoft } from 'react-icons/fa';\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    // Simular login\n    setTimeout(() => {\n      console.log('Login realizado:', formData);\n      setIsLoading(false);\n      // Aqui redirecionaria para o dashboard\n    }, 2000);\n  };\n\n  const handleMicrosoftLogin = async () => {\n    setIsLoading(true);\n    // Aqui seria implementada a integração com Microsoft Graph API\n    console.log('Login com Microsoft iniciado');\n    \n    setTimeout(() => {\n      setIsLoading(false);\n      // Redirecionaria após autenticação\n    }, 2000);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\"\n         style={{ \n           background: 'linear-gradient(135deg, #2c4257 0%, #6b8fb0 50%, #9db4c7 100%)',\n           backgroundAttachment: 'fixed'\n         }}>\n      \n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3Ccircle cx='50' cy='50' r='2'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Logo OPUS */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl mb-4\"\n               style={{ background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)' }}>\n            <Building2 className=\"w-8 h-8 text-opus-blue-dark\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">TicketFlow Pro</h1>\n          <p className=\"text-opus-gray-light\">Grupo OPUS - Sistema de Tickets</p>\n        </div>\n\n        <Card className=\"backdrop-blur-md bg-white/95 border-0 shadow-2xl\">\n          <CardHeader className=\"text-center pb-4\">\n            <CardTitle className=\"text-2xl text-opus-blue-dark\">Bem-vindo de volta</CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Acesse sua conta para gerenciar tickets e solicitações\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {/* Login com Microsoft */}\n            <Button\n              onClick={handleMicrosoftLogin}\n              disabled={isLoading}\n              className=\"w-full h-12 bg-gradient-to-r from-[#0078d4] to-[#106ebe] hover:from-[#106ebe] to-[#005a9e] text-white font-medium transition-all duration-200 shadow-lg hover:shadow-xl\"\n            >\n              <FaMicrosoft className=\"w-5 h-5 mr-3\" />\n              {isLoading ? 'Conectando...' : 'Entrar com Microsoft'}\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"bg-white px-4 text-gray-500\">ou continue com email</span>\n              </div>\n            </div>\n\n            {/* Login tradicional */}\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-opus-blue-dark font-medium\">\n                  Email corporativo\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"seu.email@empresa.com\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({...formData, email: e.target.value})}\n                    className=\"pl-10 h-12 border-gray-200 focus:border-opus-blue-light focus:ring-opus-blue-light\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-opus-blue-dark font-medium\">\n                  Senha\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Digite sua senha\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({...formData, password: e.target.value})}\n                    className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-opus-blue-light focus:ring-opus-blue-light\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-opus-blue-dark transition-colors\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm\">\n                <label className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input type=\"checkbox\" className=\"rounded border-gray-300 text-opus-blue-dark focus:ring-opus-blue-light\" />\n                  <span className=\"text-gray-600\">Manter-me conectado</span>\n                </label>\n                <button type=\"button\" className=\"text-opus-blue-dark hover:text-opus-blue-light font-medium\">\n                  Esqueceu a senha?\n                </button>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full h-12 font-medium transition-all duration-200 shadow-lg hover:shadow-xl\"\n                style={{ \n                  background: 'linear-gradient(135deg, #2c4257 0%, #6b8fb0 100%)',\n                  color: 'white'\n                }}\n              >\n                {isLoading ? 'Entrando...' : 'Entrar no Sistema'}\n              </Button>\n            </form>\n\n            {/* Footer de segurança */}\n            <div className=\"pt-4 border-t border-gray-100\">\n              <div className=\"flex items-center justify-center space-x-2 text-xs text-gray-500\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Conexão segura e protegida</span>\n              </div>\n              <p className=\"text-center text-xs text-gray-400 mt-2\">\n                © 2025 Grupo OPUS. Todos os direitos reservados.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Link de suporte */}\n        <div className=\"text-center mt-6\">\n          <p className=\"text-white/80 text-sm\">\n            Precisa de ajuda? {' '}\n            <button className=\"text-white font-medium hover:underline\">\n              Entre em contato com o suporte\n            </button>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8125},"client/src/pages/NotFound.tsx":{"content":"import React from 'react';\nimport Icon from '@/components/AppIcon';\nimport Button from '@/components/Button';\nimport { useLocation } from 'wouter';\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"text-center space-y-6 max-w-md\">\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"w-24 h-24 bg-muted rounded-full flex items-center justify-center\">\n              <Icon name=\"FileQuestion\" size={48} className=\"text-muted-foreground\" />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h1 className=\"text-3xl font-bold text-foreground\">404</h1>\n            <h2 className=\"text-xl font-semibold text-foreground\">Página não encontrada</h2>\n            <p className=\"text-muted-foreground\">\n              A página que você está procurando não existe ou foi movida.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n          <Button\n            variant=\"default\"\n            onClick={() => setLocation('/')}\n            iconName=\"Home\"\n            iconPosition=\"left\"\n          >\n            Ir para Dashboard\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={() => window.history.back()}\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n          >\n            Voltar\n          </Button>\n        </div>\n\n        <div className=\"pt-4 border-t border-border\">\n          <p className=\"text-xs text-muted-foreground\">\n            Se você acredita que isso é um erro, entre em contato com o suporte.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1858},"client/src/pages/Profile.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  User, \n  Mail, \n  Phone, \n  Building, \n  Calendar, \n  Edit, \n  Save, \n  Camera,\n  Clock,\n  Activity,\n  Award,\n  TrendingUp,\n  CheckCircle,\n  AlertCircle,\n  Users\n} from 'lucide-react';\n\nexport default function Profile() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [userData, setUserData] = useState({\n    name: 'João Silva',\n    email: 'joao.silva@empresa.com',\n    phone: '(11) 99999-9999',\n    department: 'Tecnologia da Informação',\n    role: 'Administrador',\n    joinDate: '15/03/2023',\n    extension: '1234'\n  });\n\n  const handleSave = () => {\n    setIsEditing(false);\n    // TODO: Implementar salvamento real\n    console.log('Salvando dados do perfil...');\n  };\n\n  const stats = {\n    ticketsCreated: 124,\n    ticketsResolved: 98,\n    avgResolutionTime: '2.5h',\n    satisfaction: 4.8\n  };\n\n  const recentActivity = [\n    { id: 1, action: 'Resolveu ticket #TK-2045', time: '2h atrás', type: 'resolved' },\n    { id: 2, action: 'Comentou no ticket #TK-2041', time: '4h atrás', type: 'comment' },\n    { id: 3, action: 'Criou ticket #TK-2046', time: '1 dia atrás', type: 'created' },\n    { id: 4, action: 'Atribuiu ticket #TK-2044', time: '2 dias atrás', type: 'assigned' }\n  ];\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Avatar className=\"w-16 h-16\">\n                <AvatarImage src=\"\" />\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-xl font-semibold\">\n                  {userData.name.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              <Button \n                size=\"icon\" \n                variant=\"outline\" \n                className=\"absolute -bottom-1 -right-1 w-8 h-8 rounded-full bg-background\"\n              >\n                <Camera className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">{userData.name}</h1>\n              <p className=\"text-muted-foreground\">{userData.role} • {userData.department}</p>\n              <div className=\"flex items-center space-x-4 mt-2\">\n                <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  Ativo\n                </Badge>\n                <span className=\"text-sm text-muted-foreground\">\n                  <Calendar className=\"w-4 h-4 inline mr-1\" />\n                  Desde {userData.joinDate}\n                </span>\n              </div>\n            </div>\n          </div>\n          <Button \n            onClick={() => isEditing ? handleSave() : setIsEditing(!isEditing)}\n            className=\"bg-primary hover:bg-primary-hover\"\n          >\n            {isEditing ? (\n              <>\n                <Save className=\"w-4 h-4 mr-2\" />\n                Salvar\n              </>\n            ) : (\n              <>\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Editar Perfil\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"info\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"info\" className=\"flex items-center space-x-2\">\n            <User className=\"w-4 h-4\" />\n            <span>Informações</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"stats\" className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span>Estatísticas</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"activity\" className=\"flex items-center space-x-2\">\n            <Activity className=\"w-4 h-4\" />\n            <span>Atividade</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"achievements\" className=\"flex items-center space-x-2\">\n            <Award className=\"w-4 h-4\" />\n            <span>Conquistas</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Informações Pessoais */}\n        <TabsContent value=\"info\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Dados Pessoais</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input \n                      id=\"firstName\" \n                      value={userData.name.split(' ')[0]}\n                      disabled={!isEditing}\n                      className={!isEditing ? \"bg-muted\" : \"\"}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input \n                      id=\"lastName\" \n                      value={userData.name.split(' ').slice(1).join(' ')}\n                      disabled={!isEditing}\n                      className={!isEditing ? \"bg-muted\" : \"\"}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input \n                    id=\"email\" \n                    type=\"email\" \n                    value={userData.email}\n                    disabled={!isEditing}\n                    className={!isEditing ? \"bg-muted\" : \"\"}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input \n                      id=\"phone\" \n                      value={userData.phone}\n                      disabled={!isEditing}\n                      className={!isEditing ? \"bg-muted\" : \"\"}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"extension\">Ramal</Label>\n                    <Input \n                      id=\"extension\" \n                      value={userData.extension}\n                      disabled={!isEditing}\n                      className={!isEditing ? \"bg-muted\" : \"\"}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Building className=\"w-5 h-5\" />\n                  <span>Informações Profissionais</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Departamento</Label>\n                  <div className=\"p-3 bg-muted rounded-md text-sm\">\n                    {userData.department}\n                  </div>\n                </div>\n                <div>\n                  <Label>Cargo</Label>\n                  <div className=\"p-3 bg-muted rounded-md text-sm\">\n                    {userData.role}\n                  </div>\n                </div>\n                <div>\n                  <Label>Data de Admissão</Label>\n                  <div className=\"p-3 bg-muted rounded-md text-sm\">\n                    {userData.joinDate}\n                  </div>\n                </div>\n                <Separator />\n                <div className=\"space-y-2\">\n                  <Label>Permissões</Label>\n                  <div className=\"space-y-2\">\n                    <Badge variant=\"secondary\">Gerenciar Usuários</Badge>\n                    <Badge variant=\"secondary\">Visualizar Relatórios</Badge>\n                    <Badge variant=\"secondary\">Configurar Sistema</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Estatísticas */}\n        <TabsContent value=\"stats\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Tickets Criados</p>\n                    <p className=\"text-2xl font-bold\">{stats.ticketsCreated}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Tickets Resolvidos</p>\n                    <p className=\"text-2xl font-bold\">{stats.ticketsResolved}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Tempo Médio</p>\n                    <p className=\"text-2xl font-bold\">{stats.avgResolutionTime}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <Award className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Satisfação</p>\n                    <p className=\"text-2xl font-bold\">{stats.satisfaction}/5</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Mensal</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">Gráfico de performance será exibido aqui</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Atividade Recente */}\n        <TabsContent value=\"activity\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Activity className=\"w-5 h-5\" />\n                <span>Atividades Recentes</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity) => (\n                  <div key={activity.id} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      activity.type === 'resolved' ? 'bg-green-500' :\n                      activity.type === 'comment' ? 'bg-blue-500' :\n                      activity.type === 'created' ? 'bg-orange-500' :\n                      'bg-purple-500'\n                    }`} />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{activity.action}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                    </div>\n                    <div className={`p-1 rounded ${\n                      activity.type === 'resolved' ? 'bg-green-100 text-green-700' :\n                      activity.type === 'comment' ? 'bg-blue-100 text-blue-700' :\n                      activity.type === 'created' ? 'bg-orange-100 text-orange-700' :\n                      'bg-purple-100 text-purple-700'\n                    }`}>\n                      {activity.type === 'resolved' && <CheckCircle className=\"w-4 h-4\" />}\n                      {activity.type === 'comment' && <Mail className=\"w-4 h-4\" />}\n                      {activity.type === 'created' && <AlertCircle className=\"w-4 h-4\" />}\n                      {activity.type === 'assigned' && <Users className=\"w-4 h-4\" />}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Conquistas */}\n        <TabsContent value=\"achievements\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card className=\"border-l-4 border-l-yellow-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <Award className=\"w-6 h-6 text-yellow-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Solucionador Rápido</h3>\n                    <p className=\"text-sm text-muted-foreground\">Resolveu 50+ tickets em menos de 1h</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Colaborador Ativo</h3>\n                    <p className=\"text-sm text-muted-foreground\">Participou de 100+ discussões</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Satisfação Alta</h3>\n                    <p className=\"text-sm text-muted-foreground\">Manteve rating 4.5+ por 3 meses</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16109},"client/src/pages/Reports.tsx":{"content":"import React, { useState } from 'react';\nimport { Calendar, Download, TrendingUp, BarChart3, PieChart, Users, Clock, Target, Filter } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { DatePickerWithRange } from '@/components/ui/date-picker';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LineChart, Line, BarChart, Bar, PieChart as RechartsPieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nexport default function Reports() {\n  const [dateRange, setDateRange] = useState({\n    from: new Date(2024, 0, 1),\n    to: new Date()\n  });\n  const [selectedPeriod, setSelectedPeriod] = useState('30');\n  const [selectedDepartment, setSelectedDepartment] = useState('all');\n  const [selectedPriority, setSelectedPriority] = useState('all');\n\n  // Dados de exemplo para demonstração dos relatórios\n  const ticketsByDate = [\n    { date: '2024-01-01', created: 12, resolved: 8, pending: 4 },\n    { date: '2024-01-02', created: 15, resolved: 12, pending: 7 },\n    { date: '2024-01-03', created: 8, resolved: 10, pending: 5 },\n    { date: '2024-01-04', created: 18, resolved: 14, pending: 9 },\n    { date: '2024-01-05', created: 22, resolved: 18, pending: 13 },\n    { date: '2024-01-06', created: 10, resolved: 15, pending: 8 },\n    { date: '2024-01-07', created: 14, resolved: 12, pending: 10 },\n    { date: '2024-01-08', created: 16, resolved: 13, pending: 13 },\n    { date: '2024-01-09', created: 20, resolved: 17, pending: 16 },\n    { date: '2024-01-10', created: 25, resolved: 22, pending: 19 },\n    { date: '2024-01-11', created: 12, resolved: 18, pending: 13 },\n    { date: '2024-01-12', created: 9, resolved: 14, pending: 8 },\n    { date: '2024-01-13', created: 19, resolved: 16, pending: 11 },\n    { date: '2024-01-14', created: 23, resolved: 20, pending: 14 },\n    { date: '2024-01-15', created: 17, resolved: 19, pending: 12 }\n  ];\n\n  const ticketsByDepartment = [\n    { name: 'TI', tickets: 145, resolved: 132, pending: 13, avgTime: '2.4h' },\n    { name: 'RH', tickets: 89, resolved: 84, pending: 5, avgTime: '1.8h' },\n    { name: 'Financeiro', tickets: 67, resolved: 61, pending: 6, avgTime: '3.2h' },\n    { name: 'Operações', tickets: 123, resolved: 110, pending: 13, avgTime: '2.9h' },\n    { name: 'Comercial', tickets: 78, resolved: 72, pending: 6, avgTime: '2.1h' }\n  ];\n\n  const ticketsByPriority = [\n    { name: 'Crítica', value: 23, color: '#ef4444' },\n    { name: 'Alta', value: 67, color: '#f97316' },\n    { name: 'Média', value: 156, color: '#eab308' },\n    { name: 'Baixa', value: 89, color: '#22c55e' }\n  ];\n\n  const resolutionTimeAnalysis = [\n    { category: '< 1 hora', count: 45, percentage: 18 },\n    { category: '1-4 horas', count: 125, percentage: 50 },\n    { category: '4-8 horas', count: 58, percentage: 23 },\n    { category: '8-24 horas', count: 18, percentage: 7 },\n    { category: '> 24 horas', count: 4, percentage: 2 }\n  ];\n\n  const satisfactionTrends = [\n    { month: 'Jul', score: 4.2 },\n    { month: 'Ago', score: 4.4 },\n    { month: 'Set', score: 4.3 },\n    { month: 'Out', score: 4.6 },\n    { month: 'Nov', score: 4.7 },\n    { month: 'Dez', score: 4.8 },\n    { month: 'Jan', score: 4.8 }\n  ];\n\n  const topPerformers = [\n    { name: 'Maria Santos', tickets: 89, satisfaction: 4.9, efficiency: 96 },\n    { name: 'João Silva', tickets: 76, satisfaction: 4.7, efficiency: 92 },\n    { name: 'Ana Costa', tickets: 68, satisfaction: 4.8, efficiency: 89 },\n    { name: 'Pedro Lima', tickets: 54, satisfaction: 4.6, efficiency: 87 },\n    { name: 'Carlos Souza', tickets: 45, satisfaction: 4.5, efficiency: 85 }\n  ];\n\n  const exportReport = (format: string) => {\n    console.log(`Exportando relatório em formato ${format}`);\n    alert(`Relatório exportado em formato ${format.toUpperCase()}`);\n  };\n\n  const generateCustomReport = () => {\n    console.log('Gerando relatório personalizado...');\n    alert('Relatório personalizado será gerado e enviado por email');\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Relatórios Avançados</h1>\n          <p className=\"text-gray-600 mt-2\">Análises detalhadas e insights sobre o desempenho do sistema</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" onClick={() => exportReport('pdf')}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Exportar PDF\n          </Button>\n          <Button variant=\"outline\" onClick={() => exportReport('excel')}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Exportar Excel\n          </Button>\n          <Button onClick={generateCustomReport}>\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Relatório Personalizado\n          </Button>\n        </div>\n      </div>\n\n      {/* Filtros */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"w-5 h-5\" />\n            <span>Filtros de Análise</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Período</label>\n              <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Últimos 7 dias</SelectItem>\n                  <SelectItem value=\"30\">Últimos 30 dias</SelectItem>\n                  <SelectItem value=\"90\">Últimos 3 meses</SelectItem>\n                  <SelectItem value=\"365\">Último ano</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Departamento</label>\n              <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os Departamentos</SelectItem>\n                  <SelectItem value=\"ti\">TI</SelectItem>\n                  <SelectItem value=\"rh\">RH</SelectItem>\n                  <SelectItem value=\"financeiro\">Financeiro</SelectItem>\n                  <SelectItem value=\"operacoes\">Operações</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Prioridade</label>\n              <Select value={selectedPriority} onValueChange={setSelectedPriority}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as Prioridades</SelectItem>\n                  <SelectItem value=\"critica\">Crítica</SelectItem>\n                  <SelectItem value=\"alta\">Alta</SelectItem>\n                  <SelectItem value=\"media\">Média</SelectItem>\n                  <SelectItem value=\"baixa\">Baixa</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Intervalo Personalizado</label>\n              <DatePickerWithRange date={dateRange} setDate={setDateRange} />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Relatórios em Abas */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"tickets-by-date\">Por Data</TabsTrigger>\n          <TabsTrigger value=\"department\">Departamentos</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"satisfaction\">Satisfação</TabsTrigger>\n          <TabsTrigger value=\"trends\">Tendências</TabsTrigger>\n        </TabsList>\n\n        {/* Visão Geral */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Total de Tickets</p>\n                    <p className=\"text-3xl font-bold text-blue-600\">1,247</p>\n                    <p className=\"text-sm text-green-600\">+12% vs mês anterior</p>\n                  </div>\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Taxa de Resolução</p>\n                    <p className=\"text-3xl font-bold text-green-600\">94.2%</p>\n                    <p className=\"text-sm text-green-600\">+2.1% vs mês anterior</p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <Target className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Tempo Médio</p>\n                    <p className=\"text-3xl font-bold text-orange-600\">4.2h</p>\n                    <p className=\"text-sm text-red-600\">+0.3h vs mês anterior</p>\n                  </div>\n                  <div className=\"p-3 bg-orange-50 rounded-lg\">\n                    <Clock className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Satisfação</p>\n                    <p className=\"text-3xl font-bold text-purple-600\">4.8/5</p>\n                    <p className=\"text-sm text-green-600\">+0.2 vs mês anterior</p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Distribuição por Prioridade</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={ticketsByPriority}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, value }: { name: string; value: number }) => `${name}: ${value}`}\n                    >\n                      {ticketsByPriority.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Análise de Tempo de Resolução</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {resolutionTimeAnalysis.map((item, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium\">{item.category}</span>\n                        <span className=\"text-sm text-gray-600\">{item.count} tickets</span>\n                      </div>\n                      <Progress value={item.percentage} className=\"h-2\" />\n                    </div>\n                    <span className=\"ml-4 text-sm font-semibold\">{item.percentage}%</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tickets por Data */}\n        <TabsContent value=\"tickets-by-date\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-5 h-5\" />\n                <span>Tickets por Data - Análise Temporal</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <LineChart data={ticketsByDate}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" tickFormatter={(value) => new Date(value).toLocaleDateString('pt-BR')} />\n                  <YAxis />\n                  <Tooltip labelFormatter={(value) => `Data: ${new Date(value).toLocaleDateString('pt-BR')}`} />\n                  <Legend />\n                  <Line type=\"monotone\" dataKey=\"created\" stroke=\"#3b82f6\" name=\"Criados\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"resolved\" stroke=\"#10b981\" name=\"Resolvidos\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"pending\" stroke=\"#f59e0b\" name=\"Pendentes\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">245</div>\n                <div className=\"text-sm text-gray-600\">Tickets Criados</div>\n                <div className=\"text-xs text-green-600 mt-1\">+15% vs período anterior</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">218</div>\n                <div className=\"text-sm text-gray-600\">Tickets Resolvidos</div>\n                <div className=\"text-xs text-green-600 mt-1\">+8% vs período anterior</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">27</div>\n                <div className=\"text-sm text-gray-600\">Tickets Pendentes</div>\n                <div className=\"text-xs text-red-600 mt-1\">+12% vs período anterior</div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Análise por Departamento */}\n        <TabsContent value=\"department\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance por Departamento</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {ticketsByDepartment.map((dept, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold\">{dept.name}</h3>\n                      <Badge variant=\"outline\">{dept.avgTime} tempo médio</Badge>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 mb-3\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{dept.tickets}</div>\n                        <div className=\"text-sm text-gray-600\">Total</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">{dept.resolved}</div>\n                        <div className=\"text-sm text-gray-600\">Resolvidos</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-orange-600\">{dept.pending}</div>\n                        <div className=\"text-sm text-gray-600\">Pendentes</div>\n                      </div>\n                    </div>\n                    <Progress value={(dept.resolved / dept.tickets) * 100} className=\"h-2\" />\n                    <div className=\"text-xs text-gray-600 mt-1\">\n                      Taxa de resolução: {((dept.resolved / dept.tickets) * 100).toFixed(1)}%\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Performance da Equipe */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5\" />\n                <span>Top Performers</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {topPerformers.map((performer, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold\">\n                          {index + 1}\n                        </div>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\">{performer.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{performer.tickets} tickets resolvidos</p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-4 text-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"font-semibold text-purple-600\">{performer.satisfaction}</div>\n                        <div className=\"text-gray-600\">Satisfação</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-semibold text-green-600\">{performer.efficiency}%</div>\n                        <div className=\"text-gray-600\">Eficiência</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Satisfação do Cliente */}\n        <TabsContent value=\"satisfaction\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Evolução da Satisfação do Cliente</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={satisfactionTrends}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis domain={[4, 5]} />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"score\" stroke=\"#8b5cf6\" strokeWidth={3} />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Análise de Tendências */}\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Análise de Tendências e Previsões</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={ticketsByDate}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" tickFormatter={(value) => new Date(value).toLocaleDateString('pt-BR')} />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"created\" fill=\"#3b82f6\" name=\"Criados\" />\n                  <Bar dataKey=\"resolved\" fill=\"#10b981\" name=\"Resolvidos\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Insights Automatizados</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"p-3 bg-green-50 border-l-4 border-green-400 rounded\">\n                  <p className=\"text-sm font-medium text-green-800\">📈 Volume crescendo 15% nas últimas 2 semanas</p>\n                </div>\n                <div className=\"p-3 bg-blue-50 border-l-4 border-blue-400 rounded\">\n                  <p className=\"text-sm font-medium text-blue-800\">⏰ Pico de tickets entre 10h-12h</p>\n                </div>\n                <div className=\"p-3 bg-yellow-50 border-l-4 border-yellow-400 rounded\">\n                  <p className=\"text-sm font-medium text-yellow-800\">⚠️ Departamento TI com aumento de 23% em tickets críticos</p>\n                </div>\n                <div className=\"p-3 bg-purple-50 border-l-4 border-purple-400 rounded\">\n                  <p className=\"text-sm font-medium text-purple-800\">🎯 Meta de SLA sendo superada consistentemente</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Previsões para Próximos 30 Dias</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Volume Esperado</span>\n                  <span className=\"text-lg font-bold text-blue-600\">~380 tickets</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Pico Esperado</span>\n                  <span className=\"text-lg font-bold text-orange-600\">Semana 3</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Recursos Necessários</span>\n                  <span className=\"text-lg font-bold text-green-600\">+2 analistas</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">SLA Projetado</span>\n                  <span className=\"text-lg font-bold text-purple-600\">94.8%</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24157},"client/src/pages/ReportsNew.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Calendar, Download, BarChart3, PieChart, Users, Clock, Target, Filter } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LineChart, Line, BarChart, Bar, PieChart as RechartsPieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nexport default function ReportsNew() {\n  const [dateRange, setDateRange] = useState({\n    startDate: '2024-01-01',\n    endDate: new Date().toISOString().split('T')[0]\n  });\n  const [selectedDepartment, setSelectedDepartment] = useState('all');\n  const [selectedPriority, setSelectedPriority] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n\n  // Query para obter departamentos\n  const { data: departments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Query para obter usuários\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Queries para relatórios com filtros funcionais\n  const { data: departmentPerformance = [], isLoading: loadingDeptPerf } = useQuery({\n    queryKey: [\"/api/reports/department-performance\", dateRange.startDate, dateRange.endDate],\n    queryFn: () => \n      fetch(`/api/reports/department-performance?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}`)\n        .then(res => res.json()),\n  });\n\n  const { data: userPerformance = [], isLoading: loadingUserPerf } = useQuery({\n    queryKey: [\"/api/reports/user-performance\", dateRange.startDate, dateRange.endDate, selectedDepartment],\n    queryFn: () => \n      fetch(`/api/reports/user-performance?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}&departmentId=${selectedDepartment}`)\n        .then(res => res.json()),\n  });\n\n  const { data: resolutionTimeAnalysis = [], isLoading: loadingResTime } = useQuery({\n    queryKey: [\"/api/reports/resolution-time-analysis\", dateRange.startDate, dateRange.endDate, selectedDepartment],\n    queryFn: () => \n      fetch(`/api/reports/resolution-time-analysis?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}&departmentId=${selectedDepartment}`)\n        .then(res => res.json()),\n  });\n\n  const { data: filteredTickets = [], isLoading: loadingTickets } = useQuery({\n    queryKey: [\"/api/reports/filtered-tickets\", dateRange.startDate, dateRange.endDate, selectedDepartment, selectedPriority, selectedStatus],\n    queryFn: () => {\n      const params = new URLSearchParams({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate,\n        departmentId: selectedDepartment,\n        priority: selectedPriority,\n        status: selectedStatus,\n      });\n      return fetch(`/api/reports/filtered-tickets?${params}`)\n        .then(res => res.json());\n    },\n  });\n\n  const COLORS = ['#3b82f6', '#ef4444', '#eab308', '#22c55e'];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Relatórios Avançados</h1>\n          <p className=\"text-gray-600 mt-2\">Análises detalhadas e insights sobre o desempenho do sistema</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Exportar PDF\n          </Button>\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Exportar Excel\n          </Button>\n          <Button>\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Relatório Personalizado\n          </Button>\n        </div>\n      </div>\n\n      {/* Filtros Funcionais */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"w-5 h-5\" />\n            <span>Filtros de Análise</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Data Início</label>\n              <input\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Data Fim</label>\n              <input\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Departamento</label>\n              <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os departamentos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os departamentos</SelectItem>\n                  {departments.map((dept: any) => (\n                    <SelectItem key={dept.id} value={dept.id}>\n                      {dept.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Prioridade</label>\n              <Select value={selectedPriority} onValueChange={setSelectedPriority}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas as prioridades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as prioridades</SelectItem>\n                  <SelectItem value=\"critical\">Crítica</SelectItem>\n                  <SelectItem value=\"high\">Alta</SelectItem>\n                  <SelectItem value=\"medium\">Média</SelectItem>\n                  <SelectItem value=\"low\">Baixa</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Status</label>\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os status</SelectItem>\n                  <SelectItem value=\"open\">Aberto</SelectItem>\n                  <SelectItem value=\"in_progress\">Em Progresso</SelectItem>\n                  <SelectItem value=\"resolved\">Resolvido</SelectItem>\n                  <SelectItem value=\"closed\">Fechado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs dos Relatórios */}\n      <Tabs defaultValue=\"sla\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-7\">\n          <TabsTrigger value=\"sla\">SLA</TabsTrigger>\n          <TabsTrigger value=\"daily\">Chamados/Dia</TabsTrigger>\n          <TabsTrigger value=\"aging\">Envelhecimento</TabsTrigger>\n          <TabsTrigger value=\"departments\">Departamentos</TabsTrigger>\n          <TabsTrigger value=\"users\">Usuários</TabsTrigger>\n          <TabsTrigger value=\"satisfaction\">Satisfação</TabsTrigger>\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n        </TabsList>\n\n        {/* Tab SLA */}\n        <TabsContent value=\"sla\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5\" />\n                  <span>Cumprimento de SLA</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">87%</div>\n                      <div className=\"text-sm text-green-700\">SLA Cumprido</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-gray-600\">217 de 250 tickets</div>\n                      <Progress value={87} className=\"w-20 mt-1\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Crítico (4h)</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">92%</span>\n                        <Progress value={92} className=\"w-16\" />\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Alto (8h)</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">89%</span>\n                        <Progress value={89} className=\"w-16\" />\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Médio (24h)</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">85%</span>\n                        <Progress value={85} className=\"w-16\" />\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Baixo (72h)</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">94%</span>\n                        <Progress value={94} className=\"w-16\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Tickets em Risco de SLA</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium text-red-800\">TICK-789432</div>\n                        <div className=\"text-sm text-red-600\">Sistema de pagamento offline</div>\n                      </div>\n                      <Badge variant=\"destructive\">2h restantes</Badge>\n                    </div>\n                  </div>\n                  <div className=\"p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium text-orange-800\">TICK-789431</div>\n                        <div className=\"text-sm text-orange-600\">Erro na integração</div>\n                      </div>\n                      <Badge variant=\"secondary\">6h restantes</Badge>\n                    </div>\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium text-yellow-800\">TICK-789430</div>\n                        <div className=\"text-sm text-yellow-600\">Performance lenta</div>\n                      </div>\n                      <Badge variant=\"outline\">12h restantes</Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Chamados por Dia */}\n        <TabsContent value=\"daily\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-5 h-5\" />\n                <span>Volume de Chamados por Dia</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={[\n                      { day: 'Seg', received: 45, resolved: 38 },\n                      { day: 'Ter', received: 52, resolved: 44 },\n                      { day: 'Qua', received: 38, resolved: 42 },\n                      { day: 'Qui', received: 61, resolved: 35 },\n                      { day: 'Sex', received: 42, resolved: 48 },\n                      { day: 'Sáb', received: 18, resolved: 22 },\n                      { day: 'Dom', received: 12, resolved: 15 }\n                    ]}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                      <XAxis dataKey=\"day\" tick={{ fill: \"#6b7280\", fontSize: 12 }} />\n                      <YAxis tick={{ fill: \"#6b7280\", fontSize: 12 }} />\n                      <Tooltip />\n                      <Legend />\n                      <Bar dataKey=\"received\" fill=\"#3b82f6\" name=\"Recebidos\" />\n                      <Bar dataKey=\"resolved\" fill=\"#22c55e\" name=\"Resolvidos\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">268</div>\n                    <div className=\"text-sm text-blue-700\">Total Semanal</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">244</div>\n                    <div className=\"text-sm text-green-700\">Resolvidos</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-600\">38.3</div>\n                    <div className=\"text-sm text-orange-700\">Média Diária</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab Envelhecimento */}\n        <TabsContent value=\"aging\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5\" />\n                <span>Análise de Envelhecimento de Tickets</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={[\n                          { name: '0-24h', value: 45, color: '#22c55e' },\n                          { name: '1-3 dias', value: 28, color: '#eab308' },\n                          { name: '3-7 dias', value: 18, color: '#f97316' },\n                          { name: '7+ dias', value: 9, color: '#ef4444' }\n                        ]}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${value}%`}\n                      >\n                        {[{ name: '0-24h', value: 45, color: '#22c55e' },\n                          { name: '1-3 dias', value: 28, color: '#eab308' },\n                          { name: '3-7 dias', value: 18, color: '#f97316' },\n                          { name: '7+ dias', value: 9, color: '#ef4444' }].map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-lg font-semibold\">142 tickets</div>\n                        <div className=\"text-sm text-gray-500\">0-24 horas</div>\n                      </div>\n                      <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    </div>\n                  </div>\n                  <div className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-lg font-semibold\">89 tickets</div>\n                        <div className=\"text-sm text-gray-500\">1-3 dias</div>\n                      </div>\n                      <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                    </div>\n                  </div>\n                  <div className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-lg font-semibold\">57 tickets</div>\n                        <div className=\"text-sm text-gray-500\">3-7 dias</div>\n                      </div>\n                      <div className=\"w-3 h-3 bg-orange-500 rounded-full\"></div>\n                    </div>\n                  </div>\n                  <div className=\"p-4 border rounded-lg bg-red-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-lg font-semibold text-red-600\">28 tickets</div>\n                        <div className=\"text-sm text-red-500\">Mais de 7 dias</div>\n                      </div>\n                      <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab Departamentos */}\n        <TabsContent value=\"departments\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span>Performance por Departamento</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingDeptPerf ? (\n                <div className=\"h-64 flex items-center justify-center\">\n                  <div className=\"text-gray-500\">Carregando dados...</div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-gray-500\">Nenhum departamento configurado ainda</div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab Usuários */}\n        <TabsContent value=\"users\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5\" />\n                <span>Performance dos Usuários</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingUserPerf ? (\n                <div className=\"h-64 flex items-center justify-center\">\n                  <div className=\"text-gray-500\">Carregando dados...</div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {userPerformance.map((user: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-blue-600 font-semibold text-sm\">\n                            {user.name?.split(' ').map((n: string) => n[0]).join('') || 'U'}\n                          </span>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900\">{user.name}</h4>\n                          <Badge variant={\n                            user.role === 'admin' ? 'default' :\n                            user.role === 'supervisor' ? 'secondary' : 'outline'\n                          }>\n                            {user.role === 'admin' ? 'Administrador' :\n                             user.role === 'supervisor' ? 'Supervisor' : 'Colaborador'}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-6 text-sm\">\n                        <div className=\"text-center\">\n                          <div className=\"font-semibold\">{user.tickets || 0}</div>\n                          <div className=\"text-gray-500\">Tickets</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"font-semibold\">{user.resolved || 0}</div>\n                          <div className=\"text-gray-500\">Resolvidos</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"font-semibold\">{user.efficiency || 0}%</div>\n                          <div className=\"text-gray-500\">Eficiência</div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab Satisfação */}\n        <TabsContent value=\"satisfaction\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Índice de Satisfação Geral</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <div className=\"text-6xl font-bold text-blue-600 mb-4\">4.7</div>\n                  <div className=\"text-lg text-gray-600 mb-2\">de 5.0</div>\n                  <div className=\"text-sm text-gray-500\">Baseado em 847 avaliações</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Distribuição das Avaliações</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm w-8\">5★</span>\n                    <Progress value={68} className=\"flex-1\" />\n                    <span className=\"text-sm w-8\">68%</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm w-8\">4★</span>\n                    <Progress value={22} className=\"flex-1\" />\n                    <span className=\"text-sm w-8\">22%</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm w-8\">3★</span>\n                    <Progress value={7} className=\"flex-1\" />\n                    <span className=\"text-sm w-8\">7%</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm w-8\">2★</span>\n                    <Progress value={2} className=\"flex-1\" />\n                    <span className=\"text-sm w-8\">2%</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-sm w-8\">1★</span>\n                    <Progress value={1} className=\"flex-1\" />\n                    <span className=\"text-sm w-8\">1%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Principais Comentários</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"text-sm font-medium\">Maria S.</div>\n                      <div className=\"text-yellow-400\">★★★★★</div>\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\"Atendimento excelente e rápido!\"</div>\n                  </div>\n                  <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"text-sm font-medium\">João P.</div>\n                      <div className=\"text-yellow-400\">★★★★☆</div>\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\"Problema resolvido rapidamente\"</div>\n                  </div>\n                  <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"text-sm font-medium\">Ana C.</div>\n                      <div className=\"text-yellow-400\">★★★★★</div>\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\"Equipe muito profissional\"</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Tab Visão Geral */}\n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Resumo dos Tickets Filtrados</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingTickets ? (\n                  <div className=\"text-center py-4\">Carregando...</div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span>Total de Tickets:</span>\n                      <span className=\"font-semibold\">{filteredTickets.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Resolvidos:</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {filteredTickets.filter((t: any) => t.status === 'resolved').length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Em Progresso:</span>\n                      <span className=\"font-semibold text-blue-600\">\n                        {filteredTickets.filter((t: any) => t.status === 'in_progress').length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Abertos:</span>\n                      <span className=\"font-semibold text-orange-600\">\n                        {filteredTickets.filter((t: any) => t.status === 'open').length}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Hierarquia do Sistema</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3 p-3 bg-red-50 rounded-lg\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <div>\n                      <div className=\"font-semibold text-red-700\">Administrador</div>\n                      <div className=\"text-sm text-red-600\">Acesso total ao sistema</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                    <div>\n                      <div className=\"font-semibold text-blue-700\">Supervisor</div>\n                      <div className=\"text-sm text-blue-600\">Gerencia equipe e relatórios</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded-lg\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <div>\n                      <div className=\"font-semibold text-green-700\">Colaborador</div>\n                      <div className=\"text-sm text-green-600\">Atende e resolve tickets</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":30584},"client/src/pages/SLA.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { AlertTriangle, Clock, Target, Zap, Shield, Bell, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport SLAMetrics from '@/components/sla/SLAMetrics';\nimport SLATicketCard from '@/components/sla/SLATicketCard';\nimport SLAFilters from '@/components/sla/SLAFilters';\nimport ViolationHistory from '@/components/sla/ViolationHistory';\nimport EscalationQueue from '@/components/sla/EscalationQueue';\nimport TicketDetailModal from '@/components/TicketDetailModal';\n\nexport default function SLA() {\n  const [filters, setFilters] = React.useState({\n    priority: 'all',\n    status: 'all',\n    department: 'all',\n    timeRange: '24h'\n  });\n  \n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\n\n  // Buscar tickets reais da API\n  const { data: realTickets = [], isLoading: ticketsLoading } = useQuery({\n    queryKey: ['/api/tickets'],\n  });\n\n  // Buscar usuários para pegar nomes\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  // Buscar departamentos para pegar nomes\n  const { data: departments = [] } = useQuery({\n    queryKey: ['/api/departments'],\n  });\n\n  // Criar mapeamento de IDs para nomes\n  const userMap = users.reduce((acc: any, user: any) => {\n    acc[user.id] = user.name;\n    return acc;\n  }, {});\n\n  const departmentMap = departments.reduce((acc: any, dept: any) => {\n    acc[dept.id] = dept.name;\n    return acc;\n  }, {});\n\n  // Usar tickets reais com dados de SLA calculados no backend\n  const slaTickets = realTickets.filter((ticket: any) => ['open', 'in_progress', 'pending'].includes(ticket.status));\n\n  // Listener para abrir ticket modal\n  useEffect(() => {\n    const handleOpenTicketModal = (e: CustomEvent) => {\n      setSelectedTicketId(e.detail.ticketId);\n      setIsTicketModalOpen(true);\n    };\n\n    window.addEventListener('open-ticket-modal', handleOpenTicketModal as EventListener);\n    return () => {\n      window.removeEventListener('open-ticket-modal', handleOpenTicketModal as EventListener);\n    };\n  }, []);\n\n  if (ticketsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredTickets = slaTickets.filter(ticket => {\n    if (filters.priority !== 'all' && ticket.priority !== filters.priority) return false;\n    if (filters.status !== 'all' && ticket.status !== filters.status) return false;\n    if (filters.department !== 'all' && ticket.department?.name !== filters.department) return false;\n    return true;\n  });\n\n  // Separar tickets por criticidade baseado no SLA status\n  const criticalTickets = filteredTickets.filter(t => t.slaStatus === 'violated' || t.priority === 'critical');\n  const urgentTickets = filteredTickets.filter(t => t.slaStatus === 'at_risk' && !criticalTickets.includes(t)); \n  const normalTickets = filteredTickets.filter(t => !criticalTickets.includes(t) && !urgentTickets.includes(t));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header com Status Geral */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 flex items-center gap-3\">\n            <Shield className=\"w-8 h-8 text-blue-600\" />\n            Monitor SLA\n          </h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-2\">\n            Visão em tempo real dos acordos de nível de serviço\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"flex items-center gap-2\"\n            onClick={() => {\n              alert('Funcionalidade de Configuração de Alertas será implementada em breve');\n            }}\n          >\n            <Bell className=\"w-4 h-4\" />\n            Configurar Alertas\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"flex items-center gap-2\"\n            onClick={() => window.location.href = '/sla-rules'}\n          >\n            <Target className=\"w-4 h-4\" />\n            Regras SLA\n          </Button>\n        </div>\n      </div>\n\n      {/* Alertas Críticos - Seção de Destaque */}\n      {criticalTickets.length > 0 && (\n        <Alert className=\"border-red-200 bg-red-50 dark:bg-red-950/20\">\n          <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n          <AlertDescription className=\"text-red-800 dark:text-red-200\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <strong>{criticalTickets.length} ticket(s) crítico(s)</strong> precisam de ação imediata!\n                Violações ativas ou risco extremo de violação.\n              </div>\n              <Button \n                variant=\"destructive\" \n                size=\"sm\" \n                className=\"ml-4\"\n                onClick={() => {\n                  // Redirecionar para o kanban board com filtros críticos\n                  window.location.href = '/?priority=critical&status=open';\n                }}\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Ação Urgente\n              </Button>\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Metrics Visuais Melhorados */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-green-200 bg-green-50/50 dark:bg-green-950/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-700 dark:text-green-300\">SLA Compliance</p>\n                <p className=\"text-3xl font-bold text-green-800 dark:text-green-200\">94.2%</p>\n                <div className=\"flex items-center text-xs text-green-600 mt-1\">\n                  <ArrowUp className=\"w-3 h-3 mr-1\" />\n                  +2.1% vs mês anterior\n                </div>\n              </div>\n              <Target className=\"w-12 h-12 text-green-600 opacity-60\" />\n            </div>\n            <Progress value={94.2} className=\"mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-red-200 bg-red-50/50 dark:bg-red-950/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-red-700 dark:text-red-300\">Tickets Críticos</p>\n                <p className=\"text-3xl font-bold text-red-800 dark:text-red-200\">{criticalTickets.length}</p>\n                <div className=\"flex items-center text-xs text-red-600 mt-1\">\n                  {criticalTickets.length > 0 ? (\n                    <>\n                      <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                      Requer ação imediata\n                    </>\n                  ) : (\n                    <>\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Nenhum crítico\n                    </>\n                  )}\n                </div>\n              </div>\n              <AlertTriangle className=\"w-12 h-12 text-red-600 opacity-60\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-yellow-200 bg-yellow-50/50 dark:bg-yellow-950/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-yellow-700 dark:text-yellow-300\">Tickets Urgentes</p>\n                <p className=\"text-3xl font-bold text-yellow-800 dark:text-yellow-200\">{urgentTickets.length}</p>\n                <div className=\"flex items-center text-xs text-yellow-600 mt-1\">\n                  <Clock className=\"w-3 h-3 mr-1\" />\n                  Próximos ao SLA\n                </div>\n              </div>\n              <Clock className=\"w-12 h-12 text-yellow-600 opacity-60\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-blue-200 bg-blue-50/50 dark:bg-blue-950/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Tempo Médio</p>\n                <p className=\"text-3xl font-bold text-blue-800 dark:text-blue-200\">2.4h</p>\n                <div className=\"flex items-center text-xs text-blue-600 mt-1\">\n                  <ArrowDown className=\"w-3 h-3 mr-1\" />\n                  -15min vs semana anterior\n                </div>\n              </div>\n              <Clock className=\"w-12 h-12 text-blue-600 opacity-60\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <SLAFilters filters={filters} onFiltersChange={setFilters} />\n\n      {/* Seções de Tickets Organizadas por Criticidade */}\n      <div className=\"space-y-6\">\n        {/* Tickets Críticos */}\n        {criticalTickets.length > 0 && (\n          <Card className=\"border-red-300 bg-red-50/30 dark:bg-red-950/10\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center gap-3 text-red-800 dark:text-red-200\">\n                <AlertTriangle className=\"w-6 h-6\" />\n                Tickets Críticos ({criticalTickets.length})\n                <Badge variant=\"destructive\" className=\"pulse-animation\">AÇÃO URGENTE</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4\">\n                {criticalTickets.map(ticket => (\n                  <div key={ticket.id} className=\"ring-2 ring-red-300 rounded-lg\">\n                    <SLATicketCard ticket={ticket} />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tickets Urgentes */}\n        {urgentTickets.length > 0 && (\n          <Card className=\"border-yellow-300 bg-yellow-50/30 dark:bg-yellow-950/10\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center gap-3 text-yellow-800 dark:text-yellow-200\">\n                <Clock className=\"w-6 h-6\" />\n                Tickets Urgentes ({urgentTickets.length})\n                <Badge variant=\"outline\" className=\"border-yellow-500 text-yellow-700\">ATENÇÃO</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4\">\n                {urgentTickets.map(ticket => (\n                  <div key={ticket.id} className=\"ring-1 ring-yellow-300 rounded-lg\">\n                    <SLATicketCard ticket={ticket} />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tickets Normais */}\n        {normalTickets.length > 0 && (\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center gap-3\">\n                <Target className=\"w-6 h-6 text-green-600\" />\n                Tickets Regulares ({normalTickets.length})\n                <Badge variant=\"outline\" className=\"border-green-500 text-green-700\">OK</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4\">\n                {normalTickets.map(ticket => (\n                  <SLATicketCard key={ticket.id} ticket={ticket} />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Seção Inferior com Escalação e Histórico */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        <EscalationQueue />\n        <ViolationHistory />\n      </div>\n\n      {/* Modal de Ticket */}\n      {selectedTicketId && (\n        <TicketDetailModal\n          ticketId={selectedTicketId}\n          isOpen={isTicketModalOpen}\n          onClose={() => {\n            setIsTicketModalOpen(false);\n            setSelectedTicketId(null);\n          }}\n        />\n      )}\n\n      {/* CSS para animações */}\n      <style>{`\n        .pulse-animation {\n          animation: pulse 2s infinite;\n        }\n        \n        @keyframes pulse {\n          0%, 100% {\n            opacity: 1;\n          }\n          50% {\n            opacity: 0.5;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":13201},"client/src/pages/TicketForms.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Plus, Edit2, Trash2, Eye, Settings } from 'lucide-react';\n\ninterface TicketForm {\n  id: string;\n  name: string;\n  source: string;\n  client: string;\n  status: 'active' | 'inactive';\n}\n\nexport default function TicketForms() {\n  const [forms, setForms] = useState<TicketForm[]>([\n    {\n      id: '1',\n      name: 'Formulário Padrão',\n      source: 'Portal de Atendimento',\n      client: '---',\n      status: 'active'\n    },\n    {\n      id: '2',\n      name: 'Portal Cliente e Client',\n      source: 'Portal Cliente e Client',\n      client: '---',\n      status: 'active'\n    },\n    {\n      id: '3',\n      name: 'Não Conformidade',\n      source: 'Script',\n      client: 'Sem Cliente',\n      status: 'inactive'\n    },\n    {\n      id: '4',\n      name: 'Aterrela',\n      source: 'Portal Cliente e Client',\n      client: 'Aterrela',\n      status: 'inactive'\n    },\n    {\n      id: '5',\n      name: 'Formulário Telos',\n      source: 'Portal Cliente e Client',\n      client: 'Telos',\n      status: 'inactive'\n    },\n    {\n      id: '6',\n      name: 'Formulário Opus',\n      source: 'Portal Cliente e Client',\n      client: 'Grupo Opus',\n      status: 'inactive'\n    }\n  ]);\n\n  const [selectedForm, setSelectedForm] = useState<TicketForm | null>(null);\n  const [isCreateMode, setIsCreateMode] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 6;\n\n  const getStatusColor = (status: string) => {\n    return status === 'active' \n      ? 'bg-green-100 text-green-800 border-green-200'\n      : 'bg-red-100 text-red-800 border-red-200';\n  };\n\n  const getStatusIcon = (status: string) => {\n    return status === 'active' ? '✓' : '✗';\n  };\n\n  const totalPages = Math.ceil(forms.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentForms = forms.slice(startIndex, endIndex);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Formulário de Abertura de Tickets</h1>\n          <p className=\"text-gray-600 mt-1\">Gerencie formulários personalizados para diferentes contextos</p>\n        </div>\n        <Button \n          onClick={() => setIsCreateMode(true)}\n          className=\"bg-green-600 hover:bg-green-700 text-white\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Novo Formulário\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Label>Nome</Label>\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"padrao\">Padrão</SelectItem>\n                  <SelectItem value=\"portal\">Portal</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Label>Onde</Label>\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"portal\">Portal de Atendimento</SelectItem>\n                  <SelectItem value=\"client\">Portal Cliente e Client</SelectItem>\n                  <SelectItem value=\"script\">Script</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Button variant=\"outline\">\n              Filtrar\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Forms Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Nome</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Onde</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Cliente</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Status</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Ações</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentForms.map((form) => (\n                  <tr key={form.id} className=\"border-b border-gray-200 hover:bg-gray-50\">\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-medium text-gray-900\">{form.name}</span>\n                    </td>\n                    <td className=\"px-4 py-3 text-gray-600\">\n                      {form.source}\n                    </td>\n                    <td className=\"px-4 py-3 text-center text-gray-600\">\n                      {form.client}\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                          form.status === 'active' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'\n                        }`}>\n                          {getStatusIcon(form.status)}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center justify-center space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-8 h-8 p-0 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                          title=\"Visualizar\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedForm(form)}\n                          className=\"w-8 h-8 p-0 text-green-600 hover:text-green-800 hover:bg-green-50\"\n                          title=\"Editar\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-8 h-8 p-0 text-red-600 hover:text-red-800 hover:bg-red-50\"\n                          title=\"Excluir\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-sm text-gray-600\">\n          Mostrando de {startIndex + 1} à {Math.min(endIndex, forms.length)} de {forms.length} itens\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n            disabled={currentPage === 1}\n          >\n            ‹\n          </Button>\n          {[...Array(totalPages)].map((_, i) => (\n            <Button\n              key={i + 1}\n              variant={currentPage === i + 1 ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setCurrentPage(i + 1)}\n              className=\"w-8\"\n            >\n              {i + 1}\n            </Button>\n          ))}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n            disabled={currentPage === totalPages}\n          >\n            ›\n          </Button>\n        </div>\n      </div>\n\n      {/* Form Edit Modal */}\n      {(selectedForm || isCreateMode) && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">\n                {isCreateMode ? 'Novo Formulário' : 'Editar Formulário'}\n              </h2>\n              <Button\n                variant=\"ghost\"\n                onClick={() => {\n                  setSelectedForm(null);\n                  setIsCreateMode(false);\n                }}\n              >\n                ×\n              </Button>\n            </div>\n\n            <form className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome do Formulário</Label>\n                <Input\n                  id=\"name\"\n                  defaultValue={selectedForm?.name || ''}\n                  placeholder=\"Digite o nome do formulário\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"source\">Onde será usado</Label>\n                <Select defaultValue={selectedForm?.source || ''}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecionar local\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Portal de Atendimento\">Portal de Atendimento</SelectItem>\n                    <SelectItem value=\"Portal Cliente e Client\">Portal Cliente e Client</SelectItem>\n                    <SelectItem value=\"Script\">Script</SelectItem>\n                    <SelectItem value=\"Email\">Email</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"client\">Cliente</Label>\n                <Select defaultValue={selectedForm?.client || ''}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecionar cliente\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"---\">Geral (Todos)</SelectItem>\n                    <SelectItem value=\"Aterrela\">Aterrela</SelectItem>\n                    <SelectItem value=\"Telos\">Telos</SelectItem>\n                    <SelectItem value=\"Grupo Opus\">Grupo Opus</SelectItem>\n                    <SelectItem value=\"Sem Cliente\">Sem Cliente</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"status\"\n                  defaultChecked={selectedForm?.status === 'active'}\n                />\n                <Label htmlFor=\"status\">Formulário Ativo</Label>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Configurar Campos do Formulário\n                </Button>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSelectedForm(null);\n                    setIsCreateMode(false);\n                  }}\n                >\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  {isCreateMode ? 'Criar' : 'Salvar'}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12856},"client/src/pages/UserProfiles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Edit2, Users, UserCheck } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function UserProfiles() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingUser, setEditingUser] = useState<string | null>(null);\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string, role: string }) => {\n      return apiRequest(`/api/users/${userId}`, \"PATCH\", { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingUser(null);\n      toast({\n        title: \"Usuário atualizado\",\n        description: \"Perfil do usuário foi alterado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao atualizar usuário\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'Administrador';\n      case 'supervisor':\n        return 'Supervisor';\n      case 'colaborador':\n        return 'Colaborador';\n      default:\n        return role;\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'destructive';\n      case 'supervisor':\n        return 'default';\n      case 'colaborador':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getRolePermissions = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'Pode abrir e atender tickets, gerenciar sistema';\n      case 'supervisor':\n        return 'Pode abrir e atender tickets do departamento';\n      case 'colaborador':\n        return 'Pode apenas abrir tickets';\n      default:\n        return 'Sem permissões definidas';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <div className=\"p-2 bg-primary/10 rounded-lg\">\n          <Users className=\"w-6 h-6 text-primary\" />\n        </div>\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            Perfis de Usuário\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Gerencie permissões e funções dos usuários\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Administradores</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {users?.filter(u => u.role === 'admin').length || 0}\n            </div>\n            <p className=\"text-xs text-gray-600\">Podem atender qualquer ticket</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Supervisores</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {users?.filter(u => u.role === 'supervisor').length || 0}\n            </div>\n            <p className=\"text-xs text-gray-600\">Atendem tickets do departamento</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Colaboradores</CardTitle>\n            <Users className=\"h-4 w-4 text-gray-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-gray-600\">\n              {users?.filter(u => u.role === 'colaborador').length || 0}\n            </div>\n            <p className=\"text-xs text-gray-600\">Apenas abrem tickets</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Usuários</CardTitle>\n          <CardDescription>\n            Configure as permissões de cada usuário no sistema\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nome</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Perfil Atual</TableHead>\n                <TableHead>Permissões</TableHead>\n                <TableHead>Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users?.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell className=\"font-medium\">{user.name}</TableCell>\n                  <TableCell className=\"text-gray-600\">{user.email}</TableCell>\n                  <TableCell>\n                    {editingUser === user.id ? (\n                      <Select\n                        defaultValue={user.role}\n                        onValueChange={(value) => {\n                          updateUserMutation.mutate({\n                            userId: user.id,\n                            role: value,\n                          });\n                        }}\n                      >\n                        <SelectTrigger className=\"w-40\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"colaborador\">Colaborador</SelectItem>\n                          <SelectItem value=\"supervisor\">Supervisor</SelectItem>\n                          <SelectItem value=\"admin\">Administrador</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <Badge variant={getRoleBadgeVariant(user.role)}>\n                        {getRoleLabel(user.role)}\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-600\">\n                    {getRolePermissions(user.role)}\n                  </TableCell>\n                  <TableCell>\n                    {editingUser === user.id ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setEditingUser(null)}\n                        disabled={updateUserMutation.isPending}\n                      >\n                        Cancelar\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setEditingUser(user.id)}\n                      >\n                        <Edit2 className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Permission Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Explicação dos Perfis</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"destructive\">Administrador</Badge>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                • Pode abrir tickets<br/>\n                • Pode atender qualquer ticket<br/>\n                • Acesso total ao sistema<br/>\n                • Gerencia usuários e configurações\n              </p>\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"default\">Supervisor</Badge>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                • Pode abrir tickets<br/>\n                • Pode atender tickets do seu departamento<br/>\n                • Gerencia tickets do departamento<br/>\n                • Acesso limitado às configurações\n              </p>\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"secondary\">Colaborador</Badge>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                • Pode apenas abrir tickets<br/>\n                • Não pode atender tickets<br/>\n                • Acesso limitado ao sistema<br/>\n                • Pode acompanhar seus próprios tickets\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10132},"client/src/pages/WorkflowApprovals.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Clock, CheckCircle, XCircle, MessageSquare, User, Calendar, ArrowRight } from 'lucide-react';\n\ninterface Ticket {\n  id: string;\n  subject: string;\n  description: string;\n  requester: {\n    name: string;\n    department: string;\n    role: string;\n  };\n  priority: 'Alta' | 'Média' | 'Baixa';\n  category: string;\n  createdAt: string;\n  status: 'Aguardando Aprovação' | 'Aprovado' | 'Rejeitado';\n  currentApprover: string;\n  approvalFlow: ApprovalStep[];\n  comments: Comment[];\n}\n\ninterface ApprovalStep {\n  id: string;\n  approver: string;\n  role: string;\n  status: 'Pendente' | 'Aprovado' | 'Rejeitado';\n  timestamp?: string;\n  comments?: string;\n  order: number;\n}\n\ninterface Comment {\n  id: string;\n  author: string;\n  message: string;\n  timestamp: string;\n  type: 'internal' | 'approval';\n}\n\nexport default function WorkflowApprovals() {\n  const [selectedTicket, setSelectedTicket] = useState<Ticket | null>(null);\n  const [approvalComment, setApprovalComment] = useState('');\n  const [filter, setFilter] = useState('pending');\n\n  const tickets: Ticket[] = [\n    {\n      id: 'TK001234',\n      subject: 'Solicitação de aprovação para implementação',\n      description: 'Esta solicitação necessita de aprovação sequencial dos responsáveis. Implementação de novo sistema requer validação técnica e orçamentária.',\n      requester: {\n        name: 'Marco (Usuário)',\n        department: 'Tecnologia',\n        role: 'Analista'\n      },\n      priority: 'Alta',\n      category: 'Aprovação Sequencial',\n      createdAt: '2025-01-07T18:30:00',\n      status: 'Aguardando Aprovação',\n      currentApprover: 'Felipe (Usuário Operador)',\n      approvalFlow: [\n        {\n          id: '1',\n          approver: 'Aprovação Sequencial',\n          role: 'Supervisor',\n          status: 'Pendente',\n          order: 1\n        },\n        {\n          id: '2',\n          approver: 'Marco (Usuário)',\n          role: 'Solicitante',\n          status: 'Aprovado',\n          timestamp: '2025-01-07T18:30:00',\n          order: 2\n        },\n        {\n          id: '3',\n          approver: 'Felipe (Usuário Operador)',\n          role: 'Operador',\n          status: 'Pendente',\n          order: 3\n        }\n      ],\n      comments: [\n        {\n          id: '1',\n          author: 'Marco (Usuário)',\n          message: 'Solicitação urgente para implementação do novo módulo.',\n          timestamp: '2025-01-07T18:30:00',\n          type: 'internal'\n        }\n      ]\n    },\n    {\n      id: 'TK001235',\n      subject: 'Aprovação de orçamento para projeto',\n      description: 'Necessário aprovação de orçamento no valor de R$ 50.000 para aquisição de equipamentos.',\n      requester: {\n        name: 'Ana Silva',\n        department: 'Financeiro',\n        role: 'Coordenadora'\n      },\n      priority: 'Média',\n      category: 'Aprovação Financeira',\n      createdAt: '2025-01-07T17:00:00',\n      status: 'Aprovado',\n      currentApprover: 'Concluído',\n      approvalFlow: [\n        {\n          id: '1',\n          approver: 'João Santos',\n          role: 'Gerente',\n          status: 'Aprovado',\n          timestamp: '2025-01-07T17:30:00',\n          comments: 'Aprovado conforme orçamento anual',\n          order: 1\n        },\n        {\n          id: '2',\n          approver: 'Maria Costa',\n          role: 'Diretora',\n          status: 'Aprovado',\n          timestamp: '2025-01-07T18:00:00',\n          comments: 'Aprovação final liberada',\n          order: 2\n        }\n      ],\n      comments: []\n    }\n  ];\n\n  const filteredTickets = tickets.filter(ticket => {\n    switch (filter) {\n      case 'pending': return ticket.status === 'Aguardando Aprovação';\n      case 'approved': return ticket.status === 'Aprovado';\n      case 'rejected': return ticket.status === 'Rejeitado';\n      default: return true;\n    }\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'Alta': return 'bg-red-100 text-red-800 border-red-200';\n      case 'Média': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Baixa': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Aguardando Aprovação': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Aprovado': return 'bg-green-100 text-green-800 border-green-200';\n      case 'Rejeitado': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStepIcon = (status: string) => {\n    switch (status) {\n      case 'Aprovado': return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'Rejeitado': return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      case 'Pendente': return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n      default: return <Clock className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const handleApproval = (action: 'approve' | 'reject') => {\n    // Implementation for approval/rejection\n    console.log(`${action} ticket ${selectedTicket?.id} with comment: ${approvalComment}`);\n    setApprovalComment('');\n    setSelectedTicket(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Sistema de Aprovações</h1>\n          <p className=\"text-gray-600 mt-1\">Gerencie tickets que necessitam aprovação</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Select value={filter} onValueChange={setFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todas as solicitações</SelectItem>\n              <SelectItem value=\"pending\">Aguardando aprovação</SelectItem>\n              <SelectItem value=\"approved\">Aprovadas</SelectItem>\n              <SelectItem value=\"rejected\">Rejeitadas</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">\n                  {tickets.filter(t => t.status === 'Aguardando Aprovação').length}\n                </p>\n              </div>\n              <Clock className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Aprovadas</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {tickets.filter(t => t.status === 'Aprovado').length}\n                </p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Rejeitadas</p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {tickets.filter(t => t.status === 'Rejeitado').length}\n                </p>\n              </div>\n              <XCircle className=\"w-8 h-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{tickets.length}</p>\n              </div>\n              <MessageSquare className=\"w-8 h-8 text-gray-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tickets List */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Lista de Solicitações</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 max-h-[600px] overflow-y-auto\">\n            {filteredTickets.map((ticket) => (\n              <div\n                key={ticket.id}\n                className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                  selectedTicket?.id === ticket.id\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedTicket(ticket)}\n              >\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div>\n                    <h3 className=\"font-medium text-gray-900\">{ticket.subject}</h3>\n                    <p className=\"text-sm text-gray-600\">#{ticket.id}</p>\n                  </div>\n                  <Badge className={getStatusColor(ticket.status)}>\n                    {ticket.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <User className=\"w-4 h-4\" />\n                      <span>{ticket.requester.name}</span>\n                    </div>\n                    <Badge className={getPriorityColor(ticket.priority)}>\n                      {ticket.priority}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>{new Date(ticket.createdAt).toLocaleDateString('pt-BR')}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Ticket Details */}\n        {selectedTicket && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Detalhes da Solicitação</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Basic Info */}\n              <div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">#{selectedTicket.id}</h3>\n                <h2 className=\"text-lg font-semibold text-gray-900 mb-3\">{selectedTicket.subject}</h2>\n                <p className=\"text-gray-600 mb-4\">{selectedTicket.description}</p>\n                \n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Solicitante:</span>\n                    <p className=\"font-medium\">{selectedTicket.requester.name}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Departamento:</span>\n                    <p className=\"font-medium\">{selectedTicket.requester.department}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Prioridade:</span>\n                    <Badge className={getPriorityColor(selectedTicket.priority)}>\n                      {selectedTicket.priority}\n                    </Badge>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Data de criação:</span>\n                    <p className=\"font-medium\">\n                      {new Date(selectedTicket.createdAt).toLocaleString('pt-BR')}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Approval Flow */}\n              <div>\n                <h3 className=\"font-medium text-gray-900 mb-4\">Fluxo de Aprovação</h3>\n                <div className=\"space-y-3\">\n                  {selectedTicket.approvalFlow\n                    .sort((a, b) => a.order - b.order)\n                    .map((step, index) => (\n                    <div key={step.id} className=\"flex items-center space-x-3\">\n                      {getStepIcon(step.status)}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium\">{step.approver}</span>\n                          <span className=\"text-sm text-gray-500\">{step.role}</span>\n                        </div>\n                        {step.comments && (\n                          <p className=\"text-sm text-gray-600 mt-1\">{step.comments}</p>\n                        )}\n                        {step.timestamp && (\n                          <p className=\"text-xs text-gray-400\">\n                            {new Date(step.timestamp).toLocaleString('pt-BR')}\n                          </p>\n                        )}\n                      </div>\n                      {index < selectedTicket.approvalFlow.length - 1 && (\n                        <ArrowRight className=\"w-4 h-4 text-gray-400\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Approval Actions */}\n              {selectedTicket.status === 'Aguardando Aprovação' && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"font-medium text-gray-900 mb-3\">Ação de Aprovação</h3>\n                    <div className=\"space-y-3\">\n                      <Textarea\n                        placeholder=\"Adicione um comentário (opcional)\"\n                        value={approvalComment}\n                        onChange={(e) => setApprovalComment(e.target.value)}\n                        className=\"min-h-[80px]\"\n                      />\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          onClick={() => handleApproval('approve')}\n                          className=\"bg-green-600 hover:bg-green-700\"\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          Aprovar\n                        </Button>\n                        <Button\n                          onClick={() => handleApproval('reject')}\n                          variant=\"destructive\"\n                        >\n                          <XCircle className=\"w-4 h-4 mr-2\" />\n                          Rejeitar\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15436},"client/src/utils/cn.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}","size_bytes":170},"client/src/components/auth/CompanyBranding.tsx":{"content":"import React from 'react';\nimport Icon from '@/components/AppIcon';\n\nexport default function CompanyBranding() {\n  return (\n    <div className=\"text-center space-y-4\">\n      {/* Logo */}\n      <div className=\"flex justify-center\">\n        <div className=\"w-16 h-16 bg-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n          <Icon name=\"Ticket\" size={24} className=\"text-white\" />\n        </div>\n      </div>\n\n      {/* Brand Name */}\n      <div className=\"space-y-1\">\n        <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n          TicketFlow Pro\n        </h1>\n        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n          Sistema de Gestão de Tickets\n        </p>\n      </div>\n\n      {/* Version & Environment */}\n      <div className=\"flex items-center justify-center space-x-4 text-xs text-slate-500 dark:text-slate-400\">\n        <span className=\"flex items-center\">\n          <Icon name=\"Globe\" size={12} className=\"mr-1\" />\n          v2.1.0\n        </span>\n        <span className=\"w-1 h-1 bg-slate-300 dark:bg-slate-600 rounded-full\"></span>\n        <span className=\"flex items-center\">\n          <Icon name=\"Shield\" size={12} className=\"mr-1\" />\n          Produção\n        </span>\n      </div>\n    </div>\n  );\n}","size_bytes":1280},"client/src/components/auth/ForgotPasswordForm.tsx":{"content":"import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Icon from '@/components/AppIcon';\nimport Button from '@/components/Button';\nimport { Input } from '@/components/ui/input';\n\ninterface ForgotPasswordFormData {\n  email: string;\n}\n\ninterface ForgotPasswordFormProps {\n  onSwitchToLogin: () => void;\n}\n\nexport default function ForgotPasswordForm({ onSwitchToLogin }: ForgotPasswordFormProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n\n  const { register, handleSubmit, formState: { errors } } = useForm<ForgotPasswordFormData>({\n    defaultValues: {\n      email: ''\n    }\n  });\n\n  const onSubmit = async (data: ForgotPasswordFormData) => {\n    setIsLoading(true);\n    try {\n      // Simular envio de email por 2 segundos\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log('Password reset requested for:', data.email);\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error('Password reset error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto\">\n          <Icon name=\"Mail\" size={24} className=\"text-green-600 dark:text-green-400\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Email enviado!\n          </h3>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Verifique sua caixa de entrada e siga as instruções para redefinir sua senha.\n          </p>\n        </div>\n\n        <div className=\"space-y-3\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onSwitchToLogin}\n            className=\"w-full\"\n            iconName=\"ArrowLeft\"\n            iconPosition=\"left\"\n          >\n            Voltar ao Login\n          </Button>\n          \n          <button\n            onClick={() => setIsSubmitted(false)}\n            className=\"text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n          >\n            Não recebeu o email? Tentar novamente\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n          Esqueceu sua senha?\n        </h3>\n        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n          Digite seu email e enviaremos instruções para redefinir sua senha.\n        </p>\n      </div>\n\n      {/* Email Field */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n          Email\n        </label>\n        <Input\n          {...register('email', {\n            required: 'Email é obrigatório',\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n              message: 'Email inválido'\n            }\n          })}\n          type=\"email\"\n          placeholder=\"seu@email.com\"\n          disabled={isLoading}\n          className={errors.email ? 'border-red-500' : ''}\n        />\n        {errors.email && (\n          <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n            {errors.email.message}\n          </p>\n        )}\n      </div>\n\n      {/* Actions */}\n      <div className=\"space-y-3\">\n        <Button\n          type=\"submit\"\n          variant=\"default\"\n          size=\"lg\"\n          className=\"w-full\"\n          disabled={isLoading}\n          iconName={isLoading ? 'Loader2' : 'Mail'}\n          iconPosition=\"left\"\n        >\n          {isLoading ? 'Enviando...' : 'Enviar Instruções'}\n        </Button>\n\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onSwitchToLogin}\n          className=\"w-full\"\n          disabled={isLoading}\n          iconName=\"ArrowLeft\"\n          iconPosition=\"left\"\n        >\n          Voltar ao Login\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":4269},"client/src/components/auth/LoginForm.tsx":{"content":"import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Icon from '@/components/AppIcon';\nimport Button from '@/components/Button';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useLocation } from 'wouter';\n\ninterface LoginFormData {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n}\n\ninterface LoginFormProps {\n  onSwitchToForgot: () => void;\n}\n\nexport default function LoginForm({ onSwitchToForgot }: LoginFormProps) {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormData>({\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    }\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      // Simular login por 1 segundo\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('Login data:', data);\n      setLocation('/');\n    } catch (error) {\n      console.error('Login error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Email Field */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n          Email\n        </label>\n        <Input\n          {...register('email', {\n            required: 'Email é obrigatório',\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n              message: 'Email inválido'\n            }\n          })}\n          type=\"email\"\n          placeholder=\"seu@email.com\"\n          disabled={isLoading}\n          className={errors.email ? 'border-red-500' : ''}\n        />\n        {errors.email && (\n          <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n            {errors.email.message}\n          </p>\n        )}\n      </div>\n\n      {/* Password Field */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n          Senha\n        </label>\n        <div className=\"relative\">\n          <Input\n            {...register('password', {\n              required: 'Senha é obrigatória',\n              minLength: {\n                value: 6,\n                message: 'Senha deve ter pelo menos 6 caracteres'\n              }\n            })}\n            type={showPassword ? 'text' : 'password'}\n            placeholder=\"Digite sua senha\"\n            disabled={isLoading}\n            className={errors.password ? 'border-red-500' : ''}\n          />\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword(!showPassword)}\n            className=\"absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300\"\n            disabled={isLoading}\n          >\n            <Icon name={showPassword ? 'EyeOff' : 'Eye'} size={16} />\n          </button>\n        </div>\n        {errors.password && (\n          <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n            {errors.password.message}\n          </p>\n        )}\n      </div>\n\n      {/* Remember Me & Forgot Password */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"rememberMe\"\n            {...register('rememberMe')}\n            disabled={isLoading}\n          />\n          <label htmlFor=\"rememberMe\" className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n            Lembrar de mim\n          </label>\n        </div>\n        <button\n          type=\"button\"\n          onClick={onSwitchToForgot}\n          className=\"text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n          disabled={isLoading}\n        >\n          Esqueci minha senha\n        </button>\n      </div>\n\n      {/* Submit Button */}\n      <Button\n        type=\"submit\"\n        variant=\"default\"\n        size=\"lg\"\n        className=\"w-full\"\n        disabled={isLoading}\n        iconName={isLoading ? 'Loader2' : 'LogIn'}\n        iconPosition=\"left\"\n      >\n        {isLoading ? 'Entrando...' : 'Entrar'}\n      </Button>\n\n      {/* Demo Credentials */}\n      <div className=\"mt-4 p-3 bg-slate-50 dark:bg-slate-700 rounded-md border border-slate-200 dark:border-slate-600\">\n        <p className=\"text-xs text-slate-600 dark:text-slate-400 mb-2 font-medium\">\n          Credenciais de demonstração:\n        </p>\n        <div className=\"space-y-1 text-xs text-slate-500 dark:text-slate-400\">\n          <p><strong>Email:</strong> admin@ticketflow.com</p>\n          <p><strong>Senha:</strong> admin123</p>\n        </div>\n      </div>\n    </form>\n  );\n}","size_bytes":4887},"client/src/components/auth/SecurityIndicators.tsx":{"content":"import React from 'react';\nimport Icon from '@/components/AppIcon';\n\nexport default function SecurityIndicators() {\n  const indicators = [\n    {\n      icon: 'Lock',\n      text: 'Conexão Segura SSL',\n      status: 'active'\n    },\n    {\n      icon: 'Shield',\n      text: 'Autenticação 2FA Disponível',\n      status: 'available'\n    },\n    {\n      icon: 'Server',\n      text: 'Servidor: São Paulo',\n      status: 'info'\n    }\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n      <h3 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-3\">\n        Indicadores de Segurança\n      </h3>\n      \n      <div className=\"space-y-2\">\n        {indicators.map((indicator, index) => (\n          <div key={index} className=\"flex items-center space-x-2 text-xs\">\n            <div className={`w-2 h-2 rounded-full ${\n              indicator.status === 'active' ? 'bg-green-500' :\n              indicator.status === 'available' ? 'bg-blue-500' :\n              'bg-slate-400'\n            }`} />\n            <Icon \n              name={indicator.icon as any} \n              size={12} \n              className=\"text-slate-500 dark:text-slate-400\" \n            />\n            <span className=\"text-slate-600 dark:text-slate-400\">\n              {indicator.text}\n            </span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-3 pt-3 border-t border-slate-200 dark:border-slate-700\">\n        <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n          Última verificação: {new Date().toLocaleString('pt-BR')}\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":1665},"client/src/components/auth/TenantSelector.tsx":{"content":"import React from 'react';\nimport Icon from '@/components/AppIcon';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ninterface Tenant {\n  id: string;\n  name: string;\n  location: string;\n}\n\ninterface TenantSelectorProps {\n  tenants: Tenant[];\n  selectedTenant: string;\n  onTenantChange: (tenantId: string) => void;\n}\n\nexport default function TenantSelector({ tenants, selectedTenant, onTenantChange }: TenantSelectorProps) {\n  const selectedTenantData = tenants.find(t => t.id === selectedTenant);\n\n  const tenantOptions = tenants.map(tenant => ({\n    value: tenant.id,\n    label: tenant.name,\n    description: tenant.location\n  }));\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n      <div className=\"flex items-center space-x-2 mb-3\">\n        <Icon name=\"Building2\" size={16} className=\"text-slate-600 dark:text-slate-400\" />\n        <h3 className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n          Selecionar Organização\n        </h3>\n      </div>\n\n      <Select value={selectedTenant} onValueChange={onTenantChange}>\n        <SelectTrigger>\n          <SelectValue placeholder=\"Selecione uma organização\" />\n        </SelectTrigger>\n        <SelectContent>\n          {tenantOptions.map((option) => (\n            <SelectItem key={option.value} value={option.value}>\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      {selectedTenantData && (\n        <div className=\"mt-3 p-2 bg-slate-50 dark:bg-slate-700 rounded border border-slate-200 dark:border-slate-600\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                {selectedTenantData.name}\n              </p>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                {selectedTenantData.location}\n              </p>\n            </div>\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2188},"client/src/components/sla/EscalationQueue.tsx":{"content":"import React from 'react';\nimport Icon from '../AppIcon';\nimport Button from '../Button';\n\ninterface EscalationItem {\n  id: string;\n  ticketId: string;\n  title: string;\n  priority: 'high' | 'critical';\n  currentAssignee: string;\n  escalationTime: Date;\n  nextLevel: string;\n  reason: string;\n}\n\nexport default function EscalationQueue() {\n  const escalationQueue: EscalationItem[] = [\n    {\n      id: '1',\n      ticketId: 'TK-1001',\n      title: 'Sistema de pagamento instável',\n      priority: 'critical',\n      currentAssignee: 'João Silva',\n      escalationTime: new Date(Date.now() + 30 * 60 * 1000), // 30 min futuro\n      nextLevel: 'Gerência TI',\n      reason: 'SLA crítico violado'\n    },\n    {\n      id: '2',\n      ticketId: 'TK-999',\n      title: 'Falha no backup automático',\n      priority: 'high',\n      currentAssignee: 'Maria Santos',\n      escalationTime: new Date(Date.now() + 90 * 60 * 1000), // 90 min futuro\n      nextLevel: 'Coordenação',\n      reason: 'Sem resposta por 6h'\n    }\n  ];\n\n  const priorityColors = {\n    high: 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300',\n    critical: 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300'\n  };\n\n  const priorityLabels = {\n    high: 'Alta',\n    critical: 'Crítica'\n  };\n\n  const formatTimeUntilEscalation = (date: Date) => {\n    const now = new Date();\n    const diffMs = date.getTime() - now.getTime();\n    \n    if (diffMs <= 0) {\n      return 'Pronto para escalar';\n    }\n    \n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const hours = Math.floor(diffMinutes / 60);\n    const minutes = diffMinutes % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const isReadyToEscalate = (date: Date) => {\n    return date.getTime() <= Date.now();\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"ArrowUp\" size={18} className=\"text-orange-600 dark:text-orange-400\" />\n          <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Fila de Escalação\n          </h3>\n        </div>\n        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300\">\n          {escalationQueue.length} tickets\n        </span>\n      </div>\n\n      <div className=\"space-y-3\">\n        {escalationQueue.map((item) => {\n          const readyToEscalate = isReadyToEscalate(item.escalationTime);\n          \n          return (\n            <div \n              key={item.id}\n              className={`border rounded-lg p-3 transition-all ${\n                readyToEscalate \n                  ? 'border-red-200 dark:border-red-800 bg-red-50/50 dark:bg-red-900/10' \n                  : 'border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-750'\n              }`}\n            >\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                      {item.ticketId}\n                    </span>\n                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${priorityColors[item.priority]}`}>\n                      {priorityLabels[item.priority]}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 line-clamp-2 mb-2\">\n                    {item.title}\n                  </p>\n                </div>\n              </div>\n\n              {/* Escalation Info */}\n              <div className=\"space-y-2 text-xs text-slate-500 dark:text-slate-400\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Icon name=\"User\" size={12} className=\"mr-1\" />\n                    Atual: {item.currentAssignee}\n                  </span>\n                  <span className=\"flex items-center\">\n                    <Icon name=\"ArrowRight\" size={12} className=\"mr-1\" />\n                    Próximo: {item.nextLevel}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Icon name=\"AlertCircle\" size={12} className=\"mr-1\" />\n                    {item.reason}\n                  </span>\n                  <span className={`flex items-center font-medium ${\n                    readyToEscalate \n                      ? 'text-red-600 dark:text-red-400' \n                      : 'text-slate-600 dark:text-slate-400'\n                  }`}>\n                    <Icon name=\"Clock\" size={12} className=\"mr-1\" />\n                    {formatTimeUntilEscalation(item.escalationTime)}\n                  </span>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"mt-3 flex items-center space-x-2\">\n                {readyToEscalate ? (\n                  <>\n                    <Button\n                      variant=\"default\"\n                      size=\"sm\"\n                      iconName=\"ArrowUp\"\n                      iconPosition=\"left\"\n                      className=\"flex-1 bg-red-600 hover:bg-red-700 text-white\"\n                    >\n                      Escalar Agora\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      iconName=\"Clock\"\n                      iconPosition=\"left\"\n                    >\n                      Adiar\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      iconName=\"Eye\"\n                      iconPosition=\"left\"\n                      className=\"flex-1\"\n                    >\n                      Ver Ticket\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      iconName=\"ArrowUp\"\n                      iconPosition=\"left\"\n                    >\n                      Escalar\n                    </Button>\n                  </>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {escalationQueue.length === 0 && (\n        <div className=\"text-center py-8\">\n          <Icon name=\"CheckCircle\" size={48} className=\"text-green-500 dark:text-green-400 mx-auto mb-3\" />\n          <h4 className=\"text-lg font-medium text-slate-900 dark:text-slate-100 mb-1\">\n            Fila Vazia\n          </h4>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Nenhum ticket aguardando escalação\n          </p>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"mt-4 pt-4 border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Settings\"\n            iconPosition=\"left\"\n            className=\"text-xs\"\n          >\n            Config. Escalação\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"Bell\"\n            iconPosition=\"left\"\n            className=\"text-xs\"\n          >\n            Notificações\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7887},"client/src/components/sla/SLAFilters.tsx":{"content":"import React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Icon from '../AppIcon';\n\ninterface SLAFiltersState {\n  priority: string;\n  status: string;\n  department: string;\n  timeRange: string;\n}\n\ninterface SLAFiltersProps {\n  filters: SLAFiltersState;\n  onFiltersChange: (filters: SLAFiltersState) => void;\n}\n\nexport default function SLAFilters({ filters, onFiltersChange }: SLAFiltersProps) {\n  const priorityOptions = [\n    { value: 'all', label: 'Todas as Prioridades' },\n    { value: 'critical', label: 'Crítica' },\n    { value: 'high', label: 'Alta' },\n    { value: 'medium', label: 'Média' },\n    { value: 'low', label: 'Baixa' }\n  ];\n\n  const statusOptions = [\n    { value: 'all', label: 'Todos os Status' },\n    { value: 'open', label: 'Aberto' },\n    { value: 'in_progress', label: 'Em Andamento' },\n    { value: 'pending', label: 'Pendente' },\n    { value: 'resolved', label: 'Resolvido' }\n  ];\n\n  const departmentOptions = [\n    { value: 'all', label: 'Todos os Departamentos' },\n    { value: 'TI', label: 'TI' },\n    { value: 'RH', label: 'Recursos Humanos' },\n    { value: 'Financeiro', label: 'Financeiro' },\n    { value: 'Vendas', label: 'Vendas' },\n    { value: 'Suporte', label: 'Suporte' }\n  ];\n\n  const timeRangeOptions = [\n    { value: '1h', label: 'Última Hora' },\n    { value: '24h', label: 'Últimas 24 Horas' },\n    { value: '7d', label: 'Últimos 7 Dias' },\n    { value: '30d', label: 'Últimos 30 Dias' },\n    { value: 'all', label: 'Todos os Períodos' }\n  ];\n\n  const handleFilterChange = (key: keyof SLAFiltersState, value: string) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value\n    });\n  };\n\n  const clearFilters = () => {\n    onFiltersChange({\n      priority: 'all',\n      status: 'all',\n      department: 'all',\n      timeRange: '24h'\n    });\n  };\n\n  const hasActiveFilters = filters.priority !== 'all' || \n                          filters.status !== 'all' || \n                          filters.department !== 'all' || \n                          filters.timeRange !== '24h';\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Filter\" size={18} className=\"text-slate-600 dark:text-slate-400\" />\n          <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Filtros SLA\n          </h3>\n        </div>\n        \n        {hasActiveFilters && (\n          <button\n            onClick={clearFilters}\n            className=\"text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n          >\n            Limpar Filtros\n          </button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Prioridade\n          </label>\n          <Select value={filters.priority} onValueChange={(value) => handleFilterChange('priority', value)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Selecione prioridade\" />\n            </SelectTrigger>\n            <SelectContent>\n              {priorityOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Status\n          </label>\n          <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Selecione status\" />\n            </SelectTrigger>\n            <SelectContent>\n              {statusOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Departamento\n          </label>\n          <Select value={filters.department} onValueChange={(value) => handleFilterChange('department', value)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Selecione departamento\" />\n            </SelectTrigger>\n            <SelectContent>\n              {departmentOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Período\n          </label>\n          <Select value={filters.timeRange} onValueChange={(value) => handleFilterChange('timeRange', value)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Selecione período\" />\n            </SelectTrigger>\n            <SelectContent>\n              {timeRangeOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-4 pt-4 border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-slate-600 dark:text-slate-400\">Ações rápidas:</span>\n          <button\n            onClick={() => onFiltersChange({ ...filters, status: 'open', timeRange: '24h' })}\n            className=\"px-3 py-1 text-xs bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300 rounded-full hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors\"\n          >\n            Violações SLA\n          </button>\n          <button\n            onClick={() => onFiltersChange({ ...filters, priority: 'critical', status: 'open' })}\n            className=\"px-3 py-1 text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300 rounded-full hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors\"\n          >\n            Tickets Críticos\n          </button>\n          <button\n            onClick={() => onFiltersChange({ ...filters, timeRange: '1h' })}\n            className=\"px-3 py-1 text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-full hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors\"\n          >\n            Urgentes\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7014},"client/src/components/sla/SLAMetrics.tsx":{"content":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport Icon from '../AppIcon';\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  change: number;\n  changeType: 'positive' | 'negative' | 'neutral';\n  icon: string;\n  color: 'blue' | 'green' | 'red' | 'yellow';\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({ title, value, change, changeType, icon, color }) => {\n  const colorClasses = {\n    blue: 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400',\n    green: 'bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400',\n    red: 'bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400',\n    yellow: 'bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400'\n  };\n\n  const changeColor = changeType === 'positive' ? 'text-green-600 dark:text-green-400' :\n                     changeType === 'negative' ? 'text-red-600 dark:text-red-400' :\n                     'text-slate-500 dark:text-slate-400';\n\n  const changeIcon = changeType === 'positive' ? 'TrendingUp' :\n                    changeType === 'negative' ? 'TrendingDown' :\n                    'Minus';\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorClasses[color]}`}>\n          <Icon name={icon as any} size={24} />\n        </div>\n        <div className={`flex items-center space-x-1 text-sm ${changeColor}`}>\n          <Icon name={changeIcon as any} size={14} />\n          <span>{Math.abs(change)}%</span>\n        </div>\n      </div>\n      \n      <div className=\"mt-4\">\n        <h3 className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n          {title}\n        </h3>\n        <p className=\"text-2xl font-bold text-slate-900 dark:text-slate-100 mt-1\">\n          {value}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default function SLAMetrics() {\n  // Buscar dados reais dos tickets\n  const { data: tickets = [] } = useQuery<any[]>({\n    queryKey: ['/api/tickets']\n  });\n\n  const { data: priorityConfigs = [] } = useQuery<any[]>({\n    queryKey: ['/api/config/priority']\n  });\n\n  // Calcular métricas reais baseadas nos tickets\n  const totalTickets = tickets.length;\n  const openTickets = tickets.filter(t => t.status !== 'resolved').length;\n  \n  // Tickets com SLA violado baseado nos dados reais do backend\n  const violatedTickets = tickets.filter(ticket => {\n    return ticket.slaStatus === 'violated';\n  }).length;\n\n  // Calcular porcentagem de cumprimento SLA\n  const slaCompliance = totalTickets > 0 ? ((totalTickets - violatedTickets) / totalTickets * 100).toFixed(1) : '100';\n  \n  // Calcular tempo médio de resposta baseado nos dados SLA reais\n  const avgResponseTime = tickets.length > 0 ? \n    (tickets.reduce((acc, ticket) => {\n      if (ticket.slaHoursRemaining !== undefined && ticket.slaHoursTotal) {\n        const hoursUsed = ticket.slaHoursTotal - ticket.slaHoursRemaining;\n        return acc + Math.max(hoursUsed, 0);\n      }\n      return acc + 0;\n    }, 0) / tickets.length).toFixed(1) : '0';\n\n  // Tickets críticos necessitando atenção\n  const criticalTickets = tickets.filter(ticket => {\n    return ticket.priority === 'critical' && ticket.status !== 'resolved';\n  }).length;\n\n  const metrics = [\n    {\n      title: 'Cumprimento SLA',\n      value: `${slaCompliance}%`,\n      change: 2.1,\n      changeType: parseFloat(slaCompliance) >= 95 ? 'positive' : 'negative' as const,\n      icon: 'Target',\n      color: parseFloat(slaCompliance) >= 95 ? 'green' : 'red' as const\n    },\n    {\n      title: 'Tempo Médio Resposta',\n      value: `${avgResponseTime}h`,\n      change: -15.3,\n      changeType: 'positive' as const,\n      icon: 'Clock',\n      color: 'blue' as const\n    },\n    {\n      title: 'Violações SLA',\n      value: violatedTickets.toString(),\n      change: 12.5,\n      changeType: violatedTickets === 0 ? 'positive' : 'negative' as const,\n      icon: 'AlertTriangle',\n      color: 'red' as const\n    },\n    {\n      title: 'Críticos Abertos',\n      value: criticalTickets.toString(),\n      change: -20.0,\n      changeType: criticalTickets === 0 ? 'positive' : 'negative' as const,\n      icon: 'AlertCircle',\n      color: criticalTickets === 0 ? 'green' : 'yellow' as const\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {metrics.map((metric, index) => (\n        <MetricCard key={index} {...metric} />\n      ))}\n    </div>\n  );\n}","size_bytes":4613},"client/src/components/sla/SLATicketCard.tsx":{"content":"import React from 'react';\nimport Icon from '../AppIcon';\nimport Button from '../Button';\n\nimport { TicketWithDetails } from '@shared/schema';\n\ninterface SLATicketCardProps {\n  ticket: TicketWithDetails & {\n    slaHoursRemaining?: number;\n    slaHoursTotal?: number;\n    slaStatus?: 'met' | 'at_risk' | 'violated';\n    slaSource?: string;\n  };\n}\n\nexport default function SLATicketCard({ ticket }: SLATicketCardProps) {\n  const priorityColors = {\n    low: 'bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-400',\n    medium: 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300',\n    high: 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300',\n    critical: 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300'\n  };\n\n  const statusColors = {\n    open: 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300',\n    in_progress: 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300',\n    pending: 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300',\n    resolved: 'bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-400'\n  };\n\n  const statusLabels = {\n    open: 'Aberto',\n    in_progress: 'Em Andamento',\n    pending: 'Pendente',\n    resolved: 'Resolvido'\n  };\n\n  const priorityLabels = {\n    low: 'Baixa',\n    medium: 'Média',\n    high: 'Alta',\n    critical: 'Crítica'\n  };\n\n  const formatTimeRemaining = (hoursRemaining: number) => {\n    if (hoursRemaining <= 0) {\n      const hoursViolated = Math.abs(hoursRemaining);\n      return `Vencido há ${hoursViolated.toFixed(1)}h`;\n    }\n    \n    const hours = Math.floor(hoursRemaining);\n    const minutes = Math.floor((hoursRemaining - hours) * 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m restantes`;\n    } else {\n      return `${minutes}m restantes`;\n    }\n  };\n\n  const getTimeColor = (hoursRemaining: number) => {\n    if (hoursRemaining <= 0) return 'text-red-600 dark:text-red-400';\n    if (hoursRemaining <= 1) return 'text-yellow-600 dark:text-yellow-400'; // < 1 hora\n    return 'text-green-600 dark:text-green-400';\n  };\n\n  // Usar dados reais do SLA calculado no backend\n  const hoursRemaining = ticket.slaHoursRemaining || 0;\n  const hoursTotal = ticket.slaHoursTotal || 4;\n  const slaStatus = ticket.slaStatus || 'met';\n  \n  const calculateProgress = () => {\n    if (hoursTotal <= 0) return 0;\n    const hoursElapsed = hoursTotal - hoursRemaining;\n    const progress = (hoursElapsed / hoursTotal) * 100;\n    return Math.min(Math.max(progress, 0), 100);\n  };\n\n  const progress = calculateProgress();\n  const isViolation = slaStatus === 'violated';\n  const isUrgent = slaStatus === 'at_risk';\n  const isCritical = ticket.priority === 'critical';\n\n  // Determinar estilo do card baseado na criticidade\n  const getCardStyles = () => {\n    if (isViolation) {\n      return 'border-red-500 dark:border-red-400 bg-gradient-to-r from-red-50 via-red-50 to-red-100 dark:from-red-950/30 dark:via-red-950/20 dark:to-red-900/30 shadow-lg shadow-red-200/50 dark:shadow-red-900/50';\n    }\n    if (isCritical) {\n      return 'border-orange-500 dark:border-orange-400 bg-gradient-to-r from-orange-50 via-orange-50 to-orange-100 dark:from-orange-950/30 dark:via-orange-950/20 dark:to-orange-900/30 shadow-md shadow-orange-200/30 dark:shadow-orange-900/30';\n    }\n    if (isUrgent) {\n      return 'border-yellow-400 dark:border-yellow-400 bg-gradient-to-r from-yellow-50 via-yellow-50 to-yellow-100 dark:from-yellow-950/30 dark:via-yellow-950/20 dark:to-yellow-900/30 shadow-md shadow-yellow-200/30 dark:shadow-yellow-900/30';\n    }\n    if (ticket.escalated) {\n      return 'border-purple-400 dark:border-purple-400 bg-gradient-to-r from-purple-50 via-purple-50 to-purple-100 dark:from-purple-950/30 dark:via-purple-950/20 dark:to-purple-900/30 shadow-md shadow-purple-200/30 dark:shadow-purple-900/30';\n    }\n    return 'border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800';\n  };\n\n  return (\n    <div className={`rounded-lg border-2 p-4 transition-all duration-300 hover:shadow-lg hover:scale-[1.02] ${getCardStyles()}`}>\n      {/* Header com Indicadores Críticos */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2 flex-wrap gap-1\">\n            <span className=\"text-sm font-mono text-slate-600 dark:text-slate-400 bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\">\n              {ticket.ticketNumber}\n            </span>\n            \n            {/* Indicadores de Status Crítico */}\n            {isViolation && (\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-bold bg-red-600 text-white shadow-lg animate-pulse\">\n                <Icon name=\"AlertTriangle\" size={14} className=\"mr-1\" />\n                VIOLAÇÃO ATIVA\n              </span>\n            )}\n            \n            {isCritical && !isViolation && (\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-bold bg-red-500 text-white shadow-md\">\n                <Icon name=\"Zap\" size={14} className=\"mr-1\" />\n                CRÍTICO\n              </span>\n            )}\n            \n            {isUrgent && !isViolation && !isCritical && (\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-bold bg-orange-500 text-white shadow-md\">\n                <Icon name=\"Clock\" size={14} className=\"mr-1\" />\n                URGENTE\n              </span>\n            )}\n            \n            {ticket.escalated && (\n              <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-bold bg-purple-500 text-white shadow-md\">\n                <Icon name=\"ArrowUp\" size={14} className=\"mr-1\" />\n                ESCALADO\n              </span>\n            )}\n          </div>\n          \n          <h3 className={`text-lg font-bold line-clamp-2 ${\n            isViolation ? 'text-red-800 dark:text-red-200' :\n            isCritical ? 'text-orange-800 dark:text-orange-200' :\n            'text-slate-900 dark:text-slate-100'\n          }`}>\n            {ticket.subject}\n          </h3>\n        </div>\n      </div>\n\n      {/* Priority & Status Badges */}\n      <div className=\"flex items-center space-x-2 mb-3\">\n        <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${priorityColors[ticket.priority]}`}>\n          <Icon name=\"Flag\" size={12} className=\"mr-1\" />\n          {priorityLabels[ticket.priority]}\n        </span>\n        <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${statusColors[ticket.status]}`}>\n          {statusLabels[ticket.status]}\n        </span>\n        <span className=\"inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-400\">\n          {ticket.department?.name || 'N/A'}\n        </span>\n      </div>\n\n      {/* SLA Progress Visual Melhorado */}\n      <div className=\"mb-4 p-3 bg-slate-50 dark:bg-slate-800/50 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <Icon name=\"Target\" size={16} className=\"text-slate-600 dark:text-slate-400\" />\n            <span className=\"text-sm font-semibold text-slate-700 dark:text-slate-300\">\n              Progresso SLA\n            </span>\n          </div>\n          <div className={`px-2 py-1 rounded-full text-xs font-bold ${\n            isViolation \n              ? 'bg-red-600 text-white animate-pulse' \n              : isUrgent\n                ? 'bg-orange-500 text-white'\n                : 'bg-green-500 text-white'\n          }`}>\n            {formatTimeRemaining(hoursRemaining)}\n          </div>\n        </div>\n        \n        {/* Barra de Progresso Aprimorada */}\n        <div className=\"relative w-full bg-slate-300 dark:bg-slate-600 rounded-full h-4 overflow-hidden shadow-inner\">\n          <div \n            className={`h-4 rounded-full transition-all duration-700 relative ${\n              isViolation \n                ? 'bg-gradient-to-r from-red-500 via-red-600 to-red-700' \n                : progress > 80 \n                  ? 'bg-gradient-to-r from-orange-400 via-orange-500 to-orange-600'\n                  : 'bg-gradient-to-r from-green-400 via-green-500 to-green-600'\n            }`}\n            style={{ width: `${Math.min(progress, 100)}%` }}\n          >\n            {/* Efeito de brilho para violações */}\n            {isViolation && (\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-ping\"></div>\n            )}\n            \n            {/* Indicador de perigo quando próximo ao limite */}\n            {progress > 90 && !isViolation && (\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-yellow-300/40 to-transparent animate-pulse\"></div>\n            )}\n          </div>\n          \n          {/* Marco de 100% */}\n          <div className=\"absolute top-0 right-0 w-0.5 h-4 bg-slate-500 dark:bg-slate-400\"></div>\n        </div>\n        \n        {/* Informações adicionais */}\n        <div className=\"flex justify-between items-center mt-2 text-xs\">\n          <span className=\"text-slate-500 dark:text-slate-400 font-medium\">\n            {progress.toFixed(1)}% do tempo utilizado\n          </span>\n          <span className=\"text-slate-500 dark:text-slate-400\">\n            Meta: {hoursTotal}h\n          </span>\n        </div>\n      </div>\n\n      {/* Assignee & Actions Melhorados */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold text-white ${\n            isViolation ? 'bg-red-500' : \n            isCritical ? 'bg-orange-500' : \n            'bg-blue-500'\n          }`}>\n            {ticket.assignedToUser?.name ? ticket.assignedToUser.name.split(' ').map(n => n[0]).join('') : 'NA'}\n          </div>\n          <div>\n            <div className=\"text-sm font-semibold text-slate-900 dark:text-slate-100\">\n              {ticket.assignedToUser?.name || 'Não atribuído'}\n            </div>\n            <div className=\"text-xs text-slate-500 dark:text-slate-400\">\n              Responsável\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"text-xs\"\n            onClick={() => {\n              const event = new CustomEvent('open-ticket-modal', { \n                detail: { ticketId: ticket.id } \n              });\n              window.dispatchEvent(event);\n            }}\n          >\n            <Icon name=\"Eye\" size={14} className=\"mr-1\" />\n            Ver Detalhes\n          </Button>\n          \n          {isViolation && (\n            <Button \n              variant=\"destructive\" \n              size=\"sm\" \n              className=\"text-xs font-bold animate-pulse\"\n              onClick={() => {\n                window.location.href = `/?ticket=${ticket.id}&action=urgent`;\n                // Mostrar toast de alerta\n                const event = new CustomEvent('show-urgent-alert', { \n                  detail: { ticketId: ticket.id, title: ticket.subject } \n                });\n                window.dispatchEvent(event);\n              }}\n            >\n              <Icon name=\"AlertTriangle\" size={14} className=\"mr-1\" />\n              AÇÃO URGENTE\n            </Button>\n          )}\n          \n          {isCritical && !isViolation && (\n            <Button \n              variant=\"default\" \n              size=\"sm\" \n              className=\"bg-orange-600 hover:bg-orange-700 text-xs font-bold\"\n              onClick={() => window.location.href = `/?ticket=${ticket.id}&priority=critical`}\n            >\n              <Icon name=\"Zap\" size={14} className=\"mr-1\" />\n              PRIORITÁRIO\n            </Button>\n          )}\n          \n          {isUrgent && !isViolation && !isCritical && (\n            <Button \n              variant=\"secondary\" \n              size=\"sm\" \n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white text-xs font-bold\"\n              onClick={() => window.location.href = `/?ticket=${ticket.id}&priority=urgent`}\n            >\n              <Icon name=\"Clock\" size={14} className=\"mr-1\" />\n              URGENTE\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Created Time */}\n      <div className=\"mt-3 pt-3 border-t border-slate-200 dark:border-slate-700\">\n        <span className=\"text-xs text-slate-500 dark:text-slate-400\">\n          Criado em {new Date(ticket.createdAt).toLocaleString('pt-BR')}\n        </span>\n      </div>\n    </div>\n  );\n}","size_bytes":12896},"client/src/components/sla/ViolationHistory.tsx":{"content":"import React from 'react';\nimport Icon from '../AppIcon';\n\ninterface ViolationRecord {\n  id: string;\n  ticketId: string;\n  title: string;\n  violationTime: Date;\n  department: string;\n  assignee: string;\n  impact: 'low' | 'medium' | 'high';\n}\n\nexport default function ViolationHistory() {\n  const violations: ViolationRecord[] = [\n    {\n      id: '1',\n      ticketId: 'TK-1001',\n      title: 'Sistema de pagamento instável',\n      violationTime: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      department: 'TI',\n      assignee: 'João Silva',\n      impact: 'high'\n    },\n    {\n      id: '2',\n      ticketId: 'TK-998',\n      title: 'Erro no relatório mensal',\n      violationTime: new Date(Date.now() - 6 * 60 * 60 * 1000),\n      department: 'Financeiro',\n      assignee: 'Maria Santos',\n      impact: 'medium'\n    },\n    {\n      id: '3',\n      ticketId: 'TK-995',\n      title: 'Acesso negado no sistema',\n      violationTime: new Date(Date.now() - 12 * 60 * 60 * 1000),\n      department: 'RH',\n      assignee: 'Carlos Oliveira',\n      impact: 'low'\n    }\n  ];\n\n  const impactColors = {\n    low: 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300',\n    medium: 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300',\n    high: 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300'\n  };\n\n  const impactLabels = {\n    low: 'Baixo',\n    medium: 'Médio',\n    high: 'Alto'\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    \n    if (diffHours < 1) {\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\n      return `${diffMinutes}m atrás`;\n    } else if (diffHours < 24) {\n      return `${diffHours}h atrás`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays}d atrás`;\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"AlertTriangle\" size={18} className=\"text-red-600 dark:text-red-400\" />\n          <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Histórico de Violações\n          </h3>\n        </div>\n        <span className=\"text-sm text-slate-500 dark:text-slate-400\">\n          Últimas 24h\n        </span>\n      </div>\n\n      <div className=\"space-y-3\">\n        {violations.map((violation) => (\n          <div \n            key={violation.id}\n            className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3 hover:bg-slate-50 dark:hover:bg-slate-750 transition-colors\"\n          >\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                    {violation.ticketId}\n                  </span>\n                  <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${impactColors[violation.impact]}`}>\n                    {impactLabels[violation.impact]}\n                  </span>\n                </div>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400 line-clamp-2\">\n                  {violation.title}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between text-xs text-slate-500 dark:text-slate-400\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"flex items-center\">\n                  <Icon name=\"Building2\" size={12} className=\"mr-1\" />\n                  {violation.department}\n                </span>\n                <span className=\"flex items-center\">\n                  <Icon name=\"User\" size={12} className=\"mr-1\" />\n                  {violation.assignee}\n                </span>\n              </div>\n              <span className=\"flex items-center\">\n                <Icon name=\"Clock\" size={12} className=\"mr-1\" />\n                {formatTimeAgo(violation.violationTime)}\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-4 pt-4 border-t border-slate-200 dark:border-slate-700\">\n        <button className=\"w-full text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\">\n          Ver Histórico Completo\n        </button>\n      </div>\n\n      {/* Summary */}\n      <div className=\"mt-4 p-3 bg-slate-50 dark:bg-slate-750 rounded-lg\">\n        <div className=\"grid grid-cols-3 gap-4 text-center\">\n          <div>\n            <p className=\"text-lg font-bold text-red-600 dark:text-red-400\">3</p>\n            <p className=\"text-xs text-slate-600 dark:text-slate-400\">Hoje</p>\n          </div>\n          <div>\n            <p className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">12</p>\n            <p className=\"text-xs text-slate-600 dark:text-slate-400\">Esta Semana</p>\n          </div>\n          <div>\n            <p className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">45</p>\n            <p className=\"text-xs text-slate-600 dark:text-slate-400\">Este Mês</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5475},"client/src/components/tickets/CategorizationSection.tsx":{"content":"import React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Icon from '@/components/AppIcon';\n\ninterface Category {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface Subject {\n  id: string;\n  categoryId: string;\n  name: string;\n  description: string;\n}\n\ninterface TicketType {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface Priority {\n  id: string;\n  name: string;\n  level: string;\n  description: string;\n  slaInfo?: string;\n}\n\ninterface CategorizationSectionProps {\n  formData: any;\n  onFormChange: (field: string, value: any) => void;\n  errors: any;\n  categories: Category[];\n  subjects: Subject[];\n  ticketTypes: TicketType[];\n  priorities: Priority[];\n}\n\nexport default function CategorizationSection({\n  formData,\n  onFormChange,\n  errors,\n  categories,\n  subjects,\n  ticketTypes,\n  priorities\n}: CategorizationSectionProps) {\n  const handleInputChange = (field: string, value: any) => {\n    onFormChange(field, value);\n  };\n\n  const filteredSubjects = formData?.category ? subjects?.filter(subject => subject?.categoryId === formData?.category) : [];\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical': return 'text-red-600';\n      case 'high': return 'text-orange-600';\n      case 'medium': return 'text-yellow-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-slate-500';\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'critical': return 'AlertTriangle';\n      case 'high': return 'ArrowUp';\n      case 'medium': return 'Minus';\n      case 'low': return 'ArrowDown';\n      default: return 'Circle';\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n          <Icon name=\"Tag\" size={20} className=\"text-green-600 dark:text-green-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Categorização\n          </h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Classifique o tipo e prioridade do chamado\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Categoria *\n          </label>\n          <Select \n            value={formData?.category || ''} \n            onValueChange={(value) => {\n              handleInputChange('category', value);\n              handleInputChange('subject', '');\n            }}\n          >\n            <SelectTrigger className={errors?.category ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione a categoria\" />\n            </SelectTrigger>\n            <SelectContent>\n              {categories?.map(category => (\n                <SelectItem key={category?.id} value={category?.id}>\n                  <div>\n                    <div className=\"font-medium\">{category?.name}</div>\n                    <div className=\"text-xs text-slate-500\">{category?.description}</div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors?.category && (\n            <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n              {errors?.category}\n            </p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Assunto *\n          </label>\n          <Select \n            value={formData?.subject || ''} \n            onValueChange={(value) => handleInputChange('subject', value)}\n            disabled={!formData?.category}\n          >\n            <SelectTrigger className={errors?.subject ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione o assunto\" />\n            </SelectTrigger>\n            <SelectContent>\n              {filteredSubjects?.map(subject => (\n                <SelectItem key={subject?.id} value={subject?.id}>\n                  <div>\n                    <div className=\"font-medium\">{subject?.name}</div>\n                    <div className=\"text-xs text-slate-500\">{subject?.description}</div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors?.subject && (\n            <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n              {errors?.subject}\n            </p>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Tipo do Chamado *\n            </label>\n            <Select \n              value={formData?.ticketType || ''} \n              onValueChange={(value) => handleInputChange('ticketType', value)}\n            >\n              <SelectTrigger className={errors?.ticketType ? 'border-red-500' : ''}>\n                <SelectValue placeholder=\"Selecione o tipo\" />\n              </SelectTrigger>\n              <SelectContent>\n                {ticketTypes?.map(type => (\n                  <SelectItem key={type?.id} value={type?.id}>\n                    <div>\n                      <div className=\"font-medium\">{type?.name}</div>\n                      <div className=\"text-xs text-slate-500\">{type?.description}</div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors?.ticketType && (\n              <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                {errors?.ticketType}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Prioridade *\n            </label>\n            <Select \n              value={formData?.priority || ''} \n              onValueChange={(value) => handleInputChange('priority', value)}\n            >\n              <SelectTrigger className={errors?.priority ? 'border-red-500' : ''}>\n                <SelectValue placeholder=\"Selecione a prioridade\" />\n              </SelectTrigger>\n              <SelectContent>\n                {priorities?.map(priority => (\n                  <SelectItem key={priority?.id} value={priority?.id}>\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon \n                        name={getPriorityIcon(priority?.level) as any} \n                        size={16} \n                        className={getPriorityColor(priority?.level)} \n                      />\n                      <div>\n                        <div className=\"font-medium\">{priority?.name}</div>\n                        <div className=\"text-xs text-slate-500\">{priority?.description}</div>\n                      </div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors?.priority && (\n              <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                {errors?.priority}\n              </p>\n            )}\n          </div>\n        </div>\n\n        {formData?.priority && (\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Info\" size={16} className=\"text-blue-600 dark:text-blue-400 mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-1\">\n                  Informações sobre a Prioridade\n                </h4>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  {priorities?.find(p => p?.id === formData?.priority)?.slaInfo || 'SLA padrão será aplicado conforme configuração do sistema.'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8430},"client/src/components/tickets/DescriptionEditor.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  content: string;\n}\n\ninterface DescriptionEditorProps {\n  formData: any;\n  onFormChange: (field: string, value: any) => void;\n  errors: any;\n  templates: Template[];\n}\n\nexport default function DescriptionEditor({\n  formData,\n  onFormChange,\n  errors,\n  templates\n}: DescriptionEditorProps) {\n  const [showTemplates, setShowTemplates] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleDescriptionChange = (value: string) => {\n    onFormChange('description', value);\n  };\n\n  const insertTemplate = (template: Template) => {\n    const currentDescription = formData?.description || '';\n    const newDescription = currentDescription + (currentDescription ? '\\n\\n' : '') + template?.content;\n    handleDescriptionChange(newDescription);\n    setShowTemplates(false);\n  };\n\n  const formatText = (format: string) => {\n    const textarea = textareaRef?.current;\n    if (!textarea) return;\n\n    const start = textarea?.selectionStart;\n    const end = textarea?.selectionEnd;\n    const selectedText = textarea?.value?.substring(start, end);\n    const beforeText = textarea?.value?.substring(0, start);\n    const afterText = textarea?.value?.substring(end);\n\n    let formattedText = selectedText;\n    \n    switch (format) {\n      case 'bold':\n        formattedText = `**${selectedText}**`;\n        break;\n      case 'italic':\n        formattedText = `*${selectedText}*`;\n        break;\n      case 'list':\n        formattedText = selectedText?.split('\\n')?.map(line => `• ${line}`)?.join('\\n');\n        break;\n      case 'code':\n        formattedText = `\\`${selectedText}\\``;\n        break;\n      default:\n        break;\n    }\n\n    const newValue = beforeText + formattedText + afterText;\n    handleDescriptionChange(newValue);\n    \n    // Restore focus and selection\n    setTimeout(() => {\n      textarea?.focus();\n      textarea?.setSelectionRange(start, start + formattedText?.length);\n    }, 0);\n  };\n\n  const insertCurrentDateTime = () => {\n    const now = new Date();\n    const dateTime = now?.toLocaleString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    const currentDescription = formData?.description || '';\n    const newDescription = currentDescription + (currentDescription ? '\\n\\n' : '') + `[${dateTime}] `;\n    handleDescriptionChange(newDescription);\n  };\n\n  return (\n    <div className={`bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 ${isFullscreen ? 'fixed inset-4 z-50' : 'p-6'}`}>\n      <div className=\"flex items-center justify-between mb-6 p-6 pb-0\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center justify-center w-10 h-10 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n            <Icon name=\"FileText\" size={20} className=\"text-purple-600 dark:text-purple-400\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n              Descrição do Problema\n            </h2>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Descreva detalhadamente o problema ou solicitação\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowTemplates(!showTemplates)}\n            iconName=\"FileTemplate\"\n            iconPosition=\"left\"\n          >\n            Templates\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsFullscreen(!isFullscreen)}\n            iconName={isFullscreen ? \"Minimize2\" : \"Maximize2\"}\n            iconPosition=\"left\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"px-6 pb-6\">\n        {/* Formatting Toolbar */}\n        <div className=\"flex items-center space-x-2 p-3 bg-slate-50 dark:bg-slate-700 rounded-t-lg border border-b-0 border-slate-200 dark:border-slate-600\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('bold')}\n            iconName=\"Bold\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('italic')}\n            iconName=\"Italic\"\n          />\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600\"></div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('list')}\n            iconName=\"List\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => formatText('code')}\n            iconName=\"Code\"\n          />\n          <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600\"></div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={insertCurrentDateTime}\n            iconName=\"Clock\"\n          />\n        </div>\n\n        {/* Templates Dropdown */}\n        {showTemplates && (\n          <div className=\"absolute z-10 mt-1 w-80 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg shadow-lg\">\n            <div className=\"p-4\">\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-3\">\n                Templates Disponíveis\n              </h4>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {templates?.map((template) => (\n                  <button\n                    key={template?.id}\n                    onClick={() => insertTemplate(template)}\n                    className=\"w-full text-left p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors\"\n                  >\n                    <div className=\"font-medium text-sm text-slate-900 dark:text-slate-100\">\n                      {template?.name}\n                    </div>\n                    <div className=\"text-xs text-slate-600 dark:text-slate-400 mt-1 line-clamp-2\">\n                      {template?.description}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Text Editor */}\n        <div className=\"relative\">\n          <textarea\n            ref={textareaRef}\n            value={formData?.description || ''}\n            onChange={(e) => handleDescriptionChange(e?.target?.value)}\n            placeholder=\"Descreva detalhadamente o problema, incluindo:&#10;• Passos para reproduzir o erro&#10;• Mensagens de erro (se houver)&#10;• Impacto no trabalho&#10;• Tentativas de solução já realizadas\"\n            className={`w-full border border-t-0 border-slate-200 dark:border-slate-700 rounded-b-lg p-4 text-sm text-slate-900 dark:text-slate-100 bg-white dark:bg-slate-800 placeholder:text-slate-500 dark:placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none ${\n              isFullscreen ? 'h-96' : 'h-48'\n            } ${errors?.description ? 'border-red-500' : ''}`}\n            required\n          />\n          \n          {/* Character Counter */}\n          <div className=\"absolute bottom-3 right-3 text-xs text-slate-500 dark:text-slate-400 bg-white/80 dark:bg-slate-800/80 px-2 py-1 rounded\">\n            {(formData?.description || '')?.length} caracteres\n          </div>\n        </div>\n\n        {errors?.description && (\n          <p className=\"text-sm text-red-600 dark:text-red-400 mt-2\">\n            {errors?.description}\n          </p>\n        )}\n\n        {/* Description Guidelines */}\n        <div className=\"mt-4 p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"Lightbulb\" size={16} className=\"text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n            <div>\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2\">\n                Dicas para uma boa descrição:\n              </h4>\n              <ul className=\"text-sm text-slate-600 dark:text-slate-400 space-y-1\">\n                <li>• Seja específico sobre o problema ou necessidade</li>\n                <li>• Inclua capturas de tela quando relevante</li>\n                <li>• Mencione quando o problema começou</li>\n                <li>• Descreva o impacto no seu trabalho</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8841},"client/src/components/tickets/FileAttachmentZone.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface FileAttachment {\n  id: string | number;\n  file: File;\n  name: string;\n  size: number;\n  type: string;\n  uploadStatus: 'pending' | 'completed' | 'error';\n}\n\ninterface FileAttachmentZoneProps {\n  formData: any;\n  onFormChange: (field: string, value: any) => void;\n  errors: any;\n}\n\nexport default function FileAttachmentZone({\n  formData,\n  onFormChange,\n  errors\n}: FileAttachmentZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<Record<string | number, number>>({});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const maxFileSize = 10 * 1024 * 1024; // 10MB\n  const allowedTypes = [\n    'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/plain',\n    'application/zip',\n    'application/x-rar-compressed'\n  ];\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files) return;\n    \n    const fileArray = Array.from(files);\n    const validFiles: FileAttachment[] = [];\n    const errors: string[] = [];\n\n    fileArray?.forEach(file => {\n      if (file?.size > maxFileSize) {\n        errors?.push(`${file?.name}: Arquivo muito grande (máximo 10MB)`);\n        return;\n      }\n\n      if (!allowedTypes?.includes(file?.type)) {\n        errors?.push(`${file?.name}: Tipo de arquivo não permitido`);\n        return;\n      }\n\n      validFiles?.push({\n        id: Date.now() + Math.random(),\n        file: file,\n        name: file?.name,\n        size: file?.size,\n        type: file?.type,\n        uploadStatus: 'pending'\n      });\n    });\n\n    if (errors?.length > 0) {\n      alert('Alguns arquivos não puderam ser adicionados:\\n' + errors?.join('\\n'));\n    }\n\n    if (validFiles?.length > 0) {\n      const currentAttachments = formData?.attachments || [];\n      const newAttachments = [...currentAttachments, ...validFiles];\n      onFormChange('attachments', newAttachments);\n      \n      // Simulate upload progress\n      validFiles?.forEach(file => {\n        simulateUpload(file?.id);\n      });\n    }\n  };\n\n  const simulateUpload = (fileId: string | number) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 30;\n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Update file status to completed\n        const currentAttachments = formData?.attachments || [];\n        const updatedAttachments = currentAttachments?.map((att: FileAttachment) => \n          att?.id === fileId ? { ...att, uploadStatus: 'completed' } : att\n        );\n        onFormChange('attachments', updatedAttachments);\n      }\n      \n      setUploadProgress(prev => ({ ...prev, [fileId]: progress }));\n    }, 200);\n  };\n\n  const removeFile = (fileId: string | number) => {\n    const currentAttachments = formData?.attachments || [];\n    const updatedAttachments = currentAttachments?.filter((att: FileAttachment) => att?.id !== fileId);\n    onFormChange('attachments', updatedAttachments);\n    \n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[fileId];\n      return newProgress;\n    });\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e?.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e?.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e?.preventDefault();\n    setIsDragOver(false);\n    const files = e?.dataTransfer?.files;\n    handleFileSelect(files);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i))?.toFixed(2)) + ' ' + sizes?.[i];\n  };\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType?.startsWith('image/')) return 'Image';\n    if (fileType === 'application/pdf') return 'FileText';\n    if (fileType?.includes('word')) return 'FileText';\n    if (fileType?.includes('excel') || fileType?.includes('sheet')) return 'FileSpreadsheet';\n    if (fileType?.includes('zip') || fileType?.includes('rar')) return 'Archive';\n    return 'File';\n  };\n\n  const attachments: FileAttachment[] = formData?.attachments || [];\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n          <Icon name=\"Paperclip\" size={20} className=\"text-orange-600 dark:text-orange-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Anexos\n          </h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Adicione capturas de tela, documentos ou outros arquivos relevantes\n          </p>\n        </div>\n      </div>\n      \n      {/* Upload Zone */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${\n          isDragOver \n            ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n            : 'border-slate-300 dark:border-slate-600 hover:border-blue-400 hover:bg-slate-50 dark:hover:bg-slate-700'\n        }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef?.current?.click()}\n      >\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"flex items-center justify-center w-16 h-16 bg-slate-100 dark:bg-slate-700 rounded-full\">\n            <Icon name=\"Upload\" size={24} className=\"text-slate-600 dark:text-slate-400\" />\n          </div>\n          \n          <div>\n            <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-1\">\n              Clique para selecionar ou arraste arquivos aqui\n            </p>\n            <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n              Máximo 10MB por arquivo • PDF, DOC, XLS, imagens, ZIP\n            </p>\n          </div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"FolderOpen\"\n            iconPosition=\"left\"\n          >\n            Selecionar Arquivos\n          </Button>\n        </div>\n      </div>\n      \n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept=\".jpg,.jpeg,.png,.gif,.webp,.pdf,.doc,.docx,.xls,.xlsx,.txt,.zip,.rar\"\n        onChange={(e) => handleFileSelect(e?.target?.files)}\n        className=\"hidden\"\n      />\n      \n      {/* File List */}\n      {attachments?.length > 0 && (\n        <div className=\"mt-6 space-y-3\">\n          <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n            Arquivos Anexados ({attachments?.length})\n          </h4>\n          \n          <div className=\"space-y-2\">\n            {attachments?.map((attachment) => (\n              <div key={attachment?.id} className=\"flex items-center space-x-3 p-3 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n                <div className=\"flex items-center justify-center w-10 h-10 bg-white dark:bg-slate-800 rounded-lg\">\n                  <Icon name={getFileIcon(attachment?.type) as any} size={16} className=\"text-slate-600 dark:text-slate-400\" />\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100 truncate\">\n                    {attachment?.name}\n                  </p>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    {formatFileSize(attachment?.size)}\n                  </p>\n                  \n                  {attachment?.uploadStatus === 'pending' && uploadProgress?.[attachment?.id] !== undefined && (\n                    <div className=\"mt-2\">\n                      <div className=\"flex items-center justify-between text-xs text-slate-600 dark:text-slate-400 mb-1\">\n                        <span>Enviando...</span>\n                        <span>{Math.round(uploadProgress?.[attachment?.id])}%</span>\n                      </div>\n                      <div className=\"w-full bg-slate-200 dark:bg-slate-600 rounded-full h-1.5\">\n                        <div \n                          className=\"bg-blue-600 h-1.5 rounded-full transition-all duration-300\"\n                          style={{ width: `${uploadProgress?.[attachment?.id]}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {attachment?.uploadStatus === 'completed' && (\n                    <div className=\"flex items-center space-x-1 mt-1\">\n                      <Icon name=\"CheckCircle\" size={12} className=\"text-green-600 dark:text-green-400\" />\n                      <span className=\"text-xs text-green-600 dark:text-green-400\">\n                        Enviado com sucesso\n                      </span>\n                    </div>\n                  )}\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(attachment?.id)}\n                  iconName=\"Trash2\"\n                  className=\"text-red-600 hover:text-red-800 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300 dark:hover:bg-red-900/20\"\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* File Guidelines */}\n      <div className=\"mt-6 p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n        <div className=\"flex items-start space-x-3\">\n          <Icon name=\"Info\" size={16} className=\"text-blue-600 dark:text-blue-400 mt-0.5\" />\n          <div>\n            <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2\">\n              Diretrizes para Anexos:\n            </h4>\n            <ul className=\"text-sm text-slate-600 dark:text-slate-400 space-y-1\">\n              <li>• Capturas de tela ajudam a identificar problemas visuais</li>\n              <li>• Logs de erro facilitam o diagnóstico técnico</li>\n              <li>• Documentos relacionados ao processo em questão</li>\n              <li>• Evite anexar informações confidenciais desnecessárias</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      \n      {errors?.attachments && (\n        <p className=\"text-sm text-red-600 dark:text-red-400 mt-4\">\n          {errors?.attachments}\n        </p>\n      )}\n    </div>\n  );\n}","size_bytes":11186},"client/src/components/tickets/FormActions.tsx":{"content":"import React from 'react';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface FormActionsProps {\n  onSubmit: () => void;\n  onSaveDraft: () => void;\n  onCancel: () => void;\n  isSubmitting: boolean;\n  isDraftSaving: boolean;\n  formData: any;\n  hasUnsavedChanges: boolean;\n}\n\nexport default function FormActions({\n  onSubmit,\n  onSaveDraft,\n  onCancel,\n  isSubmitting,\n  isDraftSaving,\n  formData,\n  hasUnsavedChanges\n}: FormActionsProps) {\n  const getFormCompleteness = () => {\n    const requiredFields = [\n      'requesterName', 'requesterEmail', 'client', 'unit', 'department',\n      'category', 'subject', 'ticketType', 'priority', 'description', 'serviceDesk'\n    ];\n    \n    const filledFields = requiredFields?.filter(field => formData?.[field] && formData?.[field]?.toString()?.trim());\n    return {\n      filled: filledFields?.length,\n      total: requiredFields?.length,\n      percentage: Math.round((filledFields?.length / requiredFields?.length) * 100)\n    };\n  };\n\n  const completeness = getFormCompleteness();\n  const canSubmit = completeness?.percentage === 100 && !isSubmitting;\n  const canSaveDraft = hasUnsavedChanges && !isDraftSaving && !isSubmitting;\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-slate-50 dark:bg-slate-700 rounded-lg\">\n          <Icon name=\"CheckCircle\" size={20} className=\"text-slate-600 dark:text-slate-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Finalizar Chamado\n          </h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Revise as informações e crie o chamado ou salve como rascunho\n          </p>\n        </div>\n      </div>\n\n      {/* Form Completeness Indicator */}\n      <div className=\"mb-6 p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n            Progresso do Formulário\n          </h4>\n          <span className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n            {completeness?.filled}/{completeness?.total} campos obrigatórios\n          </span>\n        </div>\n        \n        <div className=\"w-full bg-slate-200 dark:bg-slate-600 rounded-full h-2 mb-2\">\n          <div \n            className={`h-2 rounded-full transition-all duration-500 ${\n              completeness?.percentage === 100 \n                ? 'bg-green-600' \n                : completeness?.percentage >= 70 \n                ? 'bg-blue-600' \n                : completeness?.percentage >= 40 \n                ? 'bg-yellow-600' \n                : 'bg-red-600'\n            }`}\n            style={{ width: `${completeness?.percentage}%` }}\n          ></div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n          <Icon \n            name={completeness?.percentage === 100 ? \"CheckCircle\" : \"AlertCircle\"} \n            size={16} \n            className={completeness?.percentage === 100 ? \"text-green-600\" : \"text-orange-600\"} \n          />\n          <span>\n            {completeness?.percentage === 100 \n              ? \"Formulário completo - pronto para envio\" \n              : `${completeness?.percentage}% preenchido - ${completeness?.total - completeness?.filled} campos restantes`\n            }\n          </span>\n        </div>\n      </div>\n\n      {/* Quick Validation Summary */}\n      {completeness?.percentage < 100 && (\n        <div className=\"mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n          <div className=\"flex items-start space-x-3\">\n            <Icon name=\"AlertTriangle\" size={16} className=\"text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n            <div>\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2\">\n                Campos Obrigatórios Pendentes:\n              </h4>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400 space-y-1\">\n                {!formData?.requesterName && <div>• Nome do solicitante</div>}\n                {!formData?.requesterEmail && <div>• E-mail do solicitante</div>}\n                {!formData?.client && <div>• Cliente</div>}\n                {!formData?.unit && <div>• Unidade</div>}\n                {!formData?.department && <div>• Departamento</div>}\n                {!formData?.category && <div>• Categoria</div>}\n                {!formData?.subject && <div>• Assunto</div>}\n                {!formData?.ticketType && <div>• Tipo do chamado</div>}\n                {!formData?.priority && <div>• Prioridade</div>}\n                {!formData?.description?.trim() && <div>• Descrição do problema</div>}\n                {!formData?.serviceDesk && <div>• Mesa de atendimento</div>}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Unsaved Changes Warning */}\n      {hasUnsavedChanges && (\n        <div className=\"mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"AlertCircle\" size={16} className=\"text-blue-600 dark:text-blue-400\" />\n            <div>\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                Alterações não salvas\n              </h4>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n                Você tem alterações pendentes. Salve como rascunho para não perder o progresso.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex flex-col sm:flex-row gap-3\">\n        {/* Primary Actions */}\n        <div className=\"flex-1 flex gap-3\">\n          <Button\n            onClick={onSubmit}\n            disabled={!canSubmit}\n            size=\"lg\"\n            className={`flex-1 ${canSubmit ? '' : 'opacity-50 cursor-not-allowed'}`}\n            iconName={isSubmitting ? \"Loader2\" : \"Send\"}\n            iconPosition=\"left\"\n          >\n            {isSubmitting ? (\n              <>\n                <span className=\"animate-spin\">\n                  <Icon name=\"Loader2\" size={16} />\n                </span>\n                Criando Chamado...\n              </>\n            ) : (\n              'Criar Chamado'\n            )}\n          </Button>\n\n          <Button\n            onClick={onSaveDraft}\n            disabled={!canSaveDraft}\n            variant=\"secondary\"\n            size=\"lg\"\n            className={`flex-1 ${canSaveDraft ? '' : 'opacity-50 cursor-not-allowed'}`}\n            iconName={isDraftSaving ? \"Loader2\" : \"Save\"}\n            iconPosition=\"left\"\n          >\n            {isDraftSaving ? (\n              <>\n                <span className=\"animate-spin\">\n                  <Icon name=\"Loader2\" size={16} />\n                </span>\n                Salvando...\n              </>\n            ) : (\n              'Salvar Rascunho'\n            )}\n          </Button>\n        </div>\n\n        {/* Cancel Button */}\n        <Button\n          onClick={onCancel}\n          variant=\"ghost\"\n          size=\"lg\"\n          disabled={isSubmitting || isDraftSaving}\n          iconName=\"X\"\n          iconPosition=\"left\"\n          className=\"sm:w-auto\"\n        >\n          Cancelar\n        </Button>\n      </div>\n\n      {/* Additional Information */}\n      <div className=\"mt-6 pt-4 border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm text-slate-600 dark:text-slate-400\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={14} />\n            <span>\n              {formData?.autoAssign \n                ? 'Será atribuído automaticamente' \n                : formData?.assignedOperator \n                ? 'Atribuído a operador específico' \n                : 'Aguardará distribuição manual'\n              }\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Icon name={formData?.emailNotification !== false ? \"Mail\" : \"MailX\"} size={14} />\n            <span>\n              {formData?.emailNotification !== false \n                ? 'E-mail será enviado ao solicitante' \n                : 'Sem notificação por e-mail'\n              }\n            </span>\n          </div>\n        </div>\n        \n        {formData?.attachments?.length > 0 && (\n          <div className=\"mt-3 flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n            <Icon name=\"Paperclip\" size={14} />\n            <span>\n              {formData?.attachments?.length} arquivo(s) anexado(s)\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9160},"client/src/components/tickets/RequesterInfoSection.tsx":{"content":"import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Icon from '@/components/AppIcon';\n\ninterface Client {\n  id: string;\n  name: string;\n  document: string;\n}\n\ninterface Unit {\n  id: string;\n  clientId: string;\n  name: string;\n  address: string;\n}\n\ninterface Department {\n  id: string;\n  unitId: string;\n  name: string;\n  description: string;\n}\n\ninterface RequesterInfoSectionProps {\n  formData: any;\n  onFormChange: (field: string, value: any) => void;\n  errors: any;\n  clients: Client[];\n  units: Unit[];\n  departments: Department[];\n  isLoadingClients: boolean;\n}\n\nexport default function RequesterInfoSection({\n  formData,\n  onFormChange,\n  errors,\n  clients,\n  units,\n  departments,\n  isLoadingClients\n}: RequesterInfoSectionProps) {\n  const handleInputChange = (field: string, value: any) => {\n    onFormChange(field, value);\n  };\n\n  const filteredUnits = formData?.client ? units?.filter(unit => unit?.clientId === formData?.client) : [];\n  const filteredDepartments = formData?.unit ? departments?.filter(dept => dept?.unitId === formData?.unit) : [];\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n          <Icon name=\"User\" size={20} className=\"text-blue-600 dark:text-blue-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Informações do Solicitante\n          </h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Dados do usuário que está solicitando o atendimento\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Nome Completo *\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Digite o nome completo\"\n              value={formData?.requesterName || ''}\n              onChange={(e) => handleInputChange('requesterName', e?.target?.value)}\n              className={`w-full ${errors?.requesterName ? 'border-red-500' : ''}`}\n            />\n            {errors?.requesterName && (\n              <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                {errors?.requesterName}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              E-mail *\n            </label>\n            <Input\n              type=\"email\"\n              placeholder=\"usuario@empresa.com\"\n              value={formData?.requesterEmail || ''}\n              onChange={(e) => handleInputChange('requesterEmail', e?.target?.value)}\n              className={`w-full ${errors?.requesterEmail ? 'border-red-500' : ''}`}\n            />\n            {errors?.requesterEmail && (\n              <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                {errors?.requesterEmail}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Telefone\n            </label>\n            <Input\n              type=\"tel\"\n              placeholder=\"(11) 99999-9999\"\n              value={formData?.requesterPhone || ''}\n              onChange={(e) => handleInputChange('requesterPhone', e?.target?.value)}\n              className=\"w-full\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Ramal (Opcional)\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"1234\"\n              value={formData?.requesterExtension || ''}\n              onChange={(e) => handleInputChange('requesterExtension', e?.target?.value)}\n              className=\"w-full\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Cliente *\n          </label>\n          <Select \n            value={formData?.client || ''} \n            onValueChange={(value) => {\n              handleInputChange('client', value);\n              handleInputChange('unit', '');\n              handleInputChange('department', '');\n            }}\n          >\n            <SelectTrigger className={errors?.client ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione o cliente\" />\n            </SelectTrigger>\n            <SelectContent>\n              {clients?.map(client => (\n                <SelectItem key={client?.id} value={client?.id}>\n                  <div>\n                    <div className=\"font-medium\">{client?.name}</div>\n                    <div className=\"text-xs text-slate-500\">{client?.document}</div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors?.client && (\n            <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n              {errors?.client}\n            </p>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Unidade *\n            </label>\n            <Select \n              value={formData?.unit || ''} \n              onValueChange={(value) => {\n                handleInputChange('unit', value);\n                handleInputChange('department', '');\n              }}\n              disabled={!formData?.client}\n            >\n              <SelectTrigger className={errors?.unit ? 'border-red-500' : ''}>\n                <SelectValue placeholder=\"Selecione a unidade\" />\n              </SelectTrigger>\n              <SelectContent>\n                {filteredUnits?.map(unit => (\n                  <SelectItem key={unit?.id} value={unit?.id}>\n                    <div>\n                      <div className=\"font-medium\">{unit?.name}</div>\n                      <div className=\"text-xs text-slate-500\">{unit?.address}</div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors?.unit && (\n              <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                {errors?.unit}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n              Departamento *\n            </label>\n            <Select \n              value={formData?.department || ''} \n              onValueChange={(value) => handleInputChange('department', value)}\n              disabled={!formData?.unit}\n            >\n              <SelectTrigger className={errors?.department ? 'border-red-500' : ''}>\n                <SelectValue placeholder=\"Selecione o departamento\" />\n              </SelectTrigger>\n              <SelectContent>\n                {filteredDepartments?.map(dept => (\n                  <SelectItem key={dept?.id} value={dept?.id}>\n                    <div>\n                      <div className=\"font-medium\">{dept?.name}</div>\n                      <div className=\"text-xs text-slate-500\">{dept?.description}</div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors?.department && (\n              <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                {errors?.department}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8252},"client/src/components/ui/date-picker.tsx":{"content":"import * as React from \"react\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { format } from \"date-fns\"\nimport { DateRange } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport Button from \"@/components/Button\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface DatePickerWithRangeProps {\n  date: DateRange | undefined\n  setDate: (date: DateRange | undefined) => void\n  className?: string\n}\n\nexport function DatePickerWithRange({\n  date,\n  setDate,\n  className,\n}: DatePickerWithRangeProps) {\n  return (\n    <div className={cn(\"grid gap-2\", className)}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant={\"outline\"}\n            className={cn(\n              \"w-full justify-start text-left font-normal\",\n              !date && \"text-muted-foreground\"\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, \"dd/MM/yyyy\")} -{\" \"}\n                  {format(date.to, \"dd/MM/yyyy\")}\n                </>\n              ) : (\n                format(date.from, \"dd/MM/yyyy\")\n              )\n            ) : (\n              <span>Selecionar período</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={date?.from}\n            selected={date}\n            onSelect={setDate}\n            numberOfMonths={2}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}","size_bytes":1753},"client/src/components/users/BulkActionsPanel.tsx":{"content":"import React, { useState } from 'react';\nimport Button from '@/components/Button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Icon from '@/components/AppIcon';\n\ninterface BulkActionsPanelProps {\n  selectedUsers: string[];\n  onBulkAction: (action: string, userIds: string[]) => void;\n  onClear: () => void;\n}\n\nexport default function BulkActionsPanel({\n  selectedUsers,\n  onBulkAction,\n  onClear\n}: BulkActionsPanelProps) {\n  const [selectedAction, setSelectedAction] = useState('');\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  const bulkActions = [\n    {\n      id: 'activate',\n      name: 'Ativar Usuários',\n      description: 'Ativar contas de usuário selecionadas',\n      icon: 'UserCheck',\n      color: 'text-green-600 dark:text-green-400',\n      bgColor: 'bg-green-50 dark:bg-green-900/20'\n    },\n    {\n      id: 'deactivate',\n      name: 'Desativar Usuários',\n      description: 'Desativar contas de usuário selecionadas',\n      icon: 'UserX',\n      color: 'text-red-600 dark:text-red-400',\n      bgColor: 'bg-red-50 dark:bg-red-900/20'\n    },\n    {\n      id: 'reset_password',\n      name: 'Redefinir Senha',\n      description: 'Enviar link de redefinição de senha',\n      icon: 'Key',\n      color: 'text-blue-600 dark:text-blue-400',\n      bgColor: 'bg-blue-50 dark:bg-blue-900/20'\n    },\n    {\n      id: 'change_role',\n      name: 'Alterar Função',\n      description: 'Alterar função dos usuários selecionados',\n      icon: 'Shield',\n      color: 'text-purple-600 dark:text-purple-400',\n      bgColor: 'bg-purple-50 dark:bg-purple-900/20'\n    },\n    {\n      id: 'change_department',\n      name: 'Alterar Departamento',\n      description: 'Mover usuários para outro departamento',\n      icon: 'Building',\n      color: 'text-orange-600 dark:text-orange-400',\n      bgColor: 'bg-orange-50 dark:bg-orange-900/20'\n    },\n    {\n      id: 'send_notification',\n      name: 'Enviar Notificação',\n      description: 'Enviar mensagem para os usuários',\n      icon: 'Mail',\n      color: 'text-indigo-600 dark:text-indigo-400',\n      bgColor: 'bg-indigo-50 dark:bg-indigo-900/20'\n    },\n    {\n      id: 'export_data',\n      name: 'Exportar Dados',\n      description: 'Exportar informações dos usuários selecionados',\n      icon: 'Download',\n      color: 'text-slate-600 dark:text-slate-400',\n      bgColor: 'bg-slate-50 dark:bg-slate-700'\n    },\n    {\n      id: 'delete',\n      name: 'Excluir Usuários',\n      description: 'Remover permanentemente os usuários (cuidado!)',\n      icon: 'Trash2',\n      color: 'text-red-600 dark:text-red-400',\n      bgColor: 'bg-red-50 dark:bg-red-900/20'\n    }\n  ];\n\n  const handleExecuteAction = async () => {\n    if (!selectedAction) return;\n\n    // Confirmação para ações destrutivas\n    if (['delete', 'deactivate'].includes(selectedAction)) {\n      const action = bulkActions.find(a => a.id === selectedAction);\n      const confirmMessage = `Tem certeza de que deseja ${action?.name.toLowerCase()} ${selectedUsers.length} usuário(s)? Esta ação não pode ser desfeita.`;\n      \n      if (!window.confirm(confirmMessage)) {\n        return;\n      }\n    }\n\n    setIsExecuting(true);\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simular processamento\n      onBulkAction(selectedAction, selectedUsers);\n      setSelectedAction('');\n      alert(`Ação executada com sucesso em ${selectedUsers.length} usuário(s)!`);\n    } catch (error) {\n      console.error('Erro ao executar ação em lote:', error);\n      alert('Erro ao executar a ação. Tente novamente.');\n    } finally {\n      setIsExecuting(false);\n    }\n  };\n\n  const selectedActionData = bulkActions.find(action => action.id === selectedAction);\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center justify-center w-10 h-10 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n            <Icon name=\"Settings\" size={20} className=\"text-blue-600 dark:text-blue-400\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n              Ações em Lote\n            </h3>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n              {selectedUsers.length} usuário(s) selecionado(s)\n            </p>\n          </div>\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onClear}\n          iconName=\"X\"\n          iconPosition=\"left\"\n        >\n          Cancelar Seleção\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Action Selection */}\n        <div className=\"flex-1\">\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n            Selecione uma ação\n          </label>\n          <Select value={selectedAction} onValueChange={setSelectedAction}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Escolha uma ação...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {bulkActions.map(action => (\n                <SelectItem key={action.id} value={action.id}>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${action.bgColor}`}>\n                      <Icon name={action.icon as any} size={14} className={action.color} />\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">{action.name}</div>\n                      <div className=\"text-xs text-slate-500\">{action.description}</div>\n                    </div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Execute Button */}\n        <div className=\"flex items-end\">\n          <Button\n            onClick={handleExecuteAction}\n            disabled={!selectedAction || isExecuting}\n            iconName={isExecuting ? \"Loader2\" : \"Play\"}\n            iconPosition=\"left\"\n            className={selectedActionData ? selectedActionData.bgColor : ''}\n          >\n            {isExecuting ? (\n              <>\n                <Icon name=\"Loader2\" size={16} className=\"animate-spin\" />\n                Executando...\n              </>\n            ) : (\n              'Executar Ação'\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Action Preview */}\n      {selectedActionData && (\n        <div className=\"mt-4 p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n          <div className=\"flex items-start space-x-3\">\n            <div className={`flex items-center justify-center w-10 h-10 rounded-lg ${selectedActionData.bgColor}`}>\n              <Icon name={selectedActionData.icon as any} size={20} className={selectedActionData.color} />\n            </div>\n            <div>\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-1\">\n                {selectedActionData.name}\n              </h4>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-2\">\n                {selectedActionData.description}\n              </p>\n              <div className=\"text-xs text-slate-500 dark:text-slate-400\">\n                Esta ação será aplicada a {selectedUsers.length} usuário(s) selecionado(s).\n                {['delete', 'deactivate'].includes(selectedAction) && (\n                  <span className=\"text-red-600 dark:text-red-400 font-medium\">\n                    {' '}Atenção: Esta ação não pode ser desfeita.\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Selected Users Count */}\n      <div className=\"mt-4 flex items-center justify-between text-sm text-slate-600 dark:text-slate-400\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Users\" size={14} />\n          <span>\n            {selectedUsers.length} usuário(s) será(ão) afetado(s)\n          </span>\n        </div>\n        \n        {selectedUsers.length > 10 && (\n          <div className=\"flex items-center space-x-2 text-orange-600 dark:text-orange-400\">\n            <Icon name=\"AlertTriangle\" size={14} />\n            <span>Ação em lote com muitos usuários</span>\n          </div>\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-4 pt-4 border-t border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n            Ações Rápidas:\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setSelectedAction('activate');\n                handleExecuteAction();\n              }}\n              disabled={isExecuting}\n              iconName=\"UserCheck\"\n              iconPosition=\"left\"\n            >\n              Ativar\n            </Button>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setSelectedAction('deactivate');\n                handleExecuteAction();\n              }}\n              disabled={isExecuting}\n              iconName=\"UserX\"\n              iconPosition=\"left\"\n            >\n              Desativar\n            </Button>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setSelectedAction('export_data');\n                handleExecuteAction();\n              }}\n              disabled={isExecuting}\n              iconName=\"Download\"\n              iconPosition=\"left\"\n            >\n              Exportar\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10225},"client/src/components/users/UserCard.tsx":{"content":"import React, { useState } from 'react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\nimport { Edit, Trash2, MoreHorizontal, Eye } from 'lucide-react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n  createdAt: string;\n  avatar?: string | null;\n  phone?: string;\n  extension?: string;\n  location?: string;\n  manager?: string | null;\n  permissions?: string[];\n  ticketsAssigned?: number;\n  ticketsResolved?: number;\n  averageResolutionTime?: string;\n  satisfactionRating?: number;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  userCount: number;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface UserCardProps {\n  user: User;\n  isSelected: boolean;\n  onSelect: () => void;\n  onCheck: () => void;\n  onEdit: () => void;\n  onDelete: () => void;\n  departments: Department[];\n  roles: Role[];\n}\n\nexport default function UserCard({\n  user,\n  isSelected,\n  onSelect,\n  onCheck,\n  onEdit,\n  onDelete,\n  departments,\n  roles\n}: UserCardProps) {\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.abs(now.getTime() - date.getTime()) / (1000 * 60 * 60);\n    \n    if (diffInHours < 24) {\n      return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n    } else if (diffInHours < 24 * 7) {\n      return `${Math.floor(diffInHours / 24)} dia(s) atrás`;\n    } else {\n      return date.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\n    }\n  };\n\n  const getRoleName = (roleId: string) => {\n    return roles.find(r => r.id === roleId)?.name || roleId;\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'administrador': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';\n      case 'supervisor': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'colaborador': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-500';\n      case 'inactive': return 'bg-red-500';\n      case 'pending': return 'bg-yellow-500';\n      default: return 'bg-slate-500';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  return (\n    <div className={`bg-white dark:bg-slate-800 rounded-lg border transition-all duration-200 hover:shadow-md ${\n      isSelected \n        ? 'border-blue-500 shadow-sm ring-1 ring-blue-500' \n        : 'border-slate-200 dark:border-slate-700'\n    }`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={onCheck}\n            />\n            <div className=\"relative\">\n              {user.avatar ? (\n                <img\n                  src={user.avatar}\n                  alt={user.name}\n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-12 h-12 bg-gradient-to-br from-[#2c4257] to-[#6b8fb0] rounded-full flex items-center justify-center text-white font-semibold\">\n                  {getInitials(user.name)}\n                </div>\n              )}\n              <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white dark:border-slate-800 ${getStatusColor(user.status)}`}></div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-1\">\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={onSelect}\n              className=\"p-2\"\n            >\n              <Eye className=\"w-4 h-4\" />\n            </Button>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"p-2\"\n                >\n                  <MoreHorizontal className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem onClick={onEdit}>\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Editar usuário\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem \n                  onClick={onDelete}\n                  className=\"text-red-600 focus:text-red-600 focus:bg-red-50\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Deletar usuário\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4\">\n        <div className=\"space-y-3\">\n          <div>\n            <button\n              onClick={onSelect}\n              className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 hover:text-blue-600 dark:hover:text-blue-400 text-left w-full\"\n            >\n              {user.name}\n            </button>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n              {user.email}\n            </p>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>\n              {getRoleName(user.role)}\n            </span>\n            <span className=\"text-xs text-slate-500 dark:text-slate-400\">\n              {getStatusLabel(user.status)}\n            </span>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n              <Icon name=\"Building\" size={14} />\n              <span>{user.department}</span>\n            </div>\n            \n            {user.location && (\n              <div className=\"flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n                <Icon name=\"MapPin\" size={14} />\n                <span>{user.location}</span>\n              </div>\n            )}\n\n            <div className=\"flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n              <Icon name=\"Clock\" size={14} />\n              <span>Último acesso: {formatDate(user.lastLogin)}</span>\n            </div>\n          </div>\n\n          {/* Performance Metrics for Operators */}\n          {user.role === 'operator' && (\n            <div className=\"pt-3 border-t border-slate-200 dark:border-slate-700\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n                    {user.ticketsAssigned || 0}\n                  </div>\n                  <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Ativos\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n                    {user.ticketsResolved || 0}\n                  </div>\n                  <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Resolvidos\n                  </div>\n                </div>\n              </div>\n              \n              {user.satisfactionRating && user.satisfactionRating > 0 && (\n                <div className=\"mt-2 flex items-center justify-center space-x-1\">\n                  <Icon name=\"Star\" size={12} className=\"text-yellow-500 fill-current\" />\n                  <span className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    {user.satisfactionRating.toFixed(1)}\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":8858},"client/src/components/ThemeToggle.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Sun, Moon } from 'lucide-react';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"relative w-9 h-9 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n          data-testid=\"button-theme-toggle\"\n        >\n          <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Alternar tema</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"min-w-[120px]\">\n        <DropdownMenuItem\n          onClick={() => setTheme('light')}\n          className=\"cursor-pointer\"\n          data-testid=\"menu-light-theme\"\n        >\n          <Sun className=\"mr-2 h-4 w-4\" />\n          Tema Claro\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => setTheme('dark')}\n          className=\"cursor-pointer\"\n          data-testid=\"menu-dark-theme\"\n        >\n          <Moon className=\"mr-2 h-4 w-4\" />\n          Tema Escuro\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1608},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>(() => {\n    // Verificar se há tema salvo no localStorage\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    // Se não houver tema salvo, usar tema escuro como padrão\n    return savedTheme || 'dark';\n  });\n\n  useEffect(() => {\n    // Aplicar classe no documento\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    \n    // Salvar no localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  const toggleTheme = () => {\n    setThemeState(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","size_bytes":1426},"client/src/pages/CustomFieldsManager.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Plus, Edit2, Trash2, Settings } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CustomField {\n  id: string;\n  categoryId: string;\n  departmentId: string;\n  name: string;\n  type: 'text' | 'select' | 'textarea' | 'number' | 'email' | 'tel' | 'date';\n  required: boolean;\n  placeholder?: string;\n  options?: string[];\n  order: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  departmentId: string;\n  isActive: boolean;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  isActive: boolean;\n}\n\nexport default function CustomFieldsManager() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [editingField, setEditingField] = useState<CustomField | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [fieldForm, setFieldForm] = useState({\n    name: '',\n    type: 'text' as 'text' | 'select' | 'textarea' | 'number' | 'email' | 'tel' | 'date',\n    required: false,\n    placeholder: '',\n    options: [] as string[],\n    categoryId: '',\n    departmentId: '',\n    order: 1\n  });\n  \n  const { toast } = useToast();\n\n  // Fetch all custom fields\n  const { data: customFields = [], refetch: refetchFields } = useQuery<CustomField[]>({\n    queryKey: [\"/api/custom-fields\"],\n  });\n\n  // Fetch all categories\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Fetch all departments\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Create custom field mutation\n  const createFieldMutation = useMutation({\n    mutationFn: async (fieldData: typeof fieldForm) => {\n      const response = await apiRequest(\"/api/custom-fields\", \"POST\", fieldData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Campo customizado criado com sucesso!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-fields\"] });\n      resetForm();\n      setIsOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erro ao criar campo\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Update custom field mutation\n  const updateFieldMutation = useMutation({\n    mutationFn: async ({ id, ...fieldData }: { id: string } & Partial<CustomField>) => {\n      const cleanData = {\n        ...fieldData,\n        options: fieldData.options && fieldData.options.length > 0 ? fieldData.options : null\n      };\n      return apiRequest(`/api/custom-fields/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(cleanData)\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Campo customizado atualizado!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-fields\"] });\n      resetForm();\n      setIsOpen(false);\n      setEditingField(null);\n    },\n    onError: (error: any) => {\n      console.error('Update error:', error);\n      toast({ \n        title: \"Erro ao atualizar campo\", \n        description: error.message || \"Falha ao atualizar\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Delete custom field mutation\n  const deleteFieldMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/custom-fields/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Campo customizado excluído!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-fields\"] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Erro ao excluir campo\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFieldForm({\n      name: '',\n      type: 'text',\n      required: false,\n      placeholder: '',\n      options: [],\n      categoryId: '',\n      departmentId: '',\n      order: 1\n    });\n  };\n\n  const handleEdit = (field: CustomField) => {\n    setEditingField(field);\n    setFieldForm({\n      name: field.name,\n      type: field.type,\n      required: field.required,\n      placeholder: field.placeholder || '',\n      options: field.options || [],\n      categoryId: field.categoryId,\n      departmentId: field.departmentId,\n      order: field.order\n    });\n    setIsOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!fieldForm.categoryId) {\n      toast({ \n        title: \"Erro\", \n        description: \"Por favor, selecione uma categoria\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    if (!fieldForm.departmentId) {\n      toast({ \n        title: \"Erro\", \n        description: \"Por favor, selecione um departamento\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    if (editingField) {\n      updateFieldMutation.mutate({ id: editingField.id, ...fieldForm });\n    } else {\n      createFieldMutation.mutate(fieldForm);\n    }\n  };\n\n  const handleOptionChange = (index: number, value: string) => {\n    const newOptions = [...fieldForm.options];\n    newOptions[index] = value;\n    setFieldForm(prev => ({ ...prev, options: newOptions }));\n  };\n\n  const addOption = () => {\n    setFieldForm(prev => ({ ...prev, options: [...prev.options, ''] }));\n  };\n\n  const removeOption = (index: number) => {\n    const newOptions = fieldForm.options.filter((_, i) => i !== index);\n    setFieldForm(prev => ({ ...prev, options: newOptions }));\n  };\n\n  // Group fields by department and category\n  const fieldsByDepartment = customFields.reduce((acc, field) => {\n    const department = departments.find(d => d.id === field.departmentId);\n    const category = categories.find(c => c.id === field.categoryId);\n    \n    const departmentName = department?.name || 'Departamento Desconhecido';\n    const categoryName = category?.name || 'Categoria Desconhecida';\n    \n    if (!acc[departmentName]) acc[departmentName] = {};\n    if (!acc[departmentName][categoryName]) acc[departmentName][categoryName] = [];\n    \n    acc[departmentName][categoryName].push(field);\n    return acc;\n  }, {} as Record<string, Record<string, CustomField[]>>);\n\n  const filteredFields = selectedCategory && selectedCategory !== \"all\"\n    ? customFields.filter(field => field.categoryId === selectedCategory)\n    : customFields;\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">Campos Customizados</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Configure campos específicos para diferentes categorias de tickets</p>\n        </div>\n        \n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => { resetForm(); setEditingField(null); }}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Campo\n            </Button>\n          </DialogTrigger>\n          \n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingField ? 'Editar Campo Customizado' : 'Criar Campo Customizado'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"department\">Departamento *</Label>\n                  <Select \n                    value={fieldForm.departmentId} \n                    onValueChange={(value) => setFieldForm(prev => ({ ...prev, departmentId: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione um departamento\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments.map((department) => (\n                        <SelectItem key={department.id} value={department.id}>\n                          {department.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Categoria *</Label>\n                  <Select \n                    value={fieldForm.categoryId} \n                    onValueChange={(value) => setFieldForm(prev => ({ ...prev, categoryId: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione uma categoria\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"type\">Tipo de Campo *</Label>\n                  <Select \n                    value={fieldForm.type} \n                    onValueChange={(value: 'text' | 'select' | 'textarea' | 'number' | 'email' | 'tel' | 'date') => setFieldForm(prev => ({ ...prev, type: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"text\">Texto</SelectItem>\n                      <SelectItem value=\"textarea\">Área de Texto</SelectItem>\n                      <SelectItem value=\"select\">Lista de Opções</SelectItem>\n                      <SelectItem value=\"number\">Número</SelectItem>\n                      <SelectItem value=\"email\">Email</SelectItem>\n                      <SelectItem value=\"tel\">Telefone</SelectItem>\n                      <SelectItem value=\"date\">Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"name\">Nome do Campo *</Label>\n                <Input\n                  id=\"name\"\n                  value={fieldForm.name}\n                  onChange={(e) => setFieldForm(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Ex: Número do Patrimônio\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"placeholder\">Texto de Ajuda</Label>\n                <Input\n                  id=\"placeholder\"\n                  value={fieldForm.placeholder}\n                  onChange={(e) => setFieldForm(prev => ({ ...prev, placeholder: e.target.value }))}\n                  placeholder=\"Ex: Digite o número do patrimônio do equipamento\"\n                />\n              </div>\n\n              {fieldForm.type === 'select' && (\n                <div>\n                  <Label>Opções da Lista</Label>\n                  <div className=\"space-y-2\">\n                    {fieldForm.options.map((option, index) => (\n                      <div key={index} className=\"flex gap-2\">\n                        <Input\n                          value={option}\n                          onChange={(e) => handleOptionChange(index, e.target.value)}\n                          placeholder={`Opção ${index + 1}`}\n                        />\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"icon\"\n                          onClick={() => removeOption(index)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                    <Button type=\"button\" variant=\"outline\" onClick={addOption}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Adicionar Opção\n                    </Button>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"required\"\n                  checked={fieldForm.required}\n                  onCheckedChange={(checked) => setFieldForm(prev => ({ ...prev, required: checked }))}\n                />\n                <Label htmlFor=\"required\">Campo obrigatório</Label>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"order\">Ordem de Exibição</Label>\n                <Input\n                  id=\"order\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={fieldForm.order}\n                  onChange={(e) => setFieldForm(prev => ({ ...prev, order: parseInt(e.target.value) }))}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={createFieldMutation.isPending || updateFieldMutation.isPending}>\n                  {editingField ? 'Atualizar' : 'Criar'} Campo\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filter by Category */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"w-5 h-5\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 items-center\">\n            <Label>Categoria:</Label>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-64\">\n                <SelectValue placeholder=\"Todas as categorias\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as categorias</SelectItem>\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Fields List */}\n      <div className=\"space-y-6\">\n        {Object.entries(fieldsByDepartment).map(([departmentName, departmentCategories]) => (\n          <Card key={departmentName} className=\"border-l-4 border-blue-500\">\n            <CardHeader className=\"bg-blue-50 dark:bg-blue-900/20\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <span className=\"w-3 h-3 bg-blue-500 rounded-full\"></span>\n                {departmentName}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {Object.entries(departmentCategories).map(([categoryName, categoryFields]) => (\n                <div key={categoryName} className=\"border-b last:border-b-0\">\n                  <div className=\"p-4 bg-gray-50 dark:bg-gray-800/50 border-b\">\n                    <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">{categoryName}</h4>\n                  </div>\n                  <div className=\"p-4 space-y-3\">\n                    {categoryFields.map((field) => (\n                      <div\n                        key={field.id}\n                        className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3\">\n                            <h5 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                              {field.name}\n                            </h5>\n                            <Badge variant=\"secondary\">{field.type}</Badge>\n                            {field.required && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                Obrigatório\n                              </Badge>\n                            )}\n                          </div>\n                          {field.placeholder && (\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                              {field.placeholder}\n                            </p>\n                          )}\n                          {field.options && field.options.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1 mt-2\">\n                              {field.options.map((option, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {option}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleEdit(field)}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => deleteFieldMutation.mutate(field.id)}\n                            disabled={deleteFieldMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        ))}\n\n        {customFields.length === 0 && (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Settings className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">Nenhum campo customizado configurado</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                Crie campos específicos para diferentes categorias de tickets para coletar informações mais detalhadas.\n              </p>\n              <Button onClick={() => setIsOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Criar Primeiro Campo\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19629},"client/src/pages/DepartmentManager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Edit2, Trash2, Building2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Department {\n  id: string;\n  name: string;\n  description?: string;\n  isRequester: boolean;\n  isResponsible: boolean;\n  createdAt: string;\n}\n\ninterface DepartmentFormData {\n  name: string;\n  description: string;\n  isRequester: boolean;\n  isResponsible: boolean;\n}\n\nexport default function DepartmentManager() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingDepartment, setEditingDepartment] = useState<Department | null>(null);\n  const [formData, setFormData] = useState<DepartmentFormData>({\n    name: '',\n    description: '',\n    isRequester: true,\n    isResponsible: true\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Buscar departamentos\n  const { data: departments = [], isLoading } = useQuery({\n    queryKey: ['/api/departments']\n  });\n\n  // Mutation para criar/editar departamento\n  const createDepartmentMutation = useMutation({\n    mutationFn: async (data: DepartmentFormData) => {\n      const url = editingDepartment ? `/api/departments/${editingDepartment.id}` : '/api/departments';\n      const method = editingDepartment ? 'PUT' : 'POST';\n      \n      return apiRequest(url, {\n        method,\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/departments'] });\n      setIsModalOpen(false);\n      resetForm();\n    }\n  });\n\n  // Mutation para deletar departamento\n  const deleteDepartmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/departments/${id}`, {\n        method: 'DELETE'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/departments'] });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({ \n      name: '', \n      description: '', \n      isRequester: true, \n      isResponsible: true \n    });\n    setEditingDepartment(null);\n  };\n\n  const handleEdit = (department: Department) => {\n    setEditingDepartment(department);\n    setFormData({\n      name: department.name,\n      description: department.description || '',\n      isRequester: department.isRequester || true,\n      isResponsible: department.isResponsible || true\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      if (editingDepartment) {\n        // Editando departamento existente\n        const response = await fetch(`/api/departments/${editingDepartment.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n        \n        if (!response.ok) throw new Error('Erro ao atualizar departamento');\n      } else {\n        // Criando novo departamento\n        const response = await fetch('/api/departments', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n        \n        if (!response.ok) throw new Error('Erro ao criar departamento');\n      }\n      \n      // Recarregar dados e fechar modal\n      queryClient.invalidateQueries({ queryKey: ['/api/departments'] });\n      setIsModalOpen(false);\n      resetForm();\n    } catch (error) {\n      console.error('Erro ao salvar departamento:', error);\n      alert('Erro ao salvar departamento. Tente novamente.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3\">\n            <Building2 className=\"w-8 h-8 text-blue-600\" />\n            Gerenciar Departamentos\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            Configure departamentos responsáveis e solicitantes\n          </p>\n        </div>\n        <Button\n          onClick={() => {\n            resetForm();\n            setIsModalOpen(true);\n          }}\n          className=\"bg-blue-600 hover:bg-blue-700\"\n          data-testid=\"button-add-department\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Novo Departamento\n        </Button>\n      </div>\n\n      {/* Seção de Informações */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg text-blue-600 dark:text-blue-400\">\n              Departamentos Responsáveis\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Departamentos que <strong>atendem</strong> e resolvem chamados. Aparecem na lista \"Departamento Responsável\" ao criar ticket.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg text-green-600 dark:text-green-400\">\n              Departamentos Solicitantes\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Usuários destes departamentos podem <strong>criar</strong> chamados. Campo \"Departamento Solicitante\" é preenchido automaticamente.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Departamentos */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {departments.map((department: Department) => (\n          <Card key={department.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                    {department.name}\n                  </CardTitle>\n                  <div className=\"flex gap-2 flex-wrap\">\n                    {department.isRequester && (\n                      <Badge className=\"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                        Solicitante\n                      </Badge>\n                    )}\n                    {department.isResponsible && (\n                      <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100\">\n                        Responsável\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleEdit(department)}\n                    data-testid={`button-edit-${department.id}`}\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => {\n                      if (confirm('Tem certeza que deseja excluir este departamento?')) {\n                        deleteDepartmentMutation.mutate(department.id);\n                      }\n                    }}\n                    disabled={deleteDepartmentMutation.isPending}\n                    data-testid={`button-delete-${department.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            {department.description && (\n              <CardContent className=\"pt-0\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {department.description}\n                </p>\n              </CardContent>\n            )}\n          </Card>\n        ))}\n      </div>\n\n      {departments.length === 0 && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <Building2 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              Nenhum departamento cadastrado\n            </p>\n            <Button\n              onClick={() => {\n                resetForm();\n                setIsModalOpen(true);\n              }}\n              variant=\"outline\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Cadastrar Primeiro Departamento\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Modal */}\n      {isModalOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\"\n          onClick={() => setIsModalOpen(false)}\n        >\n          <div\n            className=\"bg-white dark:bg-gray-800 rounded-lg w-full max-w-md p-6\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100\">\n              {editingDepartment ? 'Editar Departamento' : 'Novo Departamento'}\n            </h2>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Nome do Departamento <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n                  placeholder=\"Ex: Tecnologia da Informação\"\n                  required\n                  data-testid=\"input-department-name\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Descrição\n                </label>\n                <textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n                  placeholder=\"Descrição opcional do departamento\"\n                  rows={3}\n                  data-testid=\"input-department-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.isRequester}\n                      onChange={(e) => setFormData(prev => ({ ...prev, isRequester: e.target.checked }))}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Pode Solicitar\n                    </span>\n                  </label>\n                  <p className=\"text-xs text-gray-500 mt-1\">Usuários deste departamento podem criar chamados</p>\n                </div>\n\n                <div>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.isResponsible}\n                      onChange={(e) => setFormData(prev => ({ ...prev, isResponsible: e.target.checked }))}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Pode Atender\n                    </span>\n                  </label>\n                  <p className=\"text-xs text-gray-500 mt-1\">Departamento pode receber e resolver chamados</p>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsModalOpen(false)}\n                  className=\"flex-1\"\n                  disabled={isSubmitting}\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                  data-testid=\"button-save-department\"\n                >\n                  {isSubmitting ? 'Salvando...' : (editingDepartment ? 'Salvar' : 'Criar')}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13984},"client/src/components/PermissionGuard.tsx":{"content":"import { ReactNode } from 'react';\nimport { usePermissions, PermissionKey, UserRole } from '@/hooks/usePermissions';\n\ninterface PermissionGuardProps {\n  children: ReactNode;\n  // Verificar permissão específica\n  permission?: PermissionKey;\n  // Verificar nível de role mínimo\n  minRole?: UserRole;\n  // Fallback quando não tem permissão\n  fallback?: ReactNode;\n  // Classe CSS adicional para container\n  className?: string;\n}\n\nexport function PermissionGuard({ \n  children, \n  permission, \n  minRole, \n  fallback = null,\n  className = \"\"\n}: PermissionGuardProps) {\n  const { hasPermission, hasRoleLevel, isLoading } = usePermissions();\n  \n  // Mostrar loading se ainda carregando\n  if (isLoading) {\n    return <div className={className}>{fallback}</div>;\n  }\n  \n  // Verificar permissão específica\n  if (permission && !hasPermission(permission)) {\n    return <div className={className}>{fallback}</div>;\n  }\n  \n  // Verificar nível de role\n  if (minRole && !hasRoleLevel(minRole)) {\n    return <div className={className}>{fallback}</div>;\n  }\n  \n  // Render children se tem permissão\n  return <div className={className}>{children}</div>;\n}\n\n// Componente específico para admins\nexport function AdminOnly({ children, fallback }: { children: ReactNode, fallback?: ReactNode }) {\n  return (\n    <PermissionGuard minRole=\"administrador\" fallback={fallback}>\n      {children}\n    </PermissionGuard>\n  );\n}\n\n// Componente para supervisores ou superior\nexport function SupervisorOnly({ children, fallback }: { children: ReactNode, fallback?: ReactNode }) {\n  return (\n    <PermissionGuard minRole=\"supervisor\" fallback={fallback}>\n      {children}\n    </PermissionGuard>\n  );\n}","size_bytes":1681},"client/src/hooks/usePermissions.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { User } from '@shared/schema';\n\n// Definir hierarquia de roles\nconst ROLE_HIERARCHY = {\n  colaborador: 0,\n  supervisor: 1,\n  administrador: 2\n} as const;\n\n// Definir permissões por role\nconst ROLE_PERMISSIONS = {\n  colaborador: {\n    canManageUsers: false,\n    canViewAllTickets: false,\n    canViewDepartmentTickets: false, // Só vê seus próprios tickets\n    canManageTickets: false, // Só pode criar, não gerenciar\n    canViewReports: false,\n    canManageSystem: false,\n    canManageCategories: false,\n    canManageDepartments: false,\n  },\n  supervisor: {\n    canManageUsers: true, // Só do seu departamento\n    canViewAllTickets: false,\n    canViewDepartmentTickets: true, // Todos do departamento\n    canManageTickets: true, // Atender/resolver tickets\n    canViewReports: true, // Relatórios do departamento\n    canManageSystem: false,\n    canManageCategories: true, // Só do departamento\n    canManageDepartments: false,\n  },\n  administrador: {\n    canManageUsers: true, // Todos os usuários\n    canViewAllTickets: true, // Todos os tickets\n    canViewDepartmentTickets: true,\n    canManageTickets: true,\n    canViewReports: true, // Todos os relatórios\n    canManageSystem: true, // Configurações do sistema\n    canManageCategories: true,\n    canManageDepartments: true,\n  }\n} as const;\n\nexport type UserRole = keyof typeof ROLE_HIERARCHY;\nexport type PermissionKey = keyof typeof ROLE_PERMISSIONS.colaborador;\n\nexport interface UserPermissions {\n  // Verificar se usuário tem permissão específica\n  hasPermission: (permission: PermissionKey) => boolean;\n  \n  // Verificar hierarquia - se role atual é igual ou superior ao mínimo requerido\n  hasRoleLevel: (minRole: UserRole) => boolean;\n  \n  // Verificar se pode gerenciar outro usuário (mesmo departamento + hierarquia)\n  canManageUser: (targetUser: User) => boolean;\n  \n  // Verificar se pode ver tickets de outro usuário\n  canViewUserTickets: (targetUser: User) => boolean;\n  \n  // Informações do usuário atual\n  user: User | null;\n  userRole: UserRole;\n  isLoading: boolean;\n}\n\nexport function usePermissions(): UserPermissions {\n  const { data: user, isLoading } = useQuery<User>({ \n    queryKey: ['/api/auth/user'], \n    retry: false \n  });\n  \n  const userRole: UserRole = (user?.role as UserRole) || 'colaborador';\n  \n  const hasPermission = (permission: PermissionKey): boolean => {\n    if (!user) return false;\n    return ROLE_PERMISSIONS[userRole][permission];\n  };\n  \n  const hasRoleLevel = (minRole: UserRole): boolean => {\n    if (!user) return false;\n    return ROLE_HIERARCHY[userRole] >= ROLE_HIERARCHY[minRole];\n  };\n  \n  const canManageUser = (targetUser: User): boolean => {\n    if (!user) return false;\n    \n    // Administrador pode gerenciar todos\n    if (userRole === 'administrador') return true;\n    \n    // Supervisor pode gerenciar usuários do mesmo departamento que não sejam administradores\n    if (userRole === 'supervisor' && user.departmentId === targetUser.departmentId) {\n      return targetUser.role !== 'administrador';\n    }\n    \n    return false;\n  };\n  \n  const canViewUserTickets = (targetUser: User): boolean => {\n    if (!user) return false;\n    \n    // Usuário sempre pode ver seus próprios tickets\n    if (user.id === targetUser.id) return true;\n    \n    // Administrador vê todos\n    if (userRole === 'administrador') return true;\n    \n    // Supervisor vê todos do departamento\n    if (userRole === 'supervisor' && user.departmentId === targetUser.departmentId) {\n      return true;\n    }\n    \n    return false;\n  };\n  \n  return {\n    hasPermission,\n    hasRoleLevel,\n    canManageUser,\n    canViewUserTickets,\n    user,\n    userRole,\n    isLoading\n  };\n}","size_bytes":3745},"client/src/pages/PermissionSettings.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Shield, \n  Users, \n  Eye, \n  Settings, \n  FileText, \n  Building2,\n  Ticket,\n  BarChart3\n} from 'lucide-react';\nimport { usePermissions } from '@/hooks/usePermissions';\nimport { AdminOnly } from '@/components/PermissionGuard';\n\ninterface PermissionConfig {\n  key: string;\n  name: string;\n  description: string;\n  icon: any;\n  color: string;\n}\n\nconst PERMISSION_CONFIG: PermissionConfig[] = [\n  {\n    key: 'canManageUsers',\n    name: 'Gerenciar Usuários',\n    description: 'Criar, editar e excluir usuários',\n    icon: Users,\n    color: 'text-blue-600'\n  },\n  {\n    key: 'canViewAllTickets',\n    name: 'Visualizar Todos os Tickets',\n    description: 'Ver tickets de todos os departamentos',\n    icon: Eye,\n    color: 'text-green-600'\n  },\n  {\n    key: 'canViewDepartmentTickets',\n    name: 'Visualizar Tickets do Departamento',\n    description: 'Ver todos os tickets do próprio departamento',\n    icon: Ticket,\n    color: 'text-purple-600'\n  },\n  {\n    key: 'canManageTickets',\n    name: 'Gerenciar Tickets',\n    description: 'Atender, resolver e gerenciar tickets',\n    icon: Settings,\n    color: 'text-orange-600'\n  },\n  {\n    key: 'canViewReports',\n    name: 'Visualizar Relatórios',\n    description: 'Acesso aos relatórios do sistema',\n    icon: BarChart3,\n    color: 'text-indigo-600'\n  },\n  {\n    key: 'canManageSystem',\n    name: 'Configurações do Sistema',\n    description: 'Acesso às configurações administrativas',\n    icon: Settings,\n    color: 'text-red-600'\n  },\n  {\n    key: 'canManageCategories',\n    name: 'Gerenciar Categorias',\n    description: 'Criar e gerenciar categorias de tickets',\n    icon: FileText,\n    color: 'text-yellow-600'\n  },\n  {\n    key: 'canManageDepartments',\n    name: 'Gerenciar Departamentos',\n    description: 'Criar e gerenciar departamentos',\n    icon: Building2,\n    color: 'text-teal-600'\n  }\n];\n\nconst ROLES = [\n  { \n    key: 'colaborador', \n    name: 'Colaborador', \n    description: 'Usuário básico que pode criar tickets',\n    color: 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n  },\n  { \n    key: 'supervisor', \n    name: 'Supervisor', \n    description: 'Gerencia tickets e usuários do departamento',\n    color: 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100'\n  },\n  { \n    key: 'administrador', \n    name: 'Administrador', \n    description: 'Acesso total ao sistema',\n    color: 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'\n  }\n];\n\n// Permissões padrão por role\nconst DEFAULT_PERMISSIONS = {\n  colaborador: {\n    canManageUsers: false,\n    canViewAllTickets: false,\n    canViewDepartmentTickets: false,\n    canManageTickets: false,\n    canViewReports: false,\n    canManageSystem: false,\n    canManageCategories: false,\n    canManageDepartments: false,\n  },\n  supervisor: {\n    canManageUsers: true,\n    canViewAllTickets: false,\n    canViewDepartmentTickets: true,\n    canManageTickets: true,\n    canViewReports: true,\n    canManageSystem: false,\n    canManageCategories: true,\n    canManageDepartments: false,\n  },\n  administrador: {\n    canManageUsers: true,\n    canViewAllTickets: true,\n    canViewDepartmentTickets: true,\n    canManageTickets: true,\n    canViewReports: true,\n    canManageSystem: true,\n    canManageCategories: true,\n    canManageDepartments: true,\n  }\n};\n\nexport default function PermissionSettings() {\n  const { hasPermission, userRole } = usePermissions();\n  const [selectedRole, setSelectedRole] = useState<string>('colaborador');\n\n  return (\n    <AdminOnly fallback={\n      <div className=\"p-6 text-center\">\n        <Shield className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n        <h2 className=\"text-xl font-semibold text-gray-600 mb-2\">Acesso Restrito</h2>\n        <p className=\"text-gray-500\">Apenas administradores podem acessar as configurações de permissões.</p>\n      </div>\n    }>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3\">\n              <Shield className=\"w-8 h-8 text-red-600\" />\n              Permissões do Sistema\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n              Configure as permissões para cada hierarquia de usuário\n            </p>\n          </div>\n        </div>\n\n        {/* Seleção de Role */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg text-opus-blue-dark\">Hierarquias de Usuário</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {ROLES.map((role) => (\n                <div\n                  key={role.key}\n                  className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                    selectedRole === role.key \n                      ? 'border-opus-blue-dark bg-opus-blue-dark bg-opacity-5' \n                      : 'border-gray-200 hover:border-opus-blue-light'\n                  }`}\n                  onClick={() => setSelectedRole(role.key)}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">{role.name}</h3>\n                    <Badge className={role.color}>\n                      {role.key === userRole ? 'Seu nível' : role.key}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{role.description}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Matriz de Permissões */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg text-opus-blue-dark\">\n              Permissões para {ROLES.find(r => r.key === selectedRole)?.name}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {PERMISSION_CONFIG.map((permission) => {\n                const Icon = permission.icon;\n                const hasThisPermission = DEFAULT_PERMISSIONS[selectedRole as keyof typeof DEFAULT_PERMISSIONS]?.[permission.key as keyof typeof DEFAULT_PERMISSIONS.colaborador];\n                \n                return (\n                  <div key={permission.key} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`p-2 rounded-lg bg-gray-100 dark:bg-gray-800 ${permission.color}`}>\n                        <Icon className=\"w-5 h-5\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">{permission.name}</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{permission.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch \n                        checked={hasThisPermission} \n                        disabled={true} // Apenas visualização por enquanto\n                      />\n                      <span className=\"text-sm text-gray-500\">\n                        {hasThisPermission ? 'Permitido' : 'Negado'}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Resumo das Hierarquias */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg text-opus-blue-dark\">Resumo das Hierarquias</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                  <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100 mr-2\">\n                    Colaborador\n                  </Badge>\n                  - Usuário Básico\n                </h4>\n                <ul className=\"text-sm text-gray-600 dark:text-gray-400 list-disc list-inside space-y-1\">\n                  <li>Pode criar tickets</li>\n                  <li>Visualiza apenas seus próprios tickets</li>\n                  <li>Não tem acesso a relatórios ou configurações</li>\n                </ul>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-900 dark:bg-opacity-20 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                  <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100 mr-2\">\n                    Supervisor\n                  </Badge>\n                  - Gerente de Departamento\n                </h4>\n                <ul className=\"text-sm text-gray-600 dark:text-gray-400 list-disc list-inside space-y-1\">\n                  <li>Gerencia usuários do próprio departamento</li>\n                  <li>Visualiza todos os tickets do departamento</li>\n                  <li>Pode atender e resolver tickets</li>\n                  <li>Acesso a relatórios do departamento</li>\n                </ul>\n              </div>\n\n              <div className=\"p-4 bg-red-50 dark:bg-red-900 dark:bg-opacity-20 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                  <Badge className=\"bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100 mr-2\">\n                    Administrador\n                  </Badge>\n                  - Acesso Total\n                </h4>\n                <ul className=\"text-sm text-gray-600 dark:text-gray-400 list-disc list-inside space-y-1\">\n                  <li>Acesso total a todas as funcionalidades</li>\n                  <li>Gerencia todos os usuários e departamentos</li>\n                  <li>Visualiza todos os tickets do sistema</li>\n                  <li>Acesso a todas as configurações e relatórios</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AdminOnly>\n  );\n}","size_bytes":10573},"server/middleware/permissionMiddleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { storage } from '../storage';\n\n// Definir hierarquia de roles\nconst ROLE_HIERARCHY = {\n  colaborador: 0,\n  supervisor: 1,\n  administrador: 2\n} as const;\n\n// Definir permissões por role\nconst ROLE_PERMISSIONS = {\n  colaborador: {\n    canManageUsers: false,\n    canViewAllTickets: false,\n    canViewDepartmentTickets: false,\n    canManageTickets: false,\n    canViewReports: false,\n    canManageSystem: false,\n    canManageCategories: false,\n    canManageDepartments: false,\n  },\n  supervisor: {\n    canManageUsers: true, // Só do seu departamento\n    canViewAllTickets: false,\n    canViewDepartmentTickets: true, // Todos do departamento\n    canManageTickets: true,\n    canViewReports: true,\n    canManageSystem: false,\n    canManageCategories: true, // Só do departamento\n    canManageDepartments: false,\n  },\n  administrador: {\n    canManageUsers: true, // Todos os usuários\n    canViewAllTickets: true, // Todos os tickets\n    canViewDepartmentTickets: true,\n    canManageTickets: true,\n    canViewReports: true, // Todos os relatórios\n    canManageSystem: true, // Configurações do sistema\n    canManageCategories: true,\n    canManageDepartments: true,\n  }\n} as const;\n\ntype UserRole = keyof typeof ROLE_HIERARCHY;\ntype PermissionKey = keyof typeof ROLE_PERMISSIONS.colaborador;\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    role: UserRole;\n    departmentId?: string;\n  };\n}\n\nexport function requirePermission(permission: PermissionKey) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const authReq = req as AuthenticatedRequest;\n      \n      if (!authReq.user) {\n        return res.status(401).json({ message: 'Usuário não autenticado' });\n      }\n\n      const userRole = authReq.user.role;\n      const hasPermission = ROLE_PERMISSIONS[userRole]?.[permission];\n\n      if (!hasPermission) {\n        return res.status(403).json({ \n          message: 'Acesso negado. Permissão insuficiente.',\n          required: permission,\n          userRole: userRole\n        });\n      }\n\n      next();\n    } catch (error) {\n      console.error('Erro no middleware de permissão:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  };\n}\n\nexport function requireRole(minRole: UserRole) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const authReq = req as AuthenticatedRequest;\n      \n      if (!authReq.user) {\n        return res.status(401).json({ message: 'Usuário não autenticado' });\n      }\n\n      const userRole = authReq.user.role;\n      const userLevel = ROLE_HIERARCHY[userRole] || 0;\n      const requiredLevel = ROLE_HIERARCHY[minRole] || 0;\n\n      if (userLevel < requiredLevel) {\n        return res.status(403).json({ \n          message: 'Acesso negado. Nível hierárquico insuficiente.',\n          required: minRole,\n          userRole: userRole\n        });\n      }\n\n      next();\n    } catch (error) {\n      console.error('Erro no middleware de role:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  };\n}\n\n// Middleware para filtrar tickets baseado na hierarquia\nexport async function filterTicketsByHierarchy(req: Request, res: Response, next: NextFunction) {\n  try {\n    const authReq = req as AuthenticatedRequest;\n    \n    if (!authReq.user) {\n      return res.status(401).json({ message: 'Usuário não autenticado' });\n    }\n\n    const userRole = authReq.user.role;\n    const userId = authReq.user.id;\n    const userDepartmentId = authReq.user.departmentId;\n\n    // Adicionar parâmetros de filtro baseado na hierarquia\n    switch (userRole) {\n      case 'colaborador':\n        // Colaboradores só veem seus próprios tickets\n        req.query.createdBy = userId;\n        break;\n      \n      case 'supervisor':\n        // Supervisores veem todos do departamento\n        if (userDepartmentId) {\n          req.query.departmentId = userDepartmentId;\n        }\n        break;\n      \n      case 'administrador':\n        // Administradores veem tudo (sem filtro adicional)\n        break;\n      \n      default:\n        // Fallback para colaborador\n        req.query.createdBy = userId;\n        break;\n    }\n\n    next();\n  } catch (error) {\n    console.error('Erro no middleware de filtro de tickets:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n}\n\n// Middleware para autenticação simulada (será substituído pelo sistema real de auth)\nexport function mockAuth(req: Request, res: Response, next: NextFunction) {\n  // Simulação temporária - em produção será substituído pelo sistema de autenticação real\n  const authReq = req as AuthenticatedRequest;\n  authReq.user = {\n    id: 'user-1',\n    role: 'administrador', // Mudar para testar diferentes roles\n    departmentId: 'dept-1'\n  };\n  \n  next();\n}\n\nexport { AuthenticatedRequest };","size_bytes":4947},"server/routes/permissions.ts":{"content":"import { Router } from 'express';\nimport { requireRole, requirePermission, AuthenticatedRequest } from '../middleware/permissionMiddleware';\n\nconst router = Router();\n\n// Rota para obter permissões do usuário atual\nrouter.get('/api/auth/permissions', async (req, res) => {\n  try {\n    const authReq = req as AuthenticatedRequest;\n    \n    if (!authReq.user) {\n      return res.status(401).json({ message: 'Usuário não autenticado' });\n    }\n\n    const userRole = authReq.user.role;\n    \n    // Definir permissões baseadas na hierarquia\n    const permissions = {\n      colaborador: {\n        canManageUsers: false,\n        canViewAllTickets: false,\n        canViewDepartmentTickets: false,\n        canManageTickets: false,\n        canViewReports: false,\n        canManageSystem: false,\n        canManageCategories: false,\n        canManageDepartments: false,\n      },\n      supervisor: {\n        canManageUsers: true,\n        canViewAllTickets: false,\n        canViewDepartmentTickets: true,\n        canManageTickets: true,\n        canViewReports: true,\n        canManageSystem: false,\n        canManageCategories: true,\n        canManageDepartments: false,\n      },\n      administrador: {\n        canManageUsers: true,\n        canViewAllTickets: true,\n        canViewDepartmentTickets: true,\n        canManageTickets: true,\n        canViewReports: true,\n        canManageSystem: true,\n        canManageCategories: true,\n        canManageDepartments: true,\n      }\n    };\n\n    res.json({\n      role: userRole,\n      permissions: permissions[userRole] || permissions.colaborador,\n      user: authReq.user\n    });\n\n  } catch (error) {\n    console.error('Erro ao obter permissões:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Rota protegida apenas para administradores - gerenciar departamentos\nrouter.get('/api/admin/departments', \n  requireRole('administrador'),\n  (req, res) => {\n    res.json({ message: 'Acesso liberado para administradores - departamentos' });\n  }\n);\n\n// Rota protegida para supervisores e acima - gerenciar usuários\nrouter.get('/api/supervisor/users',\n  requireRole('supervisor'),\n  (req, res) => {\n    res.json({ message: 'Acesso liberado para supervisores - usuários' });\n  }\n);\n\n// Rota protegida por permissão específica - relatórios\nrouter.get('/api/reports/advanced',\n  requirePermission('canViewReports'),\n  (req, res) => {\n    res.json({ message: 'Acesso liberado para visualização de relatórios' });\n  }\n);\n\nexport default router;","size_bytes":2516},"client/src/components/NotificationSystem.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Bell, X, Ticket, Clock, User, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useQuery } from '@tanstack/react-query';\nimport { getCurrentUser } from '@/lib/userService';\n\ninterface Notification {\n  id: string;\n  type: 'ticket_assigned' | 'ticket_updated' | 'ticket_resolved' | 'sla_warning';\n  title: string;\n  message: string;\n  ticketId?: string;\n  timestamp: Date;\n  read: boolean;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface NotificationSystemProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NotificationSystem: React.FC<NotificationSystemProps> = ({ isOpen, onClose }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const currentUser = getCurrentUser();\n\n  // Buscar notificações do usuário logado\n  const { data: userNotifications } = useQuery({\n    queryKey: ['/api/notifications', currentUser.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/notifications?userId=${currentUser.id}`);\n      return response.json();\n    },\n    refetchInterval: 30000, // Atualizar a cada 30 segundos\n  });\n\n  // Buscar tickets atribuídos ao usuário para gerar notificações\n  const { data: assignedTickets } = useQuery({\n    queryKey: ['/api/tickets/assigned', currentUser.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/tickets?assignedTo=${currentUser.id}&status=open`);\n      return response.json();\n    },\n    refetchInterval: 60000, // Atualizar a cada minuto\n  });\n\n  useEffect(() => {\n    if (assignedTickets) {\n      // Gerar notificações para tickets atribuídos\n      const ticketNotifications: Notification[] = assignedTickets.map((ticket: any) => {\n        const createdTime = new Date(ticket.createdAt);\n        const now = new Date();\n        const hoursPassed = (now.getTime() - createdTime.getTime()) / (1000 * 60 * 60);\n        \n        let priority: 'low' | 'medium' | 'high' | 'critical' = 'low';\n        let type: 'ticket_assigned' | 'sla_warning' = 'ticket_assigned';\n        \n        if (hoursPassed > 2) {\n          priority = 'critical';\n          type = 'sla_warning';\n        } else if (hoursPassed > 1) {\n          priority = 'high';\n        } else if (hoursPassed > 0.5) {\n          priority = 'medium';\n        }\n\n        return {\n          id: `ticket-${ticket.id}`,\n          type,\n          title: type === 'sla_warning' ? 'Alerta de SLA!' : 'Novo Ticket Atribuído',\n          message: `${ticket.subject} - ${ticket.requesterName || 'Cliente'}`,\n          ticketId: ticket.id,\n          timestamp: createdTime,\n          read: false,\n          priority\n        };\n      });\n\n      setNotifications(ticketNotifications);\n    }\n  }, [assignedTickets]);\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const markAsRead = (notificationId: string) => {\n    setNotifications(prev => \n      prev.map(n => n.id === notificationId ? { ...n, read: true } : n)\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100';\n      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-100';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100';\n      default: return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100';\n    }\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'ticket_assigned': return <Ticket className=\"w-4 h-4\" />;\n      case 'sla_warning': return <AlertCircle className=\"w-4 h-4\" />;\n      case 'ticket_updated': return <Clock className=\"w-4 h-4\" />;\n      case 'ticket_resolved': return <User className=\"w-4 h-4\" />;\n      default: return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-start justify-end z-50 p-4\">\n      <Card className=\"w-full max-w-md mt-16 mr-4 shadow-lg\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5 text-opus-blue-dark\" />\n            Notificações\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">\n                {unreadCount}\n              </Badge>\n            )}\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        \n        <CardContent>\n          {notifications.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Bell className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n              <p>Nenhuma notificação no momento</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex justify-between items-center mb-4\">\n                <span className=\"text-sm text-gray-600\">\n                  {notifications.length} notificação(ões)\n                </span>\n                {unreadCount > 0 && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={markAllAsRead}\n                    className=\"text-xs\"\n                  >\n                    Marcar todas como lidas\n                  </Button>\n                )}\n              </div>\n\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-3\">\n                  {notifications\n                    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n                    .map((notification) => (\n                    <div\n                      key={notification.id}\n                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                        notification.read \n                          ? 'bg-gray-50 dark:bg-gray-800 opacity-75' \n                          : 'bg-white dark:bg-gray-900 shadow-sm'\n                      }`}\n                      onClick={() => markAsRead(notification.id)}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <div className={`p-2 rounded-full ${getPriorityColor(notification.priority)}`}>\n                          {getIcon(notification.type)}\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h4 className=\"font-medium text-sm\">{notification.title}</h4>\n                            {!notification.read && (\n                              <div className=\"w-2 h-2 bg-opus-blue-dark rounded-full\"></div>\n                            )}\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                            {notification.message}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <Badge className={getPriorityColor(notification.priority)}>\n                              {notification.priority}\n                            </Badge>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(notification.timestamp).toLocaleString('pt-BR')}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Hook para usar as notificações\nexport const useNotifications = () => {\n  const currentUser = getCurrentUser();\n\n  const { data: notifications = [], refetch } = useQuery({\n    queryKey: ['/api/notifications', currentUser.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/notifications?userId=${currentUser.id}`);\n      if (!response.ok) return [];\n      return response.json();\n    },\n    refetchInterval: 30000,\n  });\n\n  const unreadCount = notifications.filter((n: any) => !n.read).length;\n\n  return {\n    notifications,\n    unreadCount,\n    refetch\n  };\n};\n\nexport default NotificationSystem;","size_bytes":8840},"client/src/lib/userService.ts":{"content":"// Serviço para gerenciar informações do usuário atual\n// Em um sistema real, isso viria de um contexto de autenticação\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'colaborador' | 'supervisor' | 'administrador';\n  department: string;\n  avatar?: string;\n}\n\n// Usuário simulado - em produção isso viria do contexto de autenticação\nconst mockUser: User = {\n  id: '8cd6d843-31a9-48f1-a99c-a6789e592a9f',\n  name: 'João Silva',\n  email: 'joao.silva@empresa.com',\n  role: 'administrador', // Para demonstração, vamos usar administrador\n  department: 'Tecnologia da Informação',\n  avatar: null\n};\n\nexport function getCurrentUser(): User {\n  // Em um sistema real, isso obteria dados do contexto de autenticação\n  // ou de um cookie/token JWT\n  return mockUser;\n}\n\nexport function isAdmin(): boolean {\n  return getCurrentUser().role === 'administrador';\n}\n\nexport function isSupervisor(): boolean {\n  const role = getCurrentUser().role;\n  return role === 'supervisor' || role === 'administrador';\n}\n\nexport function hasPermission(permission: string): boolean {\n  const user = getCurrentUser();\n  \n  // Administradores têm todas as permissões\n  if (user.role === 'administrador') {\n    return true;\n  }\n  \n  // Supervisores têm permissões limitadas\n  if (user.role === 'supervisor') {\n    const supervisorPermissions = [\n      'canViewOwnTickets', \n      'canCreateTickets', \n      'canEditTickets', \n      'canAssignTickets',\n      'canViewUsers', \n      'canManageUsers', \n      'canViewDepartments', \n      'canViewReports', \n      'canViewDeptReports', \n      'canManageCategories'\n    ];\n    return supervisorPermissions.includes(permission);\n  }\n  \n  // Colaboradores têm permissões básicas\n  if (user.role === 'colaborador') {\n    const colaboradorPermissions = ['canViewOwnTickets', 'canCreateTickets'];\n    return colaboradorPermissions.includes(permission);\n  }\n  \n  return false;\n}","size_bytes":1936},"client/src/pages/RolesManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, Shield, Eye, Settings, Users, Building2, FileText, BarChart3, Cog } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AdminOnly } from \"@/components/PermissionGuard\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Permission {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon: any;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n  color: string;\n  permissions: string[];\n  userCount?: number;\n  isSystem?: boolean; // Roles do sistema não podem ser deletadas\n}\n\nconst AVAILABLE_PERMISSIONS: Permission[] = [\n  // Tickets\n  { id: 'tickets.create', name: 'Criar Tickets', description: 'Pode criar novos tickets', category: 'Tickets', icon: Plus },\n  { id: 'tickets.view_own', name: 'Ver Próprios Tickets', description: 'Pode ver seus próprios tickets', category: 'Tickets', icon: Eye },\n  { id: 'tickets.view_all', name: 'Ver Todos os Tickets', description: 'Pode ver todos os tickets do sistema', category: 'Tickets', icon: FileText },\n  { id: 'tickets.edit', name: 'Editar Tickets', description: 'Pode editar tickets', category: 'Tickets', icon: Edit },\n  { id: 'tickets.delete', name: 'Deletar Tickets', description: 'Pode deletar tickets', category: 'Tickets', icon: Trash2 },\n  { id: 'tickets.assign', name: 'Atribuir Tickets', description: 'Pode atribuir tickets para outros usuários', category: 'Tickets', icon: Users },\n\n  // Usuários\n  { id: 'users.view', name: 'Ver Usuários', description: 'Pode visualizar lista de usuários', category: 'Usuários', icon: Users },\n  { id: 'users.create', name: 'Criar Usuários', description: 'Pode criar novos usuários', category: 'Usuários', icon: Plus },\n  { id: 'users.edit', name: 'Editar Usuários', description: 'Pode editar dados de usuários', category: 'Usuários', icon: Edit },\n  { id: 'users.delete', name: 'Deletar Usuários', description: 'Pode deletar usuários', category: 'Usuários', icon: Trash2 },\n\n  // Departamentos\n  { id: 'departments.view', name: 'Ver Departamentos', description: 'Pode visualizar departamentos', category: 'Departamentos', icon: Building2 },\n  { id: 'departments.manage', name: 'Gerenciar Departamentos', description: 'Pode criar, editar e deletar departamentos', category: 'Departamentos', icon: Settings },\n\n  // Relatórios\n  { id: 'reports.view', name: 'Ver Relatórios', description: 'Pode visualizar relatórios básicos', category: 'Relatórios', icon: BarChart3 },\n  { id: 'reports.advanced', name: 'Relatórios Avançados', description: 'Pode visualizar todos os relatórios', category: 'Relatórios', icon: BarChart3 },\n\n  // Sistema\n  { id: 'system.admin', name: 'Administração Sistema', description: 'Acesso completo às configurações do sistema', category: 'Sistema', icon: Cog },\n  { id: 'system.roles', name: 'Gerenciar Funções', description: 'Pode gerenciar funções e permissões', category: 'Sistema', icon: Shield },\n];\n\nconst DEFAULT_ROLES: Role[] = [\n  {\n    id: 'administrador',\n    name: 'Administrador',\n    description: 'Acesso completo ao sistema com todas as permissões',\n    color: 'bg-purple-100 text-purple-800',\n    permissions: AVAILABLE_PERMISSIONS.map(p => p.id),\n    isSystem: true\n  },\n  {\n    id: 'supervisor',\n    name: 'Supervisor',\n    description: 'Gerencia equipes e tem acesso a relatórios departamentais',\n    color: 'bg-blue-100 text-blue-800',\n    permissions: [\n      'tickets.create', 'tickets.view_all', 'tickets.edit', 'tickets.assign',\n      'users.view', 'users.edit', 'departments.view', 'reports.view', 'reports.advanced'\n    ],\n    isSystem: true\n  },\n  {\n    id: 'colaborador',\n    name: 'Colaborador',\n    description: 'Acesso básico para criação e atendimento de tickets',\n    color: 'bg-green-100 text-green-800',\n    permissions: [\n      'tickets.create', 'tickets.view_own', 'tickets.edit'\n    ],\n    isSystem: true\n  }\n];\n\nexport default function RolesManagement() {\n  const [roles, setRoles] = useState<Role[]>(DEFAULT_ROLES);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingRole, setEditingRole] = useState<Role | null>(null);\n  const [newRole, setNewRole] = useState<Partial<Role>>({\n    name: '',\n    description: '',\n    color: 'bg-slate-100 text-slate-800',\n    permissions: []\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar usuários para contagem por função\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/users'],\n    refetchInterval: 30000,\n  }) as { data: any[] };\n\n  useEffect(() => {\n    setRoles(prevRoles => \n      prevRoles.map(role => ({\n        ...role,\n        userCount: users.filter((user: any) => user.role === role.id).length\n      }))\n    );\n  }, [users]);\n\n  const handleCreateRole = async () => {\n    if (!newRole.name || !newRole.description) {\n      toast({\n        title: \"Erro de Validação\",\n        description: \"Nome e descrição são obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const roleToCreate: Role = {\n      id: newRole.name!.toLowerCase().replace(/\\s+/g, '_'),\n      name: newRole.name!,\n      description: newRole.description!,\n      color: newRole.color || 'bg-slate-100 text-slate-800',\n      permissions: newRole.permissions || [],\n      userCount: 0,\n      isSystem: false\n    };\n\n    setRoles(prev => [...prev, roleToCreate]);\n    setIsCreateModalOpen(false);\n    setNewRole({ name: '', description: '', color: 'bg-slate-100 text-slate-800', permissions: [] });\n\n    toast({\n      title: \"Sucesso\",\n      description: \"Função criada com sucesso\",\n    });\n  };\n\n  const handleEditRole = (role: Role) => {\n    setEditingRole({ ...role });\n    setIsEditModalOpen(true);\n  };\n\n  const handleUpdateRole = async () => {\n    if (!editingRole) return;\n\n    setRoles(prev => prev.map(role => \n      role.id === editingRole.id ? editingRole : role\n    ));\n\n    setIsEditModalOpen(false);\n    setEditingRole(null);\n\n    toast({\n      title: \"Sucesso\",\n      description: \"Função atualizada com sucesso\",\n    });\n  };\n\n  const handleDeleteRole = async (roleId: string) => {\n    const role = roles.find(r => r.id === roleId);\n    if (!role) return;\n\n    if (role.isSystem) {\n      toast({\n        title: \"Operação Não Permitida\",\n        description: \"Funções do sistema não podem ser deletadas\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userCount = users.filter((user: any) => user.role === roleId).length;\n    if (userCount > 0) {\n      toast({\n        title: \"Operação Não Permitida\",\n        description: `Não é possível deletar uma função com ${userCount} usuário(s) associado(s)`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const confirmDelete = window.confirm(\n      `Tem certeza que deseja deletar a função \"${role.name}\"? Esta ação não pode ser desfeita.`\n    );\n\n    if (!confirmDelete) return;\n\n    setRoles(prev => prev.filter(r => r.id !== roleId));\n\n    toast({\n      title: \"Sucesso\",\n      description: \"Função deletada com sucesso\",\n    });\n  };\n\n  const handlePermissionToggle = (permissionId: string, isCreate = false) => {\n    const updatePermissions = (current: string[]) => {\n      const hasPermission = current.includes(permissionId);\n      return hasPermission \n        ? current.filter(p => p !== permissionId)\n        : [...current, permissionId];\n    };\n\n    if (isCreate) {\n      setNewRole(prev => ({\n        ...prev,\n        permissions: updatePermissions(prev.permissions || [])\n      }));\n    } else if (editingRole) {\n      setEditingRole(prev => prev ? ({\n        ...prev,\n        permissions: updatePermissions(prev.permissions)\n      }) : null);\n    }\n  };\n\n  const getPermissionsByCategory = () => {\n    const grouped: { [key: string]: Permission[] } = {};\n    AVAILABLE_PERMISSIONS.forEach(permission => {\n      if (!grouped[permission.category]) {\n        grouped[permission.category] = [];\n      }\n      grouped[permission.category].push(permission);\n    });\n    return grouped;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'Tickets': return FileText;\n      case 'Usuários': return Users;\n      case 'Departamentos': return Building2;\n      case 'Relatórios': return BarChart3;\n      case 'Sistema': return Cog;\n      default: return Settings;\n    }\n  };\n\n  return (\n    <AdminOnly>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-opus-blue-dark\">Configuração de Funções</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n              Gerencie funções e permissões do sistema de usuários\n            </p>\n          </div>\n          <Button \n            onClick={() => setIsCreateModalOpen(true)}\n            className=\"bg-opus-blue-dark hover:bg-opus-blue-light\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nova Função\n          </Button>\n        </div>\n\n        {/* Lista de Funções */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {roles.map((role) => (\n            <Card key={role.id} className=\"relative\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-800\">\n                      <Shield className=\"w-5 h-5 text-opus-blue-dark\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg\">{role.name}</CardTitle>\n                      <Badge className={role.color}>\n                        {role.userCount || 0} usuário(s)\n                      </Badge>\n                    </div>\n                  </div>\n                  {!role.isSystem && (\n                    <div className=\"flex gap-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleEditRole(role)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleDeleteRole(role.id)}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"mb-4\">\n                  {role.description}\n                </CardDescription>\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Permissões: {role.permissions.length}\n                  </p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {role.permissions.slice(0, 3).map(permissionId => {\n                      const permission = AVAILABLE_PERMISSIONS.find(p => p.id === permissionId);\n                      return permission ? (\n                        <Badge key={permissionId} variant=\"secondary\" className=\"text-xs\">\n                          {permission.name}\n                        </Badge>\n                      ) : null;\n                    })}\n                    {role.permissions.length > 3 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        +{role.permissions.length - 3} mais\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                {role.isSystem && (\n                  <Badge variant=\"outline\" className=\"mt-2\">\n                    Função do Sistema\n                  </Badge>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Modal de Criação */}\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Criar Nova Função</DialogTitle>\n              <DialogDescription>\n                Defina o nome, descrição e permissões para a nova função\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nome da Função</Label>\n                  <Input\n                    id=\"name\"\n                    value={newRole.name || ''}\n                    onChange={(e) => setNewRole(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Ex: Analista, Operador...\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"color\">Cor</Label>\n                  <select\n                    id=\"color\"\n                    value={newRole.color}\n                    onChange={(e) => setNewRole(prev => ({ ...prev, color: e.target.value }))}\n                    className=\"w-full px-3 py-2 border rounded-md\"\n                  >\n                    <option value=\"bg-slate-100 text-slate-800\">Cinza</option>\n                    <option value=\"bg-blue-100 text-blue-800\">Azul</option>\n                    <option value=\"bg-green-100 text-green-800\">Verde</option>\n                    <option value=\"bg-yellow-100 text-yellow-800\">Amarelo</option>\n                    <option value=\"bg-purple-100 text-purple-800\">Roxo</option>\n                    <option value=\"bg-red-100 text-red-800\">Vermelho</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Descrição</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newRole.description || ''}\n                  onChange={(e) => setNewRole(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Descreva as responsabilidades desta função...\"\n                />\n              </div>\n\n              <div>\n                <Label>Permissões</Label>\n                <div className=\"mt-2 space-y-4\">\n                  {Object.entries(getPermissionsByCategory()).map(([category, permissions]) => {\n                    const Icon = getCategoryIcon(category);\n                    return (\n                      <div key={category} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-3\">\n                          <Icon className=\"w-5 h-5 text-opus-blue-dark\" />\n                          <h4 className=\"font-semibold\">{category}</h4>\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                          {permissions.map((permission) => (\n                            <div key={permission.id} className=\"flex items-center space-x-2\">\n                              <Checkbox\n                                id={`new-${permission.id}`}\n                                checked={newRole.permissions?.includes(permission.id)}\n                                onCheckedChange={() => handlePermissionToggle(permission.id, true)}\n                              />\n                              <Label htmlFor={`new-${permission.id}`} className=\"text-sm\">\n                                {permission.name}\n                                <p className=\"text-xs text-gray-500\">{permission.description}</p>\n                              </Label>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsCreateModalOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={handleCreateRole} className=\"bg-opus-blue-dark hover:bg-opus-blue-light\">\n                Criar Função\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Edição */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Editar Função: {editingRole?.name}</DialogTitle>\n              <DialogDescription>\n                Modifique as permissões e configurações da função\n              </DialogDescription>\n            </DialogHeader>\n\n            {editingRole && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-name\">Nome da Função</Label>\n                    <Input\n                      id=\"edit-name\"\n                      value={editingRole.name}\n                      onChange={(e) => setEditingRole(prev => prev ? ({ ...prev, name: e.target.value }) : null)}\n                      disabled={editingRole.isSystem}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-color\">Cor</Label>\n                    <select\n                      id=\"edit-color\"\n                      value={editingRole.color}\n                      onChange={(e) => setEditingRole(prev => prev ? ({ ...prev, color: e.target.value }) : null)}\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                      disabled={editingRole.isSystem}\n                    >\n                      <option value=\"bg-slate-100 text-slate-800\">Cinza</option>\n                      <option value=\"bg-blue-100 text-blue-800\">Azul</option>\n                      <option value=\"bg-green-100 text-green-800\">Verde</option>\n                      <option value=\"bg-yellow-100 text-yellow-800\">Amarelo</option>\n                      <option value=\"bg-purple-100 text-purple-800\">Roxo</option>\n                      <option value=\"bg-red-100 text-red-800\">Vermelho</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-description\">Descrição</Label>\n                  <Textarea\n                    id=\"edit-description\"\n                    value={editingRole.description}\n                    onChange={(e) => setEditingRole(prev => prev ? ({ ...prev, description: e.target.value }) : null)}\n                    disabled={editingRole.isSystem}\n                  />\n                </div>\n\n                <div>\n                  <Label>Permissões</Label>\n                  <div className=\"mt-2 space-y-4\">\n                    {Object.entries(getPermissionsByCategory()).map(([category, permissions]) => {\n                      const Icon = getCategoryIcon(category);\n                      return (\n                        <div key={category} className=\"border rounded-lg p-4\">\n                          <div className=\"flex items-center gap-2 mb-3\">\n                            <Icon className=\"w-5 h-5 text-opus-blue-dark\" />\n                            <h4 className=\"font-semibold\">{category}</h4>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                            {permissions.map((permission) => (\n                              <div key={permission.id} className=\"flex items-center space-x-2\">\n                                <Checkbox\n                                  id={`edit-${permission.id}`}\n                                  checked={editingRole.permissions.includes(permission.id)}\n                                  onCheckedChange={() => handlePermissionToggle(permission.id, false)}\n                                />\n                                <Label htmlFor={`edit-${permission.id}`} className=\"text-sm\">\n                                  {permission.name}\n                                  <p className=\"text-xs text-gray-500\">{permission.description}</p>\n                                </Label>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsEditModalOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={handleUpdateRole} className=\"bg-opus-blue-dark hover:bg-opus-blue-light\">\n                Salvar Alterações\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AdminOnly>\n  );\n}","size_bytes":21798},"client/src/pages/LoginPage.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Eye, EyeOff, LogIn, Mail, Lock, Building2, Shield } from 'lucide-react';\nimport { FaMicrosoft } from 'react-icons/fa';\nimport OpusLogo from '@assets/Logo Grupo OPUS - azul escuro.azul claro1_1754938736660.png';\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Check if already logged in\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const currentUser = localStorage.getItem('currentUser');\n    \n    if (token && currentUser) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        console.log('Login bem-sucedido, dados recebidos:', data);\n        \n        // Store authentication data\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('currentUser', JSON.stringify(data.user));\n\n        toast({\n          title: \"Login realizado com sucesso\",\n          description: `Bem-vindo(a), ${data.user.name}!`,\n        });\n\n        console.log('Redirecionando para dashboard...');\n        \n        // Force page reload after successful login to reinitialize auth state\n        window.location.href = '/';\n      } else {\n        toast({\n          title: \"Erro no login\",\n          description: data.message || \"Credenciais inválidas\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro no login\",\n        description: \"Erro de conexão com o servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleMicrosoftLogin = () => {\n    toast({\n      title: \"Login com Microsoft\",\n      description: \"Funcionalidade em desenvolvimento. Use as credenciais de teste por enquanto.\",\n    });\n  };\n\n  const demoAccounts = [\n    {\n      role: 'Administrador',\n      email: 'admin@empresa.com',\n      password: 'admin123',\n      color: 'text-purple-600',\n      icon: Shield,\n      description: 'Acesso total ao sistema'\n    },\n    {\n      role: 'Supervisor',\n      email: 'maria.santos@empresa.com', \n      password: 'maria123',\n      color: 'text-blue-600',\n      icon: Building2,\n      description: 'Gerencia departamentos'\n    },\n    {\n      role: 'Colaborador',\n      email: 'ana.costa@empresa.com',\n      password: 'ana123',\n      color: 'text-green-600',\n      icon: LogIn,\n      description: 'Usuário padrão'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#2c4257] via-[#3a5267] to-[#6b8fb0] flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl flex flex-col lg:flex-row items-center gap-8\">\n        \n        {/* Left Side - Branding */}\n        <div className=\"flex-1 text-center lg:text-left text-white space-y-6\">\n          <div className=\"flex justify-center lg:justify-start\">\n            <img \n              src={OpusLogo} \n              alt=\"Grupo OPUS\" \n              className=\"h-16 w-auto filter brightness-0 invert\" \n            />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold\">\n              TicketFlow Pro\n            </h1>\n            <p className=\"text-xl text-blue-100\">\n              Sistema Avançado de Gestão de Tickets\n            </p>\n            <p className=\"text-blue-200 max-w-md mx-auto lg:mx-0\">\n              Controle total sobre seus tickets de suporte com workflow inteligente e análises avançadas.\n            </p>\n          </div>\n\n          {/* Features */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8\">\n            <div className=\"bg-white/10 rounded-lg p-4 backdrop-blur-sm\">\n              <Shield className=\"h-8 w-8 text-blue-200 mb-2\" />\n              <h3 className=\"font-semibold text-white\">Segurança</h3>\n              <p className=\"text-sm text-blue-200\">Controle de acesso por hierarquia</p>\n            </div>\n            <div className=\"bg-white/10 rounded-lg p-4 backdrop-blur-sm\">\n              <Building2 className=\"h-8 w-8 text-blue-200 mb-2\" />\n              <h3 className=\"font-semibold text-white\">Multi-departamental</h3>\n              <p className=\"text-sm text-blue-200\">Gestão por setores</p>\n            </div>\n            <div className=\"bg-white/10 rounded-lg p-4 backdrop-blur-sm\">\n              <LogIn className=\"h-8 w-8 text-blue-200 mb-2\" />\n              <h3 className=\"font-semibold text-white\">Analytics</h3>\n              <p className=\"text-sm text-blue-200\">Relatórios em tempo real</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Login Form */}\n        <div className=\"w-full max-w-md\">\n          <Card className=\"shadow-2xl border-0\">\n            <CardHeader className=\"text-center pb-4\">\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                Acesso ao Sistema\n              </CardTitle>\n              <CardDescription>\n                Entre com suas credenciais para continuar\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"seu.email@opus.com.br\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"pl-10\"\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Senha</Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder=\"Digite sua senha\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"pl-10 pr-10\"\n                      required\n                      data-testid=\"input-password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-[#2c4257] hover:bg-[#1e2e3a] text-white\"\n                  disabled={isLoading}\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? 'Entrando...' : 'Entrar'}\n                  <LogIn className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </form>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white px-2 text-muted-foreground\">Ou continue com</span>\n                </div>\n              </div>\n\n              <Button \n                variant=\"outline\" \n                className=\"w-full\" \n                onClick={handleMicrosoftLogin}\n                data-testid=\"button-microsoft-login\"\n              >\n                <FaMicrosoft className=\"mr-2 h-4 w-4 text-blue-600\" />\n                Acessar com Microsoft\n              </Button>\n\n              {/* Demo Accounts */}\n              <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Contas para Demonstração:</h3>\n                <div className=\"space-y-2\">\n                  {demoAccounts.map((account) => (\n                    <button\n                      key={account.email}\n                      onClick={() => {\n                        setEmail(account.email);\n                        setPassword(account.password);\n                      }}\n                      className=\"w-full text-left p-2 rounded border hover:bg-white hover:shadow-sm transition-all\"\n                      data-testid={`button-demo-${account.role.toLowerCase()}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <account.icon className={`h-4 w-4 ${account.color}`} />\n                        <div>\n                          <div className={`font-medium text-sm ${account.color}`}>\n                            {account.role}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">{account.description}</div>\n                          <div className=\"text-xs text-gray-400\">{account.email}</div>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"mt-4 text-center\">\n            <p className=\"text-sm text-white/80\">\n              © 2025 Grupo OPUS. Sistema desenvolvido para uso interno.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;","size_bytes":10784},"client/src/components/UserSecurityModal.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Eye, EyeOff, Shield, Key, AlertTriangle } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface UserSecurityModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: any;\n  onUpdate: (userId: string, securityData: any) => void;\n}\n\nconst UserSecurityModal: React.FC<UserSecurityModalProps> = ({\n  isOpen,\n  onClose,\n  user,\n  onUpdate\n}) => {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [forcePasswordChange, setForcePasswordChange] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Erro de Validação\",\n        description: \"As senhas não coincidem\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Erro de Validação\", \n        description: \"A senha deve ter pelo menos 6 caracteres\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const securityData = {\n        newPassword,\n        forcePasswordChange\n      };\n\n      await onUpdate(user.id, securityData);\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Configurações de segurança atualizadas com sucesso\",\n      });\n      \n      setNewPassword('');\n      setConfirmPassword('');\n      setForcePasswordChange(false);\n      onClose();\n      \n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar configurações de segurança\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateRandomPassword = () => {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n    let password = '';\n    for (let i = 0; i < 12; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    setNewPassword(password);\n    setConfirmPassword(password);\n    \n    // Copy to clipboard\n    navigator.clipboard.writeText(password).then(() => {\n      toast({\n        title: \"Senha Gerada\",\n        description: \"Nova senha gerada e copiada para a área de transferência\",\n      });\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-red-600\" />\n            Configurações de Segurança - {user?.name}\n          </DialogTitle>\n          <DialogDescription>\n            Gerencie as configurações de segurança e senha do usuário. \n            Apenas administradores podem realizar estas alterações.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* User Info Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Informações do Usuário</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Nome</Label>\n                  <p className=\"text-sm\">{user?.name}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Email</Label>\n                  <p className=\"text-sm\">{user?.email}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Hierarquia</Label>\n                  <p className=\"text-sm capitalize\">{user?.hierarchy}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Departamento</Label>\n                  <p className=\"text-sm\">{user?.department?.name}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Password Security Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Key className=\"h-4 w-4\" />\n                Alteração de Senha\n              </CardTitle>\n              <CardDescription>\n                Defina uma nova senha para o usuário. A senha deve ter pelo menos 6 caracteres.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newPassword\">Nova Senha</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"newPassword\"\n                      type={showPassword ? 'text' : 'password'}\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      placeholder=\"Digite a nova senha\"\n                      required\n                      minLength={6}\n                      data-testid=\"input-new-password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirmar Nova Senha</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"confirmPassword\"\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      placeholder=\"Confirme a nova senha\"\n                      required\n                      minLength={6}\n                      data-testid=\"input-confirm-password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                    >\n                      {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={generateRandomPassword}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Key className=\"h-4 w-4\" />\n                    Gerar Senha Segura\n                  </Button>\n                </div>\n\n                {/* Password Validation */}\n                {newPassword && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm\">Requisitos da Senha:</Label>\n                    <div className=\"space-y-1\">\n                      <div className={`flex items-center gap-2 text-sm ${newPassword.length >= 6 ? 'text-green-600' : 'text-red-600'}`}>\n                        <div className={`w-2 h-2 rounded-full ${newPassword.length >= 6 ? 'bg-green-600' : 'bg-red-600'}`} />\n                        Pelo menos 6 caracteres\n                      </div>\n                      <div className={`flex items-center gap-2 text-sm ${/[A-Z]/.test(newPassword) ? 'text-green-600' : 'text-gray-500'}`}>\n                        <div className={`w-2 h-2 rounded-full ${/[A-Z]/.test(newPassword) ? 'bg-green-600' : 'bg-gray-300'}`} />\n                        Pelo menos uma letra maiúscula (recomendado)\n                      </div>\n                      <div className={`flex items-center gap-2 text-sm ${/\\d/.test(newPassword) ? 'text-green-600' : 'text-gray-500'}`}>\n                        <div className={`w-2 h-2 rounded-full ${/\\d/.test(newPassword) ? 'bg-green-600' : 'bg-gray-300'}`} />\n                        Pelo menos um número (recomendado)\n                      </div>\n                      <div className={`flex items-center gap-2 text-sm ${/[!@#$%^&*]/.test(newPassword) ? 'text-green-600' : 'text-gray-500'}`}>\n                        <div className={`w-2 h-2 rounded-full ${/[!@#$%^&*]/.test(newPassword) ? 'bg-green-600' : 'bg-gray-300'}`} />\n                        Pelo menos um caractere especial (recomendado)\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Force Password Change Option */}\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"forcePasswordChange\"\n                    checked={forcePasswordChange}\n                    onChange={(e) => setForcePasswordChange(e.target.checked)}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"forcePasswordChange\" className=\"text-sm\">\n                    Forçar alteração de senha no próximo login\n                  </Label>\n                </div>\n\n                {forcePasswordChange && (\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      O usuário será obrigado a alterar a senha no próximo login.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Security Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Ações de Segurança</CardTitle>\n              <CardDescription>\n                Ações administrativas relacionadas à segurança da conta\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"justify-start\"\n                  onClick={() => {\n                    toast({\n                      title: \"Sessões Encerradas\",\n                      description: \"Todas as sessões ativas do usuário foram encerradas\",\n                    });\n                  }}\n                >\n                  Encerrar Todas as Sessões\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"justify-start\"\n                  onClick={async () => {\n                    try {\n                      const newStatus = !user?.isBlocked;\n                      const response = await fetch(`/api/users/${user.id}/block`, {\n                        method: 'PATCH',\n                        headers: {\n                          'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({ isBlocked: newStatus }),\n                      });\n\n                      if (response.ok) {\n                        toast({\n                          title: newStatus ? \"Conta Bloqueada\" : \"Conta Desbloqueada\",\n                          description: `A conta do usuário foi ${newStatus ? 'bloqueada' : 'desbloqueada'} com sucesso`,\n                        });\n                        setTimeout(() => {\n                          window.location.reload();\n                        }, 1000);\n                      } else {\n                        throw new Error('Erro na requisição');\n                      }\n                    } catch (error) {\n                      toast({\n                        title: \"Erro\",\n                        description: \"Erro ao alterar status da conta\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  }}\n                >\n                  {user?.isBlocked ? 'Desbloquear Conta' : 'Bloquear Conta'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} disabled={isLoading}>\n            Cancelar\n          </Button>\n          <Button \n            type=\"submit\" \n            onClick={handleSubmit}\n            disabled={isLoading || !newPassword || newPassword !== confirmPassword}\n            className=\"bg-red-600 hover:bg-red-700 text-white\"\n            data-testid=\"button-save-security\"\n          >\n            {isLoading ? 'Salvando...' : 'Salvar Configurações'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default UserSecurityModal;","size_bytes":13770},"server/routes/auth.ts":{"content":"import { Router } from 'express';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { verifyToken, AuthenticatedRequest } from '../middleware/authMiddleware';\n\nconst router = Router();\n\n// Demo users for authentication\nconst DEMO_USERS = [\n  {\n    id: 'admin-001',\n    email: 'admin@empresa.com',\n    password: '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password: admin123\n    name: 'Administrador',\n    role: 'administrador',\n    hierarchy: 'administrador',\n    department: { id: 'dept-1', name: 'Administração' }\n  },\n  {\n    id: 'supervisor-001',\n    email: 'maria.santos@empresa.com',\n    password: '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password: maria123\n    name: 'Maria Santos',\n    role: 'supervisor',\n    hierarchy: 'supervisor',\n    department: { id: 'dept-2', name: 'TI' }\n  },\n  {\n    id: 'colaborador-001',\n    email: 'ana.costa@empresa.com',\n    password: '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password: ana123\n    name: 'Ana Costa',\n    role: 'colaborador',\n    hierarchy: 'colaborador',\n    department: { id: 'dept-3', name: 'Suporte' }\n  }\n];\n\n// Hash passwords (for demo purposes, these are pre-hashed)\nconst hashPassword = async (password: string): Promise<string> => {\n  return await bcrypt.hash(password, 10);\n};\n\n// Verify password\nconst verifyPassword = async (plainPassword: string, hashedPassword: string): Promise<boolean> => {\n  return await bcrypt.compare(plainPassword, hashedPassword);\n};\n\n// Generate JWT token\nconst generateToken = (user: any): string => {\n  return jwt.sign(\n    {\n      userId: user.id,\n      email: user.email,\n      role: user.role,\n      hierarchy: user.hierarchy\n    },\n    process.env.JWT_SECRET || 'your-secret-key',\n    { expiresIn: '24h' }\n  );\n};\n\n// Login endpoint\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({\n        message: 'Email e senha são obrigatórios'\n      });\n    }\n\n    // Import storage to get real users from database\n    const { storage } = await import('../storage');\n    \n    // Find user by email in database\n    let user = await storage.getUserByEmail(email);\n    \n    // If not found in database, check demo users as fallback\n    if (!user) {\n      const demoUser = DEMO_USERS.find(u => u.email === email);\n      if (demoUser) {\n        user = demoUser;\n      }\n    }\n    \n    if (!user) {\n      return res.status(401).json({\n        message: 'Credenciais inválidas'\n      });\n    }\n\n    // For demo purposes, we'll accept the hardcoded passwords\n    const isValidPassword = \n      (email === 'admin@empresa.com' && password === 'admin123') ||\n      (email === 'maria.santos@empresa.com' && password === 'maria123') ||\n      (email === 'ana.costa@empresa.com' && password === 'ana123');\n\n    if (!isValidPassword) {\n      return res.status(401).json({\n        message: 'Credenciais inválidas'\n      });\n    }\n\n    // Generate JWT token\n    const token = generateToken(user);\n\n    // Return user data without password\n    const { password: _, ...userWithoutPassword } = user;\n\n    res.json({\n      message: 'Login realizado com sucesso',\n      token,\n      user: userWithoutPassword\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      message: 'Erro interno do servidor'\n    });\n  }\n});\n\n// Logout endpoint\nrouter.post('/logout', (req, res) => {\n  // For JWT, logout is handled client-side by removing the token\n  res.json({\n    message: 'Logout realizado com sucesso'\n  });\n});\n\n// Get current user endpoint\nrouter.get('/user', verifyToken, (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Usuário não encontrado'\n      });\n    }\n\n    // Find full user data\n    const user = DEMO_USERS.find(u => u.id === req.user?.userId);\n    \n    if (!user) {\n      return res.status(404).json({\n        message: 'Usuário não encontrado no sistema'\n      });\n    }\n\n    // Return user data without password\n    const { password: _, ...userWithoutPassword } = user;\n    res.json(userWithoutPassword);\n\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({\n      message: 'Erro interno do servidor'\n    });\n  }\n});\n\n// Refresh token endpoint\nrouter.post('/refresh', verifyToken, (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Token inválido'\n      });\n    }\n\n    // Find user\n    const user = DEMO_USERS.find(u => u.id === req.user?.userId);\n    \n    if (!user) {\n      return res.status(404).json({\n        message: 'Usuário não encontrado'\n      });\n    }\n\n    // Generate new token\n    const token = generateToken(user);\n    \n    res.json({\n      message: 'Token renovado com sucesso',\n      token\n    });\n\n  } catch (error) {\n    console.error('Refresh token error:', error);\n    res.status(500).json({\n      message: 'Erro interno do servidor'\n    });\n  }\n});\n\nexport default router;","size_bytes":5119},"client/src/components/UserDetailsModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { \n  User, \n  Phone, \n  Mail, \n  MapPin,\n  Calendar,\n  Activity,\n  BarChart3,\n  Shield,\n  Edit,\n  Save,\n  X,\n  UserCheck,\n  UserX,\n  Clock\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface UserDetailsModalProps {\n  userId: string | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function UserDetailsModal({ userId, isOpen, onClose }: UserDetailsModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [activeTab, setActiveTab] = useState('informacoes');\n\n  // Fetch user details\n  const { data: user, isLoading } = useQuery({\n    queryKey: [`/api/users/${userId}`],\n    enabled: !!userId && isOpen,\n  });\n\n  // Fetch departments for dropdown\n  const { data: departments = [] } = useQuery({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Fetch user performance data\n  const { data: performance } = useQuery({\n    queryKey: [`/api/users/${userId}/performance`],\n    enabled: !!userId && isOpen,\n  });\n\n  // Fetch user activity logs\n  const { data: activities = [] } = useQuery({\n    queryKey: [`/api/users/${userId}/activities`],\n    enabled: !!userId && isOpen,\n  });\n\n  // Fetch user permissions\n  const { data: userPermissions } = useQuery({\n    queryKey: [`/api/users/${userId}/permissions`],\n    enabled: !!userId && isOpen,\n  });\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    cpf: '',\n    phone: '',\n    role: '',\n    departmentId: '',\n    location: '',\n    extension: ''\n  });\n\n  React.useEffect(() => {\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        cpf: user.cpf || '',\n        phone: user.phone || '',\n        role: user.role || '',\n        departmentId: user.departmentId || '',\n        location: user.location || '',\n        extension: user.extension || ''\n      });\n    }\n  }, [user]);\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(`/api/users/${userId}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${userId}`] });\n      setIsEditing(false);\n      toast({\n        title: \"Usuário atualizado\",\n        description: \"Os dados do usuário foram atualizados com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao atualizar usuário\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateUserMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        cpf: user.cpf || '',\n        phone: user.phone || '',\n        role: user.role || '',\n        departmentId: user.departmentId || '',\n        location: user.location || '',\n        extension: user.extension || ''\n      });\n    }\n    setIsEditing(false);\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'admin': return 'Administrador';\n      case 'supervisor': return 'Supervisor';\n      case 'colaborador': return 'Colaborador';\n      default: return role;\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (role) {\n      case 'admin': return 'destructive';\n      case 'supervisor': return 'default';\n      case 'colaborador': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return 'Nunca';\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getDepartmentName = (departmentId: string) => {\n    const dept = departments.find((d: any) => d.id === departmentId);\n    return dept?.name || 'Não definido';\n  };\n\n  if (!userId || !isOpen) return null;\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"pb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Avatar className=\"w-16 h-16\">\n                <AvatarFallback className=\"bg-gradient-to-br from-[#2c4257] to-[#6b8fb0] text-white text-xl\">\n                  {user?.name?.split(' ').map((n: string) => n[0]).join('') || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <DialogTitle className=\"text-2xl\">{user?.name}</DialogTitle>\n                <div className=\"flex items-center space-x-3 mt-2\">\n                  <Badge variant={getRoleBadgeVariant(user?.role)}>\n                    {getRoleLabel(user?.role)}\n                  </Badge>\n                  {user?.isBlocked ? (\n                    <Badge variant=\"outline\" className=\"text-red-600 border-red-200\">\n                      <UserX className=\"w-3 h-3 mr-1\" />\n                      Bloqueado\n                    </Badge>\n                  ) : user?.isActive ? (\n                    <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">\n                      <UserCheck className=\"w-3 h-3 mr-1\" />\n                      Ativo\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"outline\" className=\"text-gray-600 border-gray-200\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Inativo\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              {isEditing ? (\n                <>\n                  <Button variant=\"outline\" onClick={handleCancel} size=\"sm\">\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Cancelar\n                  </Button>\n                  <Button onClick={handleSave} size=\"sm\" disabled={updateUserMutation.isPending}>\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    {updateUserMutation.isPending ? 'Salvando...' : 'Salvar'}\n                  </Button>\n                </>\n              ) : (\n                <Button variant=\"outline\" onClick={() => setIsEditing(true)} size=\"sm\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Editar\n                </Button>\n              )}\n            </div>\n          </div>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"informacoes\" className=\"flex items-center gap-2\">\n              <User className=\"w-4 h-4\" />\n              Informações\n            </TabsTrigger>\n            <TabsTrigger value=\"performance\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Performance\n            </TabsTrigger>\n            <TabsTrigger value=\"atividade\" className=\"flex items-center gap-2\">\n              <Activity className=\"w-4 h-4\" />\n              Atividade\n            </TabsTrigger>\n            <TabsTrigger value=\"permissoes\" className=\"flex items-center gap-2\">\n              <Shield className=\"w-4 h-4\" />\n              Permissões\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Informações Tab */}\n          <TabsContent value=\"informacoes\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Dados Pessoais</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Nome Completo</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      disabled={!isEditing}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      disabled={!isEditing}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"cpf\">CPF</Label>\n                    <Input\n                      id=\"cpf\"\n                      value={formData.cpf}\n                      onChange={(e) => setFormData(prev => ({ ...prev, cpf: e.target.value }))}\n                      disabled={!isEditing}\n                      placeholder=\"000.000.000-00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                      disabled={!isEditing}\n                      placeholder=\"(11) 99999-9999\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"extension\">Ramal</Label>\n                    <Input\n                      id=\"extension\"\n                      value={formData.extension}\n                      onChange={(e) => setFormData(prev => ({ ...prev, extension: e.target.value }))}\n                      disabled={!isEditing}\n                      placeholder=\"1001\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"location\">Localização</Label>\n                    <Input\n                      id=\"location\"\n                      value={formData.location}\n                      onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\n                      disabled={!isEditing}\n                      placeholder=\"São Paulo - SP\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Informações Organizacionais</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"role\">Função</Label>\n                    <Select\n                      value={formData.role}\n                      onValueChange={(value) => setFormData(prev => ({ ...prev, role: value }))}\n                      disabled={!isEditing}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecionar função\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Administrador</SelectItem>\n                        <SelectItem value=\"supervisor\">Supervisor</SelectItem>\n                        <SelectItem value=\"colaborador\">Colaborador</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"department\">Departamento</Label>\n                    <Select\n                      value={formData.departmentId}\n                      onValueChange={(value) => setFormData(prev => ({ ...prev, departmentId: value }))}\n                      disabled={!isEditing}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecionar departamento\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {departments.map((dept: any) => (\n                          <SelectItem key={dept.id} value={dept.id}>\n                            {dept.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Data de Criação</Label>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">{formatDate(user?.createdAt)}</span>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label>Último Acesso</Label>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Activity className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">{formatDate(user?.lastLoginAt)}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Performance Tab */}\n          <TabsContent value=\"performance\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Tickets Atribuídos</CardTitle>\n                  <User className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{performance?.assignedTickets || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">Total de tickets</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Tickets Resolvidos</CardTitle>\n                  <UserCheck className=\"h-4 w-4 text-green-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">{performance?.resolvedTickets || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">Tickets finalizados</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Taxa de Resolução</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-blue-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {performance?.resolutionRate || 0}%\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Eficiência</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Métricas de Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Tempo Médio de Resolução</span>\n                    <span className=\"text-sm\">{performance?.averageResolutionTime || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Avaliação de Satisfação</span>\n                    <span className=\"text-sm\">{performance?.satisfactionRating || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Tickets em Andamento</span>\n                    <span className=\"text-sm\">{performance?.openTickets || 0}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Atividade Tab */}\n          <TabsContent value=\"atividade\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Histórico de Atividades</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {activities.length > 0 ? (\n                    activities.map((activity: any, index: number) => (\n                      <div key={index} className=\"flex items-start space-x-3 p-3 border rounded-lg\">\n                        <Activity className=\"w-5 h-5 text-muted-foreground mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">{activity.action}</p>\n                          <p className=\"text-xs text-muted-foreground\">{activity.description}</p>\n                          <p className=\"text-xs text-muted-foreground\">{formatDate(activity.timestamp)}</p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Activity className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n                      <p className=\"text-gray-500\">Nenhuma atividade registrada</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Permissões Tab */}\n          <TabsContent value=\"permissoes\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Permissões do Sistema</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  As permissões são definidas pela função do usuário: <strong>{getRoleLabel(user?.role)}</strong>\n                </p>\n              </CardHeader>\n              <CardContent>\n                {userPermissions ? (\n                  <div className=\"space-y-4\">\n                    {Object.entries(userPermissions).map(([category, permissions]: [string, any]) => (\n                      <Card key={category}>\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-base\">{category}</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            {Object.entries(permissions).map(([permission, hasPermission]: [string, any]) => (\n                              <div key={permission} className=\"flex items-center space-x-3\">\n                                <div className={`w-3 h-3 rounded-full ${hasPermission ? 'bg-green-500' : 'bg-gray-300'}`} />\n                                <span className=\"text-sm\">{permission}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Shield className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n                    <p className=\"text-gray-500\">Carregando permissões...</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":21280},"client/src/pages/UnauthorizedPage.tsx":{"content":"import React from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ShieldX } from 'lucide-react';\n\nconst UnauthorizedPage: React.FC = () => {\n  const [, setLocation] = useLocation();\n\n\n\n  const goHome = () => {\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-4\">\n      <Card className=\"w-full max-w-md text-center\">\n        <CardHeader>\n          <div className=\"mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n            <ShieldX className=\"h-6 w-6 text-red-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Acesso Negado\n          </CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Você não possui permissão para acessar esta página.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <p className=\"text-sm text-gray-500\">\n            Entre em contato com o administrador do sistema se você acredita que deveria ter acesso a esta funcionalidade.\n          </p>\n          \n          <div className=\"flex justify-center\">\n            <Button \n              onClick={goHome}\n              className=\"bg-[#2c4257] hover:bg-[#1e2e3a] text-white w-full\"\n            >\n              Ir para Dashboard\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default UnauthorizedPage;","size_bytes":1633},"client/src/components/TicketDetailModal.tsx":{"content":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { \n  Clock, User, FileText, Calendar, AlertCircle,\n  CheckCircle, Building2, Tag, MessageCircle\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface TicketDetailModalProps {\n  ticketId: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function TicketDetailModal({ ticketId, isOpen, onClose }: TicketDetailModalProps) {\n  // Buscar dados do ticket\n  const { data: tickets = [], isLoading: ticketLoading } = useQuery({\n    queryKey: ['/api/tickets'],\n    enabled: isOpen && !!ticketId,\n  });\n  \n  const ticket = tickets.find((t: any) => t.id === ticketId);\n\n  // Buscar comentários do ticket\n  const { data: comments, isLoading: commentsLoading } = useQuery<any[]>({\n    queryKey: ['/api/tickets', ticketId, 'comments'],\n    enabled: isOpen && !!ticketId,\n  });\n\n  // Buscar configurações de status e prioridade\n  const { data: statusConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/status'],\n    enabled: isOpen,\n  });\n\n  const { data: priorityConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/priority'],\n    enabled: isOpen,\n  });\n\n  // Buscar departamentos\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n    enabled: isOpen,\n  });\n\n  if (ticketLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-4\"></div>\n            <div className=\"h-32 bg-gray-200 rounded mb-4\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!ticket) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Erro</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 text-center\">\n            <p>Ticket não encontrado.</p>\n            <Button onClick={onClose} className=\"mt-4\">\n              Fechar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  // Função para obter configuração de status\n  const getStatusConfig = (statusValue: string) => {\n    return statusConfigs?.find(s => s.value === statusValue) || { \n      name: statusValue === 'open' ? 'Aberto' :\n            statusValue === 'in_progress' ? 'Em Andamento' :\n            statusValue === 'resolved' ? 'Resolvido' :\n            statusValue === 'closed' ? 'Fechado' : statusValue, \n      color: '#6B7280',\n      textColor: '#FFFFFF'\n    };\n  };\n\n  // Função para obter configuração de prioridade  \n  const getPriorityConfig = (priorityValue: string) => {\n    return priorityConfigs?.find(p => p.value === priorityValue) || { \n      name: priorityValue === 'critical' ? 'Crítica' :\n            priorityValue === 'high' ? 'Alta' :\n            priorityValue === 'medium' ? 'Média' :\n            priorityValue === 'low' ? 'Baixa' : priorityValue, \n      color: '#6B7280',\n      textColor: '#FFFFFF'\n    };\n  };\n\n  // Função para obter nome do departamento\n  const getDepartmentName = (departmentId: string) => {\n    const dept = departments?.find(d => d.id === departmentId);\n    return dept ? dept.name : departmentId;\n  };\n\n  const statusConfig = getStatusConfig(ticket.status);\n  const priorityConfig = getPriorityConfig(ticket.priority);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-3\">\n            <FileText className=\"w-6 h-6\" />\n            <span>Detalhes do Ticket {ticket.ticketNumber}</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Header with Status and Priority */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Badge \n                style={{ \n                  backgroundColor: statusConfig.color, \n                  color: statusConfig.textColor \n                }}\n              >\n                {statusConfig.name}\n              </Badge>\n              <Badge \n                style={{ \n                  backgroundColor: priorityConfig.color, \n                  color: priorityConfig.textColor \n                }}\n              >\n                {priorityConfig.name}\n              </Badge>\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              Criado em {format(new Date(ticket.createdAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n            </div>\n          </div>\n\n          {/* Ticket Info Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium flex items-center\">\n                  <User className=\"w-4 h-4 mr-1\" />\n                  Solicitante\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className=\"text-xs bg-gradient-to-br from-[#2c4257] to-[#6b8fb0] text-white\">\n                      {ticket.createdByUser?.name?.slice(0, 2).toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium text-sm\">{ticket.createdByUser?.name || 'Usuário não identificado'}</p>\n                    <p className=\"text-xs text-gray-500\">{ticket.createdByUser?.email || 'Email não disponível'}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium flex items-center\">\n                  <Building2 className=\"w-4 h-4 mr-1\" />\n                  Departamento\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm\">{ticket.department?.name || 'Não definido'}</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium flex items-center\">\n                  <Tag className=\"w-4 h-4 mr-1\" />\n                  Categoria\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm\">{ticket.category || 'Não definido'}</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Subject and Description */}\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Assunto</h3>\n              <p className=\"text-gray-700\">{ticket.subject}</p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Descrição</h3>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <p className=\"text-gray-700 whitespace-pre-wrap\">{ticket.description}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Comments Section */}\n          {comments && comments.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MessageCircle className=\"w-5 h-5 mr-2\" />\n                  Comentários ({comments.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 max-h-60 overflow-y-auto\">\n                  {comments.map((comment) => (\n                    <div key={comment.id} className=\"border-l-2 border-gray-200 pl-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Avatar className=\"w-6 h-6\">\n                          <AvatarFallback className=\"text-xs bg-gradient-to-br from-[#2c4257] to-[#6b8fb0] text-white\">\n                            {comment.user?.name?.slice(0, 2).toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <span className=\"text-sm font-medium\">{comment.user?.name || 'Usuário'}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              {format(new Date(comment.createdAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-700\">{comment.content}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Timeline */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Histórico\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Ticket criado</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {format(new Date(ticket.createdAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                    </p>\n                  </div>\n                </div>\n                \n                {ticket.updatedAt && ticket.updatedAt !== ticket.createdAt && (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Ticket atualizado</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {format(new Date(ticket.updatedAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                      </p>\n                    </div>\n                  </div>\n                )}\n                \n                {ticket.status === 'resolved' && ticket.resolvedAt && (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-600 rounded-full mt-2\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Ticket resolvido</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {format(new Date(ticket.resolvedAt), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                      </p>\n                    </div>\n                  </div>\n                )}\n                \n                {/* SLA Information */}\n                <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm font-medium\">Progresso SLA</span>\n                    <span className=\"text-sm\">\n                      {ticket.slaHoursRemaining !== undefined ? \n                        (ticket.slaHoursRemaining > 0 ? \n                          `${Math.ceil(ticket.slaHoursRemaining)}h restantes` : \n                          'Vencido'\n                        ) : \n                        'N/A'\n                      }\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full transition-all ${\n                        ticket.slaStatus === 'violated' ? 'bg-red-500' :\n                        ticket.slaStatus === 'at_risk' ? 'bg-orange-500' :\n                        'bg-green-500'\n                      }`}\n                      style={{ \n                        width: `${ticket.slaHoursTotal && ticket.slaHoursRemaining !== undefined ? \n                          Math.min(((ticket.slaHoursTotal - ticket.slaHoursRemaining) / ticket.slaHoursTotal) * 100, 100) : \n                          0}%` \n                      }}\n                    />\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Meta: {ticket.slaHoursTotal || 4}h\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Fechar\n            </Button>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" disabled>\n                Escalonamento (Em Breve)\n              </Button>\n              <Button \n                onClick={() => {\n                  // Navegar para a aba Kanban na página principal\n                  window.location.href = '/?tab=kanban';\n                  onClose();\n                }}\n              >\n                Abrir no Kanban\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14013}}}