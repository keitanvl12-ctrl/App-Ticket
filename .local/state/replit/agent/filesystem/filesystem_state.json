{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nTicketFlow Pro is a modern, full-stack ticket management system built with React and Node.js. It provides a comprehensive dashboard for tracking support tickets, managing team members, and analyzing performance metrics. The application features a clean, responsive interface with real-time data visualization, efficient ticket workflow management, and advanced enterprise features including workflow approvals, custom forms, and SLA management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nLanguage: Sistema completo traduzido para português brasileiro (interface, formulários, dados de exemplo).\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Build Tool**: Vite for fast development and optimized production builds\n- **State Management**: Redux Toolkit for global state and TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: TailwindCSS with CSS variables for theme customization and responsive design\n- **Charts**: Recharts for data visualization and analytics dashboards\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **API Design**: RESTful endpoints with consistent error handling and request logging\n- **Development**: Hot reload with Vite middleware integration\n- **Storage**: In-memory storage implementation (MemStorage) for development with interface for easy database integration\n\n## Data Layer\n- **Database**: PostgreSQL with Drizzle schema definitions\n- **Schema**: Well-structured tables for users, tickets, comments, and attachments with proper foreign key relationships\n- **Validation**: Zod schemas for runtime type checking and validation\n- **Migrations**: Drizzle Kit for database schema migrations\n\n## Authentication & Authorization\n- **User Management**: Role-based access control (admin/user roles)\n- **Session Management**: Session-based authentication with PostgreSQL session store\n\n## Component Architecture\n- **Layout System**: Consistent layout with sidebar navigation and top bar\n- **Form Management**: React Hook Form with Zod resolvers for validation\n- **Modal System**: Reusable modal components for ticket creation and editing\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n- **Advanced Workflow**: Approval system with sequential workflow management\n- **Custom Forms**: Dynamic form builder with configurable fields\n- **Category Management**: Hierarchical categories with SLA configuration\n\n# External Dependencies\n\n## Core Frontend Libraries\n- **React Ecosystem**: React 18, React DOM, React Hook Form\n- **State Management**: Redux Toolkit, TanStack React Query\n- **UI Framework**: Radix UI components, Lucide React icons\n- **Styling**: TailwindCSS, class-variance-authority, clsx for conditional classes\n- **Charts**: Recharts for data visualization\n- **Animation**: Framer Motion for smooth UI transitions\n\n## Backend Dependencies\n- **Server**: Express.js with middleware for JSON parsing and CORS\n- **Database**: Drizzle ORM, @neondatabase/serverless for PostgreSQL connection\n- **Session Store**: connect-pg-simple for PostgreSQL session management\n- **Utilities**: date-fns for date manipulation, nanoid for ID generation\n\n## Development Tools\n- **Build**: Vite with React plugin and TypeScript support\n- **Database**: Drizzle Kit for migrations and schema management\n- **Code Quality**: TypeScript for static type checking\n- **Development**: tsx for running TypeScript files, Replit development plugins\n\n## UI Component System\n- **Design System**: shadcn/ui components built on Radix UI primitives\n- **Icons**: Lucide React icon library\n- **Theming**: CSS custom properties for consistent color schemes\n- **Typography**: Inter font family from Google Fonts\n\n# Recent Changes (August 2025)\n\n## Three-Tier User Hierarchy System (NEW)\n- **User Hierarchy**: Implemented colaborador → supervisor → administrador system replacing simple admin/user roles\n- **Role-Based Access**: Each hierarchy level has specific permissions and access controls\n- **Demo Data**: Updated with users representing all three hierarchy levels for testing\n\n## Department-Based Access Control System \n- **Multi-Department Support**: Added department/workgroup system for sector isolation\n- **Database Schema**: Enhanced with departments table and user/ticket department associations\n- **Access Control**: Each department can only see their own tickets and users\n\n## Functional Report Filters System (NEW)\n- **Real-Time Filtering**: All reports now connect to PostgreSQL with functional filters\n- **Advanced Analytics**: Department performance, user performance, and resolution time analysis\n- **Dynamic Data**: Charts and tables update automatically based on filter selections\n- **Comprehensive APIs**: Backend endpoints supporting date ranges, department, priority, and status filtering\n- **Professional Reports**: 7 specialized reports focused on SLA, aging, satisfaction, and performance analytics\n\n## Dashboard-to-Tickets Navigation System (NEW - Jan 2025)\n- **Clickable Dashboard Cards**: All StatsCard components now navigate to filtered ticket views\n- **Smart URL Filtering**: KanbanBoard accepts URL parameters to automatically apply filters\n- **Team & Department Navigation**: Performance metrics link to user-specific and department-specific ticket views\n- **Seamless User Experience**: Dashboard analytics now directly connect to relevant ticket management pages\n\n## Enterprise Features Completed\n- **Advanced Reporting**: 8 comprehensive analysis tabs including SLA monitoring, aging analysis, daily volume tracking\n- **SLA Management**: Complete SLA compliance tracking with risk alerts and priority-based timelines\n- **Ticket Aging Analysis**: Visual breakdown of ticket age distribution and backlog management\n- **Daily Volume Reports**: Comprehensive analysis of ticket volume patterns and resolution rates  \n- **Satisfaction Tracking**: Customer feedback analysis with rating distribution and comment highlights\n- **Trend Analysis**: Fixed ticket trends visualization with distributed historical data\n- **Categories Management**: Complete category and subcategory system with SLA configuration\n- **Ticket Forms**: Custom form builder for different ticket types and contexts  \n- **Custom Fields**: Configurable field system with multiple input types\n- **Workflow Approvals**: Sequential approval system with status tracking\n\n## Technical Improvements\n- **Database Migration**: PostgreSQL integration with proper schema design\n- **Fixed Trend Charts**: Resolved data distribution issues for realistic visualizations\n- **Enhanced Routing**: Added new pages to routing system with proper navigation\n- **UI Components**: Implemented enterprise-level interfaces matching reference design\n- **Performance**: Optimized data queries and chart rendering\n- **SLA Configuration**: Added comprehensive SLA management page with CRUD operations\n- **Ticket Deletion**: Implemented admin-only ticket deletion with cascade operations for comments and attachments\n- **SelectItem Validation**: Fixed React Select validation errors for empty values","size_bytes":7377},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        error: {\n          DEFAULT: \"var(--error)\",\n          foreground: \"var(--error-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3114},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/README_1754594591059.md":{"content":"# React\n\nA modern React-based project utilizing the latest frontend technologies and tools for building responsive web applications.\n\n## 🚀 Features\n\n- **React 18** - React version with improved rendering and concurrent features\n- **Vite** - Lightning-fast build tool and development server\n- **Redux Toolkit** - State management with simplified Redux setup\n- **TailwindCSS** - Utility-first CSS framework with extensive customization\n- **React Router v6** - Declarative routing for React applications\n- **Data Visualization** - Integrated D3.js and Recharts for powerful data visualization\n- **Form Management** - React Hook Form for efficient form handling\n- **Animation** - Framer Motion for smooth UI animations\n- **Testing** - Jest and React Testing Library setup\n\n## 📋 Prerequisites\n\n- Node.js (v14.x or higher)\n- npm or yarn\n\n## 🛠️ Installation\n\n1. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n   \n2. Start the development server:\n   ```bash\n   npm start\n   # or\n   yarn start\n   ```\n\n## 📁 Project Structure\n\n```\nreact_app/\n├── public/             # Static assets\n├── src/\n│   ├── components/     # Reusable UI components\n│   ├── pages/          # Page components\n│   ├── styles/         # Global styles and Tailwind configuration\n│   ├── App.jsx         # Main application component\n│   ├── Routes.jsx      # Application routes\n│   └── index.jsx       # Application entry point\n├── .env                # Environment variables\n├── index.html          # HTML template\n├── package.json        # Project dependencies and scripts\n├── tailwind.config.js  # Tailwind CSS configuration\n└── vite.config.js      # Vite configuration\n```\n\n## 🧩 Adding Routes\n\nTo add new routes to the application, update the `Routes.jsx` file:\n\n```jsx\nimport { useRoutes } from \"react-router-dom\";\nimport HomePage from \"pages/HomePage\";\nimport AboutPage from \"pages/AboutPage\";\n\nconst ProjectRoutes = () => {\n  let element = useRoutes([\n    { path: \"/\", element: <HomePage /> },\n    { path: \"/about\", element: <AboutPage /> },\n    // Add more routes as needed\n  ]);\n\n  return element;\n};\n```\n\n## 🎨 Styling\n\nThis project uses Tailwind CSS for styling. The configuration includes:\n\n- Forms plugin for form styling\n- Typography plugin for text styling\n- Aspect ratio plugin for responsive elements\n- Container queries for component-specific responsive design\n- Fluid typography for responsive text\n- Animation utilities\n\n## 📱 Responsive Design\n\nThe app is built with responsive design using Tailwind CSS breakpoints.\n\n\n## 📦 Deployment\n\nBuild the application for production:\n\n```bash\nnpm run build\n```\n\n## 🙏 Acknowledgments\n\n- Built with [Rocket.new](https://rocket.new)\n- Powered by React and Vite\n- Styled with Tailwind CSS\n\nBuilt with ❤️ on Rocket.new\n","size_bytes":2887},"attached_assets/postcss.config_1754594591058.js":{"content":"module.exports = {\n  plugins: {\n    \"tailwindcss/nesting\": {},\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":114},"attached_assets/tailwind.config_1754594591060.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{js,jsx}',\n    './components/**/*.{js,jsx}',\n    './app/**/*.{js,jsx}',\n    './src/**/*.{js,jsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"var(--color-border)\", // slate-200\n        input: \"var(--color-input)\", // white\n        ring: \"var(--color-ring)\", // blue-600\n        background: \"var(--color-background)\", // gray-50\n        foreground: \"var(--color-foreground)\", // slate-800\n        primary: {\n          DEFAULT: \"var(--color-primary)\", // blue-600\n          foreground: \"var(--color-primary-foreground)\", // white\n        },\n        secondary: {\n          DEFAULT: \"var(--color-secondary)\", // slate-500\n          foreground: \"var(--color-secondary-foreground)\", // white\n        },\n        destructive: {\n          DEFAULT: \"var(--color-destructive)\", // red-600\n          foreground: \"var(--color-destructive-foreground)\", // white\n        },\n        muted: {\n          DEFAULT: \"var(--color-muted)\", // slate-100\n          foreground: \"var(--color-muted-foreground)\", // slate-500\n        },\n        accent: {\n          DEFAULT: \"var(--color-accent)\", // amber-500\n          foreground: \"var(--color-accent-foreground)\", // white\n        },\n        popover: {\n          DEFAULT: \"var(--color-popover)\", // white\n          foreground: \"var(--color-popover-foreground)\", // slate-800\n        },\n        card: {\n          DEFAULT: \"var(--color-card)\", // white\n          foreground: \"var(--color-card-foreground)\", // slate-800\n        },\n        success: {\n          DEFAULT: \"var(--color-success)\", // emerald-600\n          foreground: \"var(--color-success-foreground)\", // white\n        },\n        warning: {\n          DEFAULT: \"var(--color-warning)\", // amber-600\n          foreground: \"var(--color-warning-foreground)\", // white\n        },\n        error: {\n          DEFAULT: \"var(--color-error)\", // red-600\n          foreground: \"var(--color-error-foreground)\", // white\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        mono: ['JetBrains Mono', 'monospace'],\n      },\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1rem' }],\n        'sm': ['0.875rem', { lineHeight: '1.25rem' }],\n        'base': ['1rem', { lineHeight: '1.5rem' }],\n        'lg': ['1.125rem', { lineHeight: '1.75rem' }],\n        'xl': ['1.25rem', { lineHeight: '1.75rem' }],\n        '2xl': ['1.5rem', { lineHeight: '2rem' }],\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n        '240': '60rem',\n      },\n      boxShadow: {\n        'enterprise': '0 1px 3px rgba(0, 0, 0, 0.1)',\n        'enterprise-lg': '0 4px 12px rgba(0, 0, 0, 0.15)',\n      },\n      animation: {\n        'pulse-slow': 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n        'fade-in': 'fadeIn 200ms ease-out',\n        'slide-in': 'slideIn 300ms ease-in-out',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideIn: {\n          '0%': { transform: 'translateX(-100%)' },\n          '100%': { transform: 'translateX(0)' },\n        },\n      },\n      transitionDuration: {\n        '200': '200ms',\n        '300': '300ms',\n      },\n      transitionTimingFunction: {\n        'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',\n        'ease-in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}","size_bytes":3887},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { departmentStorage } from \"./departmentStorage\";\nimport { insertDepartmentSchema } from \"@shared/schema\";\nimport { insertTicketSchema, insertCommentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst updateTicketSchema = insertTicketSchema.partial();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard stats with filters\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const filters = {\n        dateFilter: req.query.dateFilter as string,\n        priority: req.query.priority as string,\n        department: req.query.department as string\n      };\n      const stats = await storage.getDashboardStats(filters);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/priority-stats\", async (req, res) => {\n    try {\n      const filters = {\n        dateFilter: req.query.dateFilter as string,\n        priority: req.query.priority as string,\n        department: req.query.department as string\n      };\n      const stats = await storage.getPriorityStats(filters);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch priority stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/trends\", async (req, res) => {\n    try {\n      const days = parseInt(req.query.days as string) || 7;\n      const filters = {\n        dateFilter: req.query.dateFilter as string,\n        priority: req.query.priority as string,\n        department: req.query.department as string\n      };\n      const trends = await storage.getTrendData(days, filters);\n      res.json(trends);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trend data\" });\n    }\n  });\n\n  // Tickets\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const tickets = await storage.getAllTickets();\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.get(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const ticket = await storage.getTicket(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ticket\" });\n    }\n  });\n\n  app.post(\"/api/tickets\", async (req, res) => {\n    try {\n      const validatedData = insertTicketSchema.parse(req.body);\n      const ticket = await storage.createTicket(validatedData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create ticket\" });\n    }\n  });\n\n  app.patch(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const validatedData = updateTicketSchema.parse(req.body);\n      const ticket = await storage.updateTicket(req.params.id, validatedData);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to update ticket\" });\n    }\n  });\n\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTicket(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete ticket\" });\n    }\n  });\n\n  // Endpoint específico para finalizar tickets\n  app.patch(\"/api/tickets/:id/finalize\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, finalizationData, progress } = req.body;\n      \n      // Atualizar o ticket com status resolvido e dados de finalização\n      const updateData = {\n        status: status || 'Resolvido',\n        progress: progress || 100,\n        // Salvar dados de finalização nos metadados ou campos específicos\n        finalizationComment: finalizationData?.comment,\n        hoursSpent: finalizationData?.hoursSpent,\n        equipmentRemoved: finalizationData?.equipmentRemoved,\n        materialsUsed: finalizationData?.materialsUsed,\n        extraCharge: finalizationData?.extraCharge,\n        chargeType: finalizationData?.chargeType,\n        finalizedAt: new Date().toISOString()\n      };\n      \n      const ticket = await storage.updateTicket(id, updateData);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      res.json({ success: true, ticket });\n    } catch (error) {\n      console.error(\"Error finalizing ticket:\", error);\n      res.status(500).json({ message: \"Failed to finalize ticket\" });\n    }\n  });\n\n  // Comments\n  app.get(\"/api/tickets/:ticketId/comments\", async (req, res) => {\n    try {\n      const comments = await storage.getCommentsByTicket(req.params.ticketId);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/tickets/:ticketId/comments\", async (req, res) => {\n    try {\n      const validatedData = insertCommentSchema.parse({\n        ...req.body,\n        ticketId: req.params.ticketId,\n      });\n      const comment = await storage.createComment(validatedData);\n      res.status(201).json(comment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Users\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({ \n        id: user.id, \n        name: user.name, \n        email: user.email, \n        role: user.role,\n        departmentId: user.departmentId\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Update user role\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.body;\n      \n      if (!role || !['admin', 'supervisor', 'colaborador'].includes(role)) {\n        return res.status(400).json({ message: \"Role inválido\" });\n      }\n\n      const updatedUser = await storage.updateUser(id, { role });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Error updating user\" });\n    }\n  });\n\n  // Department routes\n  app.get(\"/api/departments\", async (req, res) => {\n    try {\n      const departments = await departmentStorage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Error fetching departments:\", error);\n      res.status(500).json({ message: \"Failed to fetch departments\" });\n    }\n  });\n\n  app.get(\"/api/departments/:id\", async (req, res) => {\n    try {\n      const department = await departmentStorage.getDepartment(req.params.id);\n      if (!department) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.json(department);\n    } catch (error) {\n      console.error(\"Error fetching department:\", error);\n      res.status(500).json({ message: \"Failed to fetch department\" });\n    }\n  });\n\n  app.post(\"/api/departments\", async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.parse(req.body);\n      const department = await departmentStorage.createDepartment(validatedData);\n      res.status(201).json(department);\n    } catch (error) {\n      console.error(\"Error creating department:\", error);\n      res.status(400).json({ message: \"Failed to create department\" });\n    }\n  });\n\n  app.patch(\"/api/departments/:id\", async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.partial().parse(req.body);\n      const department = await departmentStorage.updateDepartment(req.params.id, validatedData);\n      if (!department) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.json(department);\n    } catch (error) {\n      console.error(\"Error updating department:\", error);\n      res.status(400).json({ message: \"Failed to update department\" });\n    }\n  });\n\n  app.delete(\"/api/departments/:id\", async (req, res) => {\n    try {\n      const success = await departmentStorage.deleteDepartment(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting department:\", error);\n      res.status(500).json({ message: \"Failed to delete department\" });\n    }\n  });\n\n  // Categories endpoints\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/department/:departmentId\", async (req, res) => {\n    try {\n      const { departmentId } = req.params;\n      const categories = await storage.getCategoriesByDepartment(departmentId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories by department:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories by department\" });\n    }\n  });\n\n  // Configuration routes\n  app.get(\"/api/config/status\", async (req, res) => {\n    try {\n      const statusConfigs = await storage.getAllStatusConfigs();\n      res.json(statusConfigs);\n    } catch (error) {\n      console.error(\"Error fetching status configs:\", error);\n      res.status(500).json({ message: \"Failed to fetch status configurations\" });\n    }\n  });\n\n  app.post(\"/api/config/status\", async (req, res) => {\n    try {\n      const statusConfig = await storage.createStatusConfig(req.body);\n      res.json(statusConfig);\n    } catch (error) {\n      console.error(\"Error creating status config:\", error);\n      res.status(500).json({ message: \"Failed to create status configuration\" });\n    }\n  });\n\n  app.put(\"/api/config/status/:id\", async (req, res) => {\n    try {\n      const statusConfig = await storage.updateStatusConfig(req.params.id, req.body);\n      res.json(statusConfig);\n    } catch (error) {\n      console.error(\"Error updating status config:\", error);\n      res.status(500).json({ message: \"Failed to update status configuration\" });\n    }\n  });\n\n  app.delete(\"/api/config/status/:id\", async (req, res) => {\n    try {\n      await storage.deleteStatusConfig(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting status config:\", error);\n      res.status(500).json({ message: \"Failed to delete status configuration\" });\n    }\n  });\n\n  app.get(\"/api/config/priority\", async (req, res) => {\n    try {\n      const priorityConfigs = await storage.getAllPriorityConfigs();\n      res.json(priorityConfigs);\n    } catch (error) {\n      console.error(\"Error fetching priority configs:\", error);\n      res.status(500).json({ message: \"Failed to fetch priority configurations\" });\n    }\n  });\n\n  app.post(\"/api/config/priority\", async (req, res) => {\n    try {\n      const priorityConfig = await storage.createPriorityConfig(req.body);\n      res.json(priorityConfig);\n    } catch (error) {\n      console.error(\"Error creating priority config:\", error);\n      res.status(500).json({ message: \"Failed to create priority configuration\" });\n    }\n  });\n\n  app.put(\"/api/config/priority/:id\", async (req, res) => {\n    try {\n      const priorityConfig = await storage.updatePriorityConfig(req.params.id, req.body);\n      res.json(priorityConfig);\n    } catch (error) {\n      console.error(\"Error updating priority config:\", error);\n      res.status(500).json({ message: \"Failed to update priority configuration\" });\n    }\n  });\n\n  app.delete(\"/api/config/priority/:id\", async (req, res) => {\n    try {\n      await storage.deletePriorityConfig(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting priority config:\", error);\n      res.status(500).json({ message: \"Failed to delete priority configuration\" });\n    }\n  });\n\n  // SLA endpoints\n  app.get(\"/api/sla/rules\", async (req, res) => {\n    try {\n      const slaRules = await storage.getSLARules();\n      res.json(slaRules);\n    } catch (error) {\n      console.error(\"Error fetching SLA rules:\", error);\n      res.status(500).json({ message: \"Failed to fetch SLA rules\" });\n    }\n  });\n\n  app.post(\"/api/sla/rules\", async (req, res) => {\n    try {\n      const slaRule = await storage.createSLARule(req.body);\n      res.json(slaRule);\n    } catch (error) {\n      console.error(\"Error creating SLA rule:\", error);\n      res.status(500).json({ message: \"Failed to create SLA rule\" });\n    }\n  });\n\n  app.put(\"/api/sla/rules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const slaRule = await storage.updateSLARule(id, req.body);\n      res.json(slaRule);\n    } catch (error) {\n      console.error(\"Error updating SLA rule:\", error);\n      res.status(500).json({ message: \"Failed to update SLA rule\" });\n    }\n  });\n\n  app.delete(\"/api/sla/rules/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSLARule(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting SLA rule:\", error);\n      res.status(500).json({ message: \"Failed to delete SLA rule\" });\n    }\n  });\n\n  // Advanced Reports API\n  app.get(\"/api/reports/filtered-tickets\", async (req, res) => {\n    try {\n      const {\n        startDate,\n        endDate,\n        departmentId,\n        priority,\n        status,\n        assignedTo,\n        createdBy\n      } = req.query;\n\n      const tickets = await storage.getFilteredTickets({\n        startDate: startDate as string,\n        endDate: endDate as string,\n        departmentId: departmentId as string,\n        priority: priority as string,\n        status: status as string,\n        assignedTo: assignedTo as string,\n        createdBy: createdBy as string,\n      });\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching filtered tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch filtered tickets\" });\n    }\n  });\n\n  app.get(\"/api/reports/department-performance\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const performance = await storage.getDepartmentPerformance(\n        startDate as string,\n        endDate as string\n      );\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching department performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch department performance\" });\n    }\n  });\n\n  app.get(\"/api/reports/user-performance\", async (req, res) => {\n    try {\n      const { startDate, endDate, departmentId } = req.query;\n      const performance = await storage.getUserPerformance(\n        startDate as string,\n        endDate as string,\n        departmentId as string\n      );\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching user performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch user performance\" });\n    }\n  });\n\n  app.get(\"/api/reports/resolution-time-analysis\", async (req, res) => {\n    try {\n      const { startDate, endDate, departmentId } = req.query;\n      const analysis = await storage.getResolutionTimeAnalysis(\n        startDate as string,\n        endDate as string,\n        departmentId as string\n      );\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error fetching resolution time analysis:\", error);\n      res.status(500).json({ message: \"Failed to fetch resolution time analysis\" });\n    }\n  });\n\n  // Excluir ticket (apenas para administradores)\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const ticketId = req.params.id;\n      \n      // Verificar se o ticket existe\n      const ticket = await storage.getTicketById(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket não encontrado\" });\n      }\n      \n      // Excluir o ticket\n      await storage.deleteTicket(ticketId);\n      \n      res.json({ message: \"Ticket excluído com sucesso\" });\n    } catch (error) {\n      console.error(\"Error deleting ticket:\", error);\n      res.status(500).json({ message: \"Erro ao excluir ticket\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17221},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { users, tickets, comments, attachments, departments, categories, slaRules, statusConfig, priorityConfig } from \"@shared/schema\";\nimport { eq, desc, count, sql, and, gte, lte } from \"drizzle-orm\";\nimport {\n  type User,\n  type InsertUser,\n  type Ticket,\n  type InsertTicket,\n  type TicketWithDetails,\n  type Comment,\n  type InsertComment,\n  type Attachment,\n  type InsertAttachment,\n  type Category,\n  type InsertCategory,\n  type SlaRule,\n  type InsertSlaRule,\n  type Department,\n  type InsertDepartment,\n  type StatusConfig,\n  type PriorityConfig,\n  type InsertStatusConfig,\n  type InsertPriorityConfig,\n  type DashboardStats,\n  type PriorityStats,\n  type TrendData,\n} from \"@shared/schema\";\nimport { nanoid } from \"nanoid\";\nimport { format, subDays, startOfDay, endOfDay, differenceInHours } from \"date-fns\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Tickets\n  getTicket(id: string): Promise<TicketWithDetails | undefined>;\n  getTicketsByUser(userId: string): Promise<TicketWithDetails[]>;\n  getAllTickets(): Promise<TicketWithDetails[]>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: string, updates: Partial<InsertTicket>): Promise<Ticket | undefined>;\n  deleteTicket(id: string): Promise<boolean>;\n\n  // Comments\n  getCommentsByTicket(ticketId: string): Promise<(Comment & { user: User })[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n\n  // Attachments\n  getAttachmentsByTicket(ticketId: string): Promise<Attachment[]>;\n  createAttachment(attachment: InsertAttachment): Promise<Attachment>;\n\n  // Categories\n  getAllCategories(): Promise<Category[]>;\n  getCategoriesByDepartment(departmentId: string): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // Departments\n  getAllDepartments(): Promise<Department[]>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n\n  // Configuration\n  getAllStatusConfigs(): Promise<StatusConfig[]>;\n  getAllPriorityConfigs(): Promise<PriorityConfig[]>;\n  createStatusConfig(config: InsertStatusConfig): Promise<StatusConfig>;\n  createPriorityConfig(config: InsertPriorityConfig): Promise<PriorityConfig>;\n\n  // Analytics\n  getDashboardStats(filters?: any): Promise<DashboardStats>;\n  getPriorityStats(filters?: any): Promise<PriorityStats>;\n  getTrendData(days: number, filters?: any): Promise<TrendData[]>;\n\n  // Advanced Reports\n  getFilteredTickets(filters: any): Promise<TicketWithDetails[]>;\n  getDepartmentPerformance(startDate: string, endDate: string): Promise<any[]>;\n  getUserPerformance(startDate: string, endDate: string, departmentId?: string): Promise<any[]>;\n  getResolutionTimeAnalysis(startDate: string, endDate: string, departmentId?: string): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize with some demo data for development\n    this.initializeDemoData();\n    this.initializeConfigurationData();\n  }\n\n  private async initializeDemoData() {\n    try {\n      // Check if data already exists\n      const existingUsers = await db.select().from(users).limit(1);\n      if (existingUsers.length > 0) return;\n\n      // Create demo users\n      const [adminUser] = await db.insert(users).values({\n        username: \"admin\",\n        password: \"admin123\",\n        name: \"Administrador\",\n        email: \"admin@empresa.com\",\n        role: \"admin\",\n      }).returning();\n\n      const [supervisor] = await db.insert(users).values({\n        username: \"maria.santos\",\n        password: \"senha123\",\n        name: \"Maria Santos\",\n        email: \"maria.santos@empresa.com\",\n        role: \"supervisor\",\n      }).returning();\n\n      const [colaborador1] = await db.insert(users).values({\n        username: \"carlos.oliveira\",\n        password: \"senha123\",\n        name: \"Carlos Oliveira\",\n        email: \"carlos.oliveira@empresa.com\",\n        role: \"colaborador\",\n      }).returning();\n\n      const [colaborador2] = await db.insert(users).values({\n        username: \"ana.costa\",\n        password: \"senha123\",\n        name: \"Ana Costa\",\n        email: \"ana.costa@empresa.com\",\n        role: \"colaborador\",\n      }).returning();\n\n      // Create demo departments\n      const [tiDept] = await db.insert(departments).values({\n        name: \"TI\",\n        description: \"Departamento de Tecnologia da Informação\",\n      }).returning();\n\n      const [rhDept] = await db.insert(departments).values({\n        name: \"RH\",\n        description: \"Recursos Humanos\",\n      }).returning();\n\n      const [finDept] = await db.insert(departments).values({\n        name: \"Financeiro\",\n        description: \"Departamento Financeiro\",\n      }).returning();\n\n      // Create demo categories linked to departments\n      await db.insert(categories).values([\n        {\n          name: \"Bug de Sistema\",\n          description: \"Problemas técnicos no sistema\",\n          departmentId: tiDept.id,\n          slaHours: 4,\n        },\n        {\n          name: \"Nova Funcionalidade\",\n          description: \"Solicitação de nova funcionalidade\",\n          departmentId: tiDept.id,\n          slaHours: 48,\n        },\n        {\n          name: \"Suporte Técnico\",\n          description: \"Suporte técnico geral\",\n          departmentId: tiDept.id,\n          slaHours: 8,\n        },\n        {\n          name: \"Folha de Pagamento\",\n          description: \"Questões relacionadas à folha de pagamento\",\n          departmentId: rhDept.id,\n          slaHours: 24,\n        },\n        {\n          name: \"Benefícios\",\n          description: \"Questões sobre benefícios dos funcionários\",\n          departmentId: rhDept.id,\n          slaHours: 12,\n        },\n        {\n          name: \"Contabilidade\",\n          description: \"Questões contábeis e fiscais\",\n          departmentId: finDept.id,\n          slaHours: 24,\n        },\n        {\n          name: \"Contas a Pagar\",\n          description: \"Processamento de pagamentos\",\n          departmentId: finDept.id,\n          slaHours: 12,\n        },\n      ]);\n\n      // Create demo tickets with distributed dates for trending data\n      const now = new Date();\n      const demoTickets = [\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Sistema de backup está falhando\",\n          description: \"Backup automático não está funcionando corretamente desde a última atualização\",\n          status: \"resolved\",\n          priority: \"high\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: adminUser.id,\n          assignedTo: supervisor.id,\n          createdAt: subDays(now, 6),\n          updatedAt: subDays(now, 6),\n          resolvedAt: subDays(now, 5),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Erro na integração com API externa\",\n          description: \"A integração com o sistema de pagamentos está retornando erro 500\",\n          status: \"resolved\",\n          priority: \"critical\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: colaborador1.id,\n          assignedTo: supervisor.id,\n          createdAt: subDays(now, 6),\n          updatedAt: subDays(now, 6),\n          resolvedAt: subDays(now, 4),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Solicitação de nova funcionalidade no dashboard\",\n          description: \"Adicionar filtros avançados no dashboard principal\",\n          status: \"open\",\n          priority: \"medium\",\n          category: \"feature\",\n          departmentId: null,\n          createdBy: colaborador2.id,\n          assignedTo: supervisor.id,\n          createdAt: subDays(now, 3),\n          updatedAt: subDays(now, 3),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Problema de performance na página de relatórios\",\n          description: \"Relatórios estão carregando muito lentamente\",\n          status: \"in_progress\",\n          priority: \"high\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: supervisor.id,\n          assignedTo: adminUser.id,\n          createdAt: subDays(now, 2),\n          updatedAt: subDays(now, 1),\n        },\n        {\n          ticketNumber: `TICK-${nanoid(6)}`,\n          subject: \"Atualização de segurança necessária\",\n          description: \"Aplicar patches de segurança no servidor de aplicação\",\n          status: \"open\",\n          priority: \"critical\",\n          category: \"bug\",\n          departmentId: null,\n          createdBy: adminUser.id,\n          assignedTo: colaborador1.id,\n          createdAt: subDays(now, 1),\n          updatedAt: subDays(now, 1),\n        },\n      ];\n\n      await db.insert(tickets).values(demoTickets);\n\n      // Adicionar tickets mais recentes para o gráfico de tendências\n      const recentTickets = [];\n      for (let i = 0; i < 7; i++) {\n        const ticketDate = subDays(now, i);\n        \n        // Criar 2-4 tickets por dia nos últimos 7 dias\n        const ticketsPerDay = Math.floor(Math.random() * 3) + 2;\n        \n        for (let j = 0; j < ticketsPerDay; j++) {\n          recentTickets.push({\n            ticketNumber: `TICK-${nanoid(6)}`,\n            subject: `Ticket ${i}-${j} - Problema exemplo`,\n            description: `Descrição do ticket criado em ${format(ticketDate, \"dd/MM/yyyy\")}`,\n            status: Math.random() > 0.6 ? \"resolved\" : \"open\",\n            priority: [\"low\", \"medium\", \"high\", \"critical\"][Math.floor(Math.random() * 4)],\n            category: [\"bug\", \"feature\", \"support\"][Math.floor(Math.random() * 3)],\n            departmentId: null,\n            createdBy: [adminUser.id, supervisor.id, colaborador1.id, colaborador2.id][Math.floor(Math.random() * 4)],\n            assignedTo: [adminUser.id, supervisor.id][Math.floor(Math.random() * 2)],\n            createdAt: ticketDate,\n            updatedAt: ticketDate,\n            resolvedAt: Math.random() > 0.6 ? subDays(ticketDate, -Math.floor(Math.random() * 2)) : null,\n          });\n        }\n      }\n      \n      await db.insert(tickets).values(recentTickets);\n    } catch (error) {\n      console.error(\"Error initializing demo data:\", error);\n    }\n  }\n\n  private async initializeConfigurationData() {\n    try {\n      // Check if status configs already exist\n      const existingStatusConfigs = await db.select().from(statusConfig).limit(1);\n      if (existingStatusConfigs.length === 0) {\n        // Create default status configurations\n        await db.insert(statusConfig).values([\n          {\n            name: \"Aberto\",\n            value: \"open\",\n            color: \"#3b82f6\",\n            order: 1,\n            isActive: true,\n            isDefault: true,\n          },\n          {\n            name: \"Em Andamento\",\n            value: \"in_progress\",\n            color: \"#f59e0b\",\n            order: 2,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Resolvido\",\n            value: \"resolved\",\n            color: \"#10b981\",\n            order: 3,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Fechado\",\n            value: \"closed\",\n            color: \"#6b7280\",\n            order: 4,\n            isActive: true,\n            isDefault: false,\n          },\n        ]);\n      }\n\n      // Check if priority configs already exist\n      const existingPriorityConfigs = await db.select().from(priorityConfig).limit(1);\n      if (existingPriorityConfigs.length === 0) {\n        // Create default priority configurations\n        await db.insert(priorityConfig).values([\n          {\n            name: \"Crítica\",\n            value: \"critical\",\n            color: \"#dc2626\",\n            slaHours: 4,\n            order: 1,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Alta\",\n            value: \"high\",\n            color: \"#f59e0b\",\n            slaHours: 24,\n            order: 2,\n            isActive: true,\n            isDefault: false,\n          },\n          {\n            name: \"Média\",\n            value: \"medium\",\n            color: \"#3b82f6\",\n            slaHours: 72,\n            order: 3,\n            isActive: true,\n            isDefault: true,\n          },\n          {\n            name: \"Baixa\",\n            value: \"low\",\n            color: \"#10b981\",\n            slaHours: 168,\n            order: 4,\n            isActive: true,\n            isDefault: false,\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error initializing configuration data:\", error);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(`User with id ${id} not found`);\n    }\n    \n    return updatedUser;\n  }\n\n  async getTicket(id: string): Promise<TicketWithDetails | undefined> {\n    const [ticket] = await db\n      .select({\n        id: tickets.id,\n        ticketNumber: tickets.ticketNumber,\n        subject: tickets.subject,\n        description: tickets.description,\n        status: tickets.status,\n        priority: tickets.priority,\n        category: tickets.category,\n        requesterDepartmentId: tickets.requesterDepartmentId,\n        responsibleDepartmentId: tickets.responsibleDepartmentId,\n        createdBy: tickets.createdBy,\n        assignedTo: tickets.assignedTo,\n        createdAt: tickets.createdAt,\n        updatedAt: tickets.updatedAt,\n        resolvedAt: tickets.resolvedAt,\n        department: {\n          id: departments.id,\n          name: departments.name,\n          description: departments.description,\n          createdAt: departments.createdAt,\n          updatedAt: departments.updatedAt,\n        },\n        createdByUser: {\n          id: users.id,\n          username: users.username,\n          name: users.name,\n          email: users.email,\n          role: users.role,\n          departmentId: users.departmentId,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(tickets)\n      .leftJoin(departments, eq(tickets.responsibleDepartmentId, departments.id))\n      .leftJoin(users, eq(tickets.createdBy, users.id))\n      .where(eq(tickets.id, id));\n\n    if (!ticket) return undefined;\n\n    // Get assigned user\n    let assignedToUser = null;\n    if (ticket.assignedTo) {\n      const [assignedUser] = await db.select().from(users).where(eq(users.id, ticket.assignedTo));\n      assignedToUser = assignedUser || null;\n    }\n\n    // Get comments\n    const ticketComments = await db\n      .select({\n        id: comments.id,\n        ticketId: comments.ticketId,\n        userId: comments.userId,\n        content: comments.content,\n        createdAt: comments.createdAt,\n        user: {\n          id: users.id,\n          username: users.username,\n          name: users.name,\n          email: users.email,\n          role: users.role,\n          departmentId: users.departmentId,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.ticketId, id));\n\n    // Get attachments\n    const ticketAttachments = await db.select().from(attachments).where(eq(attachments.ticketId, id));\n\n    return {\n      ...ticket,\n      assignedToUser,\n      comments: ticketComments,\n      attachments: ticketAttachments,\n    } as TicketWithDetails;\n  }\n\n  async getTicketsByUser(userId: string): Promise<TicketWithDetails[]> {\n    const userTickets = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.createdBy, userId));\n\n    const detailedTickets = await Promise.all(\n      userTickets.map(ticket => this.getTicket(ticket.id))\n    );\n\n    return detailedTickets.filter(ticket => ticket !== undefined) as TicketWithDetails[];\n  }\n\n  async getAllTickets(): Promise<TicketWithDetails[]> {\n    const allTickets = await db.select().from(tickets).orderBy(desc(tickets.createdAt));\n\n    const detailedTickets = await Promise.all(\n      allTickets.map(ticket => this.getTicket(ticket.id))\n    );\n\n    return detailedTickets.filter(ticket => ticket !== undefined) as TicketWithDetails[];\n  }\n\n  async createTicket(ticket: InsertTicket): Promise<Ticket> {\n    const ticketNumber = `TICK-${nanoid(6)}`;\n    const [newTicket] = await db.insert(tickets).values({\n      ...ticket,\n      ticketNumber,\n    }).returning();\n    return newTicket;\n  }\n\n  async updateTicket(id: string, updates: Partial<InsertTicket>): Promise<Ticket | undefined> {\n    const [updatedTicket] = await db\n      .update(tickets)\n      .set({ \n        ...updates, \n        updatedAt: new Date(),\n        ...(updates.status === 'resolved' ? { resolvedAt: new Date() } : {}),\n      })\n      .where(eq(tickets.id, id))\n      .returning();\n    return updatedTicket || undefined;\n  }\n\n  async getTicketById(id: string): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.id, id));\n    return ticket;\n  }\n\n  async deleteTicket(id: string): Promise<boolean> {\n    try {\n      // Primeiro, excluir comentários relacionados\n      await db.delete(comments).where(eq(comments.ticketId, id));\n      \n      // Depois, excluir anexos relacionados\n      await db.delete(attachments).where(eq(attachments.ticketId, id));\n      \n      // Finalmente, excluir o ticket\n      await db.delete(tickets).where(eq(tickets.id, id));\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error deleting ticket:\", error);\n      return false;\n    }\n  }\n\n  async getCommentsByTicket(ticketId: string): Promise<(Comment & { user: User })[]> {\n    const ticketComments = await db\n      .select({\n        id: comments.id,\n        ticketId: comments.ticketId,\n        userId: comments.userId,\n        content: comments.content,\n        createdAt: comments.createdAt,\n        user: {\n          id: users.id,\n          username: users.username,\n          name: users.name,\n          email: users.email,\n          role: users.role,\n          departmentId: users.departmentId,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.ticketId, ticketId));\n\n    return ticketComments as (Comment & { user: User })[];\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    return newComment;\n  }\n\n  async getAttachmentsByTicket(ticketId: string): Promise<Attachment[]> {\n    return await db.select().from(attachments).where(eq(attachments.ticketId, ticketId));\n  }\n\n  async createAttachment(attachment: InsertAttachment): Promise<Attachment> {\n    const [newAttachment] = await db.insert(attachments).values(attachment).returning();\n    return newAttachment;\n  }\n\n  // Categories methods\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, true));\n  }\n\n  async getCategoriesByDepartment(departmentId: string): Promise<Category[]> {\n    return await db.select().from(categories)\n      .where(and(eq(categories.departmentId, departmentId), eq(categories.isActive, true)));\n  }\n\n  // SLA Rules methods\n  async getSLARules(): Promise<SLARule[]> {\n    return await db.select().from(slaRules).where(eq(slaRules.isActive, true));\n  }\n\n  async createSLARule(data: InsertSLARule): Promise<SLARule> {\n    // Validação: apenas um tipo de SLA por regra\n    const typeCount = [data.departmentId, data.category, data.priority].filter(Boolean).length;\n    if (typeCount !== 1) {\n      throw new Error('SLA rule must have exactly one defining field: departmentId, category, or priority');\n    }\n\n    const [slaRule] = await db.insert(slaRules).values(data).returning();\n    return slaRule;\n  }\n\n  async updateSLARule(id: string, data: Partial<InsertSLARule>): Promise<SLARule | null> {\n    const [slaRule] = await db.update(slaRules)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(slaRules.id, id))\n      .returning();\n    return slaRule || null;\n  }\n\n  async deleteSLARule(id: string): Promise<boolean> {\n    const result = await db.delete(slaRules).where(eq(slaRules.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Configuration methods\n  async getAllStatusConfigs(): Promise<StatusConfig[]> {\n    return await db.select().from(statusConfig).where(eq(statusConfig.isActive, true)).orderBy(statusConfig.order);\n  }\n\n  async getAllPriorityConfigs(): Promise<PriorityConfig[]> {\n    return await db.select().from(priorityConfig).where(eq(priorityConfig.isActive, true)).orderBy(priorityConfig.order);\n  }\n\n  async createStatusConfig(config: InsertStatusConfig): Promise<StatusConfig> {\n    const [result] = await db.insert(statusConfig).values(config).returning();\n    return result;\n  }\n\n  async createPriorityConfig(config: InsertPriorityConfig): Promise<PriorityConfig> {\n    const [result] = await db.insert(priorityConfig).values(config).returning();\n    return result;\n  }\n\n  async updateStatusConfig(id: string, updates: Partial<StatusConfig>): Promise<StatusConfig | undefined> {\n    const [result] = await db\n      .update(statusConfig)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(statusConfig.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteStatusConfig(id: string): Promise<void> {\n    await db.delete(statusConfig).where(eq(statusConfig.id, id));\n  }\n\n  async updatePriorityConfig(id: string, updates: Partial<PriorityConfig>): Promise<PriorityConfig | undefined> {\n    const [result] = await db\n      .update(priorityConfig)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(priorityConfig.id, id))\n      .returning();\n    return result;\n  }\n\n  async deletePriorityConfig(id: string): Promise<void> {\n    await db.delete(priorityConfig).where(eq(priorityConfig.id, id));\n  }\n\n  // Departments methods\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const [newDepartment] = await db.insert(departments).values(department).returning();\n    return newDepartment;\n  }\n\n  async getDashboardStats(filters?: any): Promise<DashboardStats> {\n    // Build filter conditions\n    const conditions = [];\n    \n    if (filters?.priority && filters.priority !== 'all') {\n      conditions.push(eq(tickets.priority, filters.priority));\n    }\n    \n    if (filters?.department && filters.department !== 'all') {\n      // Join with users to filter by department\n      conditions.push(eq(users.departmentId, filters.department));\n    }\n    \n    if (filters?.dateFilter) {\n      const filterDate = new Date(filters.dateFilter);\n      const startDate = startOfDay(filterDate);\n      const endDate = endOfDay(filterDate);\n      conditions.push(\n        and(\n          gte(tickets.createdAt, startDate),\n          lte(tickets.createdAt, endDate)\n        )\n      );\n    }\n\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    // Get total tickets with filters\n    let totalTicketsQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      totalTicketsQuery = totalTicketsQuery.leftJoin(users, eq(tickets.assignedTo, users.id));\n    }\n    if (whereClause) {\n      totalTicketsQuery = totalTicketsQuery.where(whereClause);\n    }\n    const totalTicketsResult = await totalTicketsQuery;\n    const totalTickets = totalTicketsResult[0]?.count || 0;\n\n    // Get open tickets with filters\n    const openConditions = [...conditions, eq(tickets.status, 'open')];\n    let openTicketsQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      openTicketsQuery = openTicketsQuery.leftJoin(users, eq(tickets.assignedTo, users.id));\n    }\n    openTicketsQuery = openTicketsQuery.where(and(...openConditions));\n    const openTicketsResult = await openTicketsQuery;\n    const openTickets = openTicketsResult[0]?.count || 0;\n\n    // Get resolved today with filters\n    const today = startOfDay(new Date());\n    const resolvedConditions = [\n      ...conditions,\n      eq(tickets.status, 'resolved'),\n      gte(tickets.resolvedAt, today)\n    ];\n    let resolvedTodayQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      resolvedTodayQuery = resolvedTodayQuery.leftJoin(users, eq(tickets.assignedTo, users.id));\n    }\n    resolvedTodayQuery = resolvedTodayQuery.where(and(...resolvedConditions));\n    const resolvedTodayResult = await resolvedTodayQuery;\n    const resolvedToday = resolvedTodayResult[0]?.count || 0;\n\n    return {\n      totalTickets,\n      openTickets,\n      resolvedToday,\n      avgResponseTime: \"2.5h\",\n      totalTicketsChange: \"+12%\",\n      openTicketsChange: \"-8%\",\n      resolvedTodayChange: \"+25%\",\n      avgResponseTimeChange: \"-15%\",\n    };\n  }\n\n  async getPriorityStats(filters?: any): Promise<PriorityStats> {\n    // Build base filter conditions\n    const baseConditions = [];\n    \n    if (filters?.department && filters.department !== 'all') {\n      baseConditions.push(eq(users.departmentId, filters.department));\n    }\n    \n    if (filters?.dateFilter) {\n      const filterDate = new Date(filters.dateFilter);\n      const startDate = startOfDay(filterDate);\n      const endDate = endOfDay(filterDate);\n      baseConditions.push(\n        and(\n          gte(tickets.createdAt, startDate),\n          lte(tickets.createdAt, endDate)\n        )\n      );\n    }\n\n    // Get total with filters (excluding priority filter)\n    let totalQuery = db.select({ count: count() }).from(tickets);\n    if (filters?.department && filters.department !== 'all') {\n      totalQuery = totalQuery.leftJoin(users, eq(tickets.assigneeId, users.id));\n    }\n    if (baseConditions.length > 0) {\n      totalQuery = totalQuery.where(and(...baseConditions));\n    }\n    const totalTicketsResult = await totalQuery;\n    const total = totalTicketsResult[0]?.count || 1;\n\n    // Function to get priority count\n    const getPriorityCount = async (priority: string) => {\n      const conditions = [...baseConditions, eq(tickets.priority, priority)];\n      let query = db.select({ count: count() }).from(tickets);\n      if (filters?.department && filters.department !== 'all') {\n        query = query.leftJoin(users, eq(tickets.assigneeId, users.id));\n      }\n      query = query.where(and(...conditions));\n      const result = await query;\n      return result[0]?.count || 0;\n    };\n\n    const critical = await getPriorityCount('critical');\n    const high = await getPriorityCount('high');\n    const medium = await getPriorityCount('medium');\n    const low = await getPriorityCount('low');\n\n    return {\n      critical: { count: critical, percentage: Math.round((critical / total) * 100) },\n      high: { count: high, percentage: Math.round((high / total) * 100) },\n      medium: { count: medium, percentage: Math.round((medium / total) * 100) },\n      low: { count: low, percentage: Math.round((low / total) * 100) },\n    };\n  }\n\n  async getTrendData(days: number, filters?: any): Promise<TrendData[]> {\n    const trends: TrendData[] = [];\n    const today = new Date();\n\n    for (let i = days - 1; i >= 0; i--) {\n      const date = subDays(today, i);\n      const startDate = startOfDay(date);\n      const endDate = endOfDay(date);\n\n      // Build filter conditions for created tickets\n      const createdConditions = [\n        gte(tickets.createdAt, startDate),\n        lte(tickets.createdAt, endDate)\n      ];\n      \n      if (filters?.priority && filters.priority !== 'all') {\n        createdConditions.push(eq(tickets.priority, filters.priority));\n      }\n      \n      if (filters?.department && filters.department !== 'all') {\n        createdConditions.push(eq(users.departmentId, filters.department));\n      }\n\n      // Get created tickets count\n      let createdQuery = db.select({ count: count() }).from(tickets);\n      if (filters?.department && filters.department !== 'all') {\n        createdQuery = createdQuery.leftJoin(users, eq(tickets.assigneeId, users.id));\n      }\n      createdQuery = createdQuery.where(and(...createdConditions));\n      const createdResult = await createdQuery;\n      const created = createdResult[0]?.count || 0;\n\n      // Build filter conditions for resolved tickets\n      const resolvedConditions = [\n        eq(tickets.status, 'resolved'),\n        gte(tickets.resolvedAt, startDate),\n        lte(tickets.resolvedAt, endDate)\n      ];\n      \n      if (filters?.priority && filters.priority !== 'all') {\n        resolvedConditions.push(eq(tickets.priority, filters.priority));\n      }\n      \n      if (filters?.department && filters.department !== 'all') {\n        resolvedConditions.push(eq(users.departmentId, filters.department));\n      }\n\n      // Get resolved tickets count\n      let resolvedQuery = db.select({ count: count() }).from(tickets);\n      if (filters?.department && filters.department !== 'all') {\n        resolvedQuery = resolvedQuery.leftJoin(users, eq(tickets.assigneeId, users.id));\n      }\n      resolvedQuery = resolvedQuery.where(and(...resolvedConditions));\n      const resolvedResult = await resolvedQuery;\n      const resolved = resolvedResult[0]?.count || 0;\n\n      trends.push({\n        date: format(date, \"dd/MM\"),\n        created,\n        resolved,\n      });\n    }\n\n    return trends;\n  }\n\n  async getFilteredTickets(filters: any): Promise<TicketWithDetails[]> {\n    let query = db.select().from(tickets);\n    \n    const conditions: any[] = [];\n    \n    if (filters.startDate && filters.endDate) {\n      conditions.push(\n        and(\n          gte(tickets.createdAt, new Date(filters.startDate)),\n          lte(tickets.createdAt, new Date(filters.endDate))\n        )\n      );\n    }\n    \n    if (filters.departmentId && filters.departmentId !== 'all') {\n      conditions.push(eq(tickets.responsibleDepartmentId, filters.departmentId));\n    }\n    \n    if (filters.priority && filters.priority !== 'all') {\n      conditions.push(eq(tickets.priority, filters.priority));\n    }\n    \n    if (filters.status && filters.status !== 'all') {\n      conditions.push(eq(tickets.status, filters.status));\n    }\n    \n    if (filters.assignedTo && filters.assignedTo !== 'all') {\n      conditions.push(eq(tickets.assignedTo, filters.assignedTo));\n    }\n    \n    if (filters.createdBy && filters.createdBy !== 'all') {\n      conditions.push(eq(tickets.createdBy, filters.createdBy));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    const filteredTickets = await query.orderBy(desc(tickets.createdAt));\n    \n    const detailedTickets = await Promise.all(\n      filteredTickets.map(ticket => this.getTicket(ticket.id))\n    );\n\n    return detailedTickets.filter(ticket => ticket !== undefined) as TicketWithDetails[];\n  }\n\n  async getDepartmentPerformance(startDate: string, endDate: string): Promise<any[]> {\n    const allDepartments = await db.select().from(departments);\n    const performance = [];\n\n    for (const dept of allDepartments) {\n      const totalTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.responsibleDepartmentId, dept.id),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const resolvedTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.responsibleDepartmentId, dept.id),\n            eq(tickets.status, 'resolved'),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const total = totalTicketsResult[0]?.count || 0;\n      const resolved = resolvedTicketsResult[0]?.count || 0;\n      const pending = total - resolved;\n\n      performance.push({\n        name: dept.name,\n        tickets: total,\n        resolved,\n        pending,\n        resolutionRate: total > 0 ? Math.round((resolved / total) * 100) : 0,\n        avgTime: '2.5h' // Simplified for demo\n      });\n    }\n\n    return performance;\n  }\n\n  async getUserPerformance(startDate: string, endDate: string, departmentId?: string): Promise<any[]> {\n    let userQuery = db.select().from(users);\n    \n    if (departmentId && departmentId !== 'all') {\n      userQuery = userQuery.where(eq(users.departmentId, departmentId));\n    }\n\n    const allUsers = await userQuery;\n    const performance = [];\n\n    for (const user of allUsers) {\n      const assignedTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.assignedTo, user.id),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const resolvedTicketsResult = await db\n        .select({ count: count() })\n        .from(tickets)\n        .where(\n          and(\n            eq(tickets.assignedTo, user.id),\n            eq(tickets.status, 'resolved'),\n            gte(tickets.createdAt, new Date(startDate)),\n            lte(tickets.createdAt, new Date(endDate))\n          )\n        );\n\n      const assigned = assignedTicketsResult[0]?.count || 0;\n      const resolved = resolvedTicketsResult[0]?.count || 0;\n\n      if (assigned > 0) {\n        performance.push({\n          name: user.name,\n          role: user.role,\n          tickets: assigned,\n          resolved,\n          efficiency: assigned > 0 ? Math.round((resolved / assigned) * 100) : 0,\n          satisfaction: 4.5 + Math.random() * 0.5 // Simplified for demo\n        });\n      }\n    }\n\n    return performance.sort((a, b) => b.efficiency - a.efficiency);\n  }\n\n  async getResolutionTimeAnalysis(startDate: string, endDate: string, departmentId?: string): Promise<any[]> {\n    let conditions = [\n      eq(tickets.status, 'resolved'),\n      gte(tickets.createdAt, new Date(startDate)),\n      lte(tickets.createdAt, new Date(endDate))\n    ];\n\n    if (departmentId && departmentId !== 'all') {\n      conditions.push(eq(tickets.departmentId, departmentId));\n    }\n\n    const resolvedTickets = await db\n      .select()\n      .from(tickets)\n      .where(and(...conditions));\n\n    const timeCategories = {\n      '< 1 hora': 0,\n      '1-4 horas': 0,\n      '4-8 horas': 0,\n      '8-24 horas': 0,\n      '> 24 horas': 0\n    };\n\n    resolvedTickets.forEach(ticket => {\n      if (ticket.resolvedAt && ticket.createdAt) {\n        const hours = differenceInHours(new Date(ticket.resolvedAt), new Date(ticket.createdAt));\n        \n        if (hours < 1) timeCategories['< 1 hora']++;\n        else if (hours < 4) timeCategories['1-4 horas']++;\n        else if (hours < 8) timeCategories['4-8 horas']++;\n        else if (hours < 24) timeCategories['8-24 horas']++;\n        else timeCategories['> 24 horas']++;\n      }\n    });\n\n    const total = resolvedTickets.length;\n    return Object.entries(timeCategories).map(([category, count]) => ({\n      category,\n      count,\n      percentage: total > 0 ? Math.round((count / total) * 100) : 0\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":36585},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Departments/Workgroups table\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull().default(\"colaborador\"), // admin, supervisor, colaborador\n  departmentId: varchar(\"department_id\").references(() => departments.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const tickets = pgTable(\"tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketNumber: text(\"ticket_number\").notNull().unique(),\n  subject: text(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"open\"), // open, in_progress, resolved, closed\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, critical\n  category: text(\"category\"), // Nome da categoria selecionada\n  tags: text(\"tags\").array(), // Array de tags para categorização adicional\n  requesterDepartmentId: varchar(\"requester_department_id\").references(() => departments.id), // Departamento do solicitante (informativo)\n  responsibleDepartmentId: varchar(\"responsible_department_id\").references(() => departments.id), // Departamento responsável (determina categorização)\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => tickets.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const attachments = pgTable(\"attachments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => tickets.id).notNull(),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  fileType: text(\"file_type\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Categories table linked to departments\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  departmentId: varchar(\"department_id\").references(() => departments.id),\n  slaHours: integer(\"sla_hours\").default(24), // SLA deadline in hours\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Status Configuration table\nexport const statusConfig = pgTable(\"status_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(), // Nome do status (ex: \"Aberto\", \"Em Andamento\", \"Resolvido\")\n  value: text(\"value\").notNull().unique(), // Valor técnico (ex: \"open\", \"in_progress\", \"resolved\")\n  color: text(\"color\").notNull().default(\"#6b7280\"), // Cor hexadecimal para exibição\n  order: integer(\"order\").notNull().default(0), // Ordem de exibição\n  isActive: boolean(\"is_active\").default(true),\n  isDefault: boolean(\"is_default\").default(false), // Status padrão para novos tickets\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Priority Configuration table\nexport const priorityConfig = pgTable(\"priority_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(), // Nome da prioridade (ex: \"Crítica\", \"Alta\", \"Média\", \"Baixa\")\n  value: text(\"value\").notNull().unique(), // Valor técnico (ex: \"critical\", \"high\", \"medium\", \"low\")\n  color: text(\"color\").notNull().default(\"#6b7280\"), // Cor hexadecimal para exibição\n  slaHours: integer(\"sla_hours\").notNull().default(24), // SLA em horas para esta prioridade\n  order: integer(\"order\").notNull().default(0), // Ordem de exibição\n  isActive: boolean(\"is_active\").default(true),\n  isDefault: boolean(\"is_default\").default(false), // Prioridade padrão para novos tickets\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// SLA Rules table\nexport const slaRules = pgTable(\"sla_rules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  departmentId: varchar(\"department_id\").references(() => departments.id), // Nullable - applies to all departments if null\n  category: text(\"category\"), // Nullable - applies to all categories if null\n  priority: text(\"priority\"), // low, medium, high, critical - nullable for non-priority based SLAs\n  timeHours: integer(\"time_hours\").notNull().default(24),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  ticketNumber: true,\n  createdAt: true,\n  updatedAt: true,\n  resolvedAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttachmentSchema = createInsertSchema(attachments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStatusConfigSchema = createInsertSchema(statusConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPriorityConfigSchema = createInsertSchema(priorityConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSlaRuleSchema = createInsertSchema(slaRules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Custom types that are not inferred from tables  \nexport interface DashboardStats {\n  totalTickets: number;\n  openTickets: number;\n  resolvedTickets: number;\n  averageResolutionTime: number;\n}\n\nexport interface PriorityStats {\n  critical: { count: number; percentage: number };\n  high: { count: number; percentage: number };\n  medium: { count: number; percentage: number };\n  low: { count: number; percentage: number };\n}\n\nexport interface TrendData {\n  date: string;\n  created: number;\n  resolved: number;\n}\n\nexport interface TicketWithDetails extends Ticket {\n  createdByUser?: User;\n  assignedToUser?: User | null;\n  department?: Department;\n  requesterDepartment?: Department;\n  responsibleDepartment?: Department;\n  comments?: Array<Comment & { user: User }>;\n  attachments?: Attachment[];\n}\n\n// Export types\nexport type Department = typeof departments.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\nexport type Attachment = typeof attachments.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type StatusConfig = typeof statusConfig.$inferSelect;\nexport type PriorityConfig = typeof priorityConfig.$inferSelect;\nexport type SlaRule = typeof slaRules.$inferSelect;\n\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type InsertAttachment = z.infer<typeof insertAttachmentSchema>;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertStatusConfig = z.infer<typeof insertStatusConfigSchema>;\nexport type InsertPriorityConfig = z.infer<typeof insertPriorityConfigSchema>;\nexport type InsertSlaRule = z.infer<typeof insertSlaRuleSchema>;\n\nexport type DashboardStats = {\n  totalTickets: number;\n  openTickets: number;\n  resolvedToday: number;\n  avgResponseTime: string;\n  totalTicketsChange: string;\n  openTicketsChange: string;\n  resolvedTodayChange: string;\n  avgResponseTimeChange: string;\n};\n\nexport type PriorityStats = {\n  critical: { count: number; percentage: number };\n  high: { count: number; percentage: number };\n  medium: { count: number; percentage: number };\n  low: { count: number; percentage: number };\n};\n\nexport type TrendData = {\n  date: string;\n  created: number;\n  resolved: number;\n};\n","size_bytes":9719},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Provider } from \"react-redux\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { store } from \"./store\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport AllTickets from \"@/pages/AllTickets\";\nimport KanbanBoard from \"@/pages/KanbanBoard\";\nimport Analytics from \"@/pages/Analytics\";\nimport Team from \"@/pages/Team\";\nimport Settings from \"@/pages/Settings\";\nimport Profile from \"@/pages/Profile\";\nimport Login from \"@/pages/Login\";\nimport SLA from \"@/pages/SLA\";\nimport CreateTicket from \"@/pages/CreateTicket\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport Categories from \"@/pages/Categories\";\nimport TicketForms from \"@/pages/TicketForms\";\nimport CustomFields from \"@/pages/CustomFields\";\nimport WorkflowApprovals from \"@/pages/WorkflowApprovals\";\nimport Approvals from \"@/pages/Approvals\";\nimport ReportsNew from \"@/pages/ReportsNew\";\nimport Departments from \"@/pages/Departments\";\nimport NotFound from \"@/pages/NotFound\";\nimport UserProfiles from \"@/pages/UserProfiles\";\nimport SLAConfiguration from \"@/pages/SLAConfiguration\";\nimport ConfigurationPage from \"@/pages/ConfigurationPage\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/tickets\" component={KanbanBoard} />\n\n        <Route path=\"/analytics\" component={Analytics} />\n        <Route path=\"/sla\" component={SLA} />\n        <Route path=\"/users\" component={UserManagement} />\n        <Route path=\"/departments\" component={Departments} />\n        <Route path=\"/categories\" component={Categories} />\n        <Route path=\"/forms\" component={TicketForms} />\n        <Route path=\"/fields\" component={CustomFields} />\n        <Route path=\"/approvals\" component={Approvals} />\n        <Route path=\"/workflow-approvals\" component={WorkflowApprovals} />\n        <Route path=\"/reports\" component={ReportsNew} />\n        <Route path=\"/user-profiles\" component={UserProfiles} />\n        <Route path=\"/sla-config\" component={SLAConfiguration} />\n        <Route path=\"/config\" component={ConfigurationPage} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/login\" component={Login} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","size_bytes":2838},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Core Colors - exatamente como no design de referência */\n    --background: #FAFBFC; /* gray-50 */\n    --foreground: #1E293B; /* slate-800 */\n    --border: #E2E8F0; /* slate-200 */\n    --input: #FFFFFF; /* white */\n    --ring: #2563EB; /* blue-600 */\n    \n    /* Card Colors */\n    --card: #FFFFFF; /* white */\n    --card-foreground: #1E293B; /* slate-800 */\n    \n    /* Popover Colors */\n    --popover: #FFFFFF; /* white */\n    --popover-foreground: #1E293B; /* slate-800 */\n    \n    /* Muted Colors */\n    --muted: #F1F5F9; /* slate-100 */\n    --muted-foreground: #64748B; /* slate-500 */\n    \n    /* Primary Colors */\n    --primary: #2563EB; /* blue-600 */\n    --primary-foreground: #FFFFFF; /* white */\n    --primary-hover: #1D4ED8; /* blue-700 */\n    \n    /* Secondary Colors */\n    --secondary: #64748B; /* slate-500 */\n    --secondary-foreground: #FFFFFF; /* white */\n    --secondary-hover: #475569; /* slate-600 */\n    \n    /* Accent Colors */\n    --accent: #F59E0B; /* amber-500 */\n    --accent-foreground: #FFFFFF; /* white */\n    --accent-hover: #D97706; /* amber-600 */\n    \n    /* Success Colors */\n    --success: #059669; /* emerald-600 */\n    --success-foreground: #FFFFFF; /* white */\n    \n    /* Warning Colors */\n    --warning: #D97706; /* amber-600 */\n    --warning-foreground: #FFFFFF; /* white */\n    \n    /* Error/Destructive Colors */\n    --error: #DC2626; /* red-600 */\n    --error-foreground: #FFFFFF; /* white */\n    --destructive: #DC2626; /* red-600 */\n    --destructive-foreground: #FFFFFF; /* white */\n    \n    /* Grayscale system */\n    --gray-10: #F8FAFC; /* slate-50 */\n    --gray-20: #F1F5F9; /* slate-100 */\n    --gray-30: #E2E8F0; /* slate-200 */\n    --gray-50: #64748B; /* slate-500 */\n    --gray-70: #334155; /* slate-700 */\n    --gray-90: #0F172A; /* slate-900 */\n    --gray-100: #1E293B; /* slate-800 */\n    \n    --radius: 0.375rem;\n    --font-sans: 'Inter', system-ui, sans-serif;\n  }\n  \n  * {\n    @apply border-border;\n    box-sizing: border-box;\n    line-height: normal;\n    font-family: inherit;\n    margin: unset;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    margin: 0;\n    padding: 0;\n    font-family: Inter;\n  }\n}\n\n@layer utilities {\n  .text-shadow-sm {\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  }\n  \n  .shadow-enterprise {\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  }\n  \n  .shadow-enterprise-lg {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  }\n  \n  .transition-enterprise {\n    transition: all 200ms ease-out;\n  }\n  \n  .transition-modal {\n    transition: all 300ms ease-in-out;\n  }\n}","size_bytes":2891},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CreateTicketModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { X, Upload } from \"lucide-react\";\nimport { insertTicketSchema } from \"@shared/schema\";\nimport type { InsertTicket, User, Department, Category } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\ninterface CreateTicketModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateTicketModal({ isOpen, onClose }: CreateTicketModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"\");\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: isOpen,\n  });\n\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n    enabled: isOpen,\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories/department\", selectedDepartment],\n    enabled: isOpen && !!selectedDepartment,\n  });\n\n  const form = useForm<InsertTicket>({\n    resolver: zodResolver(insertTicketSchema.extend({\n      subject: insertTicketSchema.shape.subject.min(1, \"Assunto é obrigatório\").max(100, \"Assunto deve ter menos de 100 caracteres\"),\n      description: insertTicketSchema.shape.description.min(10, \"Descrição deve ter pelo menos 10 caracteres\"),\n    })),\n    defaultValues: {\n      subject: \"\",\n      description: \"\",\n      priority: \"medium\",\n      category: \"\",\n      responsibleDepartmentId: \"\",\n      requesterDepartmentId: \"\",\n      assignedTo: \"\",\n      createdBy: \"\", // This would typically come from auth context\n    },\n  });\n\n  // Reset category when department changes\n  useEffect(() => {\n    if (selectedDepartment) {\n      form.setValue(\"category\", \"\");\n    }\n  }, [selectedDepartment, form]);\n\n  // Simular usuário logado (pegar usuário admin com departamento)\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: InsertTicket) => {\n      // In a real app, createdBy would come from authenticated user\n      if (!currentUser) {\n        throw new Error(\"Usuário não encontrado\");\n      }\n\n      const ticketData = { \n        ...data, \n        createdBy: currentUser.id,\n        requesterDepartmentId: currentUser.departmentId || null,\n      };\n      const response = await apiRequest(\"POST\", \"/api/tickets\", ticketData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Ticket criado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      form.reset();\n      setSelectedFiles([]);\n      setSelectedDepartment(\"\");\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      const files = Array.from(event.target.files);\n      setSelectedFiles(prev => [...prev, ...files]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const onSubmit = (data: InsertTicket) => {\n    createTicketMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    if (!createTicketMutation.isPending) {\n      form.reset();\n      setSelectedFiles([]);\n      setSelectedDepartment(\"\");\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Criar Novo Ticket\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              disabled={createTicketMutation.isPending}\n              className=\"h-auto p-1\"\n            >\n              <X size={20} />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assunto *</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Descrição breve do problema\"\n                        className=\"focus:ring-primary focus:border-primary\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prioridade *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                          <SelectValue placeholder=\"Selecionar prioridade\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Baixa</SelectItem>\n                        <SelectItem value=\"medium\">Média</SelectItem>\n                        <SelectItem value=\"high\">Alta</SelectItem>\n                        <SelectItem value=\"critical\">Crítica</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Forneça detalhes sobre o problema, incluindo passos para reproduzir, mensagens de erro, etc.\"\n                      className=\"min-h-[120px] focus:ring-primary focus:border-primary\"\n                      rows={5}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Informação do solicitante - apenas informativo */}\n            <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                  Solicitante:\n                </span>\n                <span className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  {currentUser?.name} - {currentUser?.departmentId ? \n                    departments?.find(d => d.id === currentUser.departmentId)?.name || 'Departamento não especificado'\n                    : 'Departamento não especificado'\n                  }\n                </span>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                <h3 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-3\">\n                  Categorização\n                </h3>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-4\">\n                  Classifique o tipo e prioridade do chamado\n                </p>\n                \n                <div className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"responsibleDepartmentId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Departamento *</FormLabel>\n                        <Select \n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            setSelectedDepartment(value);\n                            form.setValue(\"category\", \"\"); // Reset category when department changes\n                          }} \n                          value={field.value || \"\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                              <SelectValue placeholder=\"Selecione o departamento\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {departments?.map((dept) => (\n                              <SelectItem key={dept.id} value={dept.id}>\n                                {dept.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Categoria *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange} \n                          value={field.value || \"\"}\n                          disabled={!selectedDepartment}\n                        >\n                          <FormControl>\n                            <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                              <SelectValue \n                                placeholder={\n                                  !selectedDepartment \n                                    ? \"Selecione um departamento primeiro\" \n                                    : \"Selecione a categoria\"\n                                } \n                              />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories?.map((category) => (\n                              <SelectItem key={category.id} value={category.name}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                        {selectedDepartment && categories?.length === 0 && (\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Nenhuma categoria disponível para este departamento\n                          </p>\n                        )}\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Responsável</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                      <FormControl>\n                        <SelectTrigger className=\"focus:ring-primary focus:border-primary\">\n                          <SelectValue placeholder=\"Atribuição automática\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {users?.map((user) => (\n                          <SelectItem key={user.id} value={user.id}>\n                            {user.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Descrição detalhada do problema, passos para reproduzir, comportamento esperado...\"\n                      className=\"h-32 resize-none focus:ring-primary focus:border-primary\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* File Upload */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-100 mb-2\">Anexos</label>\n              <div className=\"border-2 border-dashed border-gray-20 rounded-lg p-6 text-center\">\n                <Upload className=\"mx-auto text-3xl text-gray-30 mb-3\" size={48} />\n                <p className=\"text-sm text-gray-50 mb-2\">Arraste e solte arquivos aqui ou clique para navegar</p>\n                <input\n                  type=\"file\"\n                  multiple\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  id=\"fileUpload\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"text-primary hover:text-primary-hover font-medium text-sm\"\n                  onClick={() => document.getElementById('fileUpload')?.click()}\n                >\n                  Escolher Arquivos\n                </Button>\n              </div>\n              {selectedFiles.length > 0 && (\n                <div className=\"mt-3 space-y-2\">\n                  {selectedFiles.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between bg-gray-10 p-2 rounded\">\n                      <span className=\"text-sm text-gray-70\">{file.name}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(index)}\n                        className=\"text-error hover:text-error h-auto p-1\"\n                      >\n                        <X size={16} />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center justify-end space-x-3 pt-4 border-t border-gray-20\">\n              <Button \n                type=\"button\" \n                variant=\"ghost\" \n                onClick={handleClose}\n                disabled={createTicketMutation.isPending}\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTicketMutation.isPending}\n                className=\"bg-primary hover:bg-primary-hover text-white\"\n              >\n                {createTicketMutation.isPending ? \"Criando...\" : \"Criar Ticket\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16562},"client/src/components/Layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport Header from \"./Header\";\nimport Sidebar from \"./NewSidebar\";\nimport SimpleTicketModal from \"./SimpleTicketModal\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  title?: string;\n  description?: string;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n        isSidebarCollapsed={isSidebarCollapsed}\n      />\n      <div className=\"flex pt-16\">\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          isCollapsed={isSidebarCollapsed}\n          onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)}\n          onOpenTicketModal={() => setIsTicketModalOpen(true)}\n        />\n        <main className={`flex-1 transition-all duration-300 ${\n          isSidebarCollapsed ? 'lg:ml-16' : 'lg:ml-60'\n        }`}>\n          {children}\n        </main>\n      </div>\n      \n      <SimpleTicketModal \n        isOpen={isTicketModalOpen}\n        onClose={() => setIsTicketModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":1377},"client/src/components/PriorityBreakdown.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { PriorityStats } from \"@shared/schema\";\n\nconst priorityConfig = {\n  critical: { color: \"bg-error\", textColor: \"text-error\" },\n  high: { color: \"bg-warning\", textColor: \"text-warning\" },\n  medium: { color: \"bg-primary\", textColor: \"text-primary\" },\n  low: { color: \"bg-success\", textColor: \"text-success\" },\n};\n\ninterface PriorityBreakdownProps {\n  filters?: {\n    dateFilter: string;\n    priorityFilter: string;\n    departmentFilter: string;\n  };\n}\n\nexport default function PriorityBreakdown({ filters }: PriorityBreakdownProps) {\n  // Build query parameters\n  const buildQueryParams = () => {\n    const params = new URLSearchParams();\n    if (filters?.dateFilter) params.append('dateFilter', filters.dateFilter);\n    if (filters?.departmentFilter && filters.departmentFilter !== 'all') params.append('department', filters.departmentFilter);\n    // Note: We don't include priority filter for priority breakdown as it would skew the distribution\n    return params.toString();\n  };\n\n  const queryParams = buildQueryParams();\n\n  const { data: priorityStats, isLoading } = useQuery<PriorityStats>({\n    queryKey: [\"/api/dashboard/priority-stats\", queryParams],\n    queryFn: async () => {\n      const url = `/api/dashboard/priority-stats${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch priority stats');\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-gray-20 rounded-full\"></div>\n                <div className=\"h-4 bg-gray-20 rounded w-16\"></div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-32 bg-gray-20 rounded-full h-2\"></div>\n                <div className=\"h-4 bg-gray-20 rounded w-8\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!priorityStats) {\n    return (\n      <div className=\"text-center text-gray-50\">\n        No priority data available\n      </div>\n    );\n  }\n\n  const priorities = [\n    { key: \"critical\", label: \"Critical\", ...priorityStats.critical },\n    { key: \"high\", label: \"High\", ...priorityStats.high },\n    { key: \"medium\", label: \"Medium\", ...priorityStats.medium },\n    { key: \"low\", label: \"Low\", ...priorityStats.low },\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {priorities.map((priority) => {\n        const config = priorityConfig[priority.key as keyof typeof priorityConfig];\n        \n        return (\n          <div key={priority.key} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-3 h-3 ${config.color} rounded-full`}></div>\n              <span className=\"text-sm text-gray-70\">{priority.label}</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-32 bg-gray-20 rounded-full h-2\">\n                <div \n                  className={`${config.color} h-2 rounded-full transition-all duration-300`}\n                  style={{ width: `${priority.percentage}%` }}\n                ></div>\n              </div>\n              <span className=\"text-sm font-medium text-gray-100 w-8 text-right\">\n                {priority.count}\n              </span>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3729},"client/src/components/RecentTicketsTable.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Eye, Edit, MoreHorizontal, User, Calendar, AlertTriangle, Clock, CheckCircle2, Circle, Timer, ArrowRight } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\n\nimport type { TicketWithDetails } from \"@shared/schema\";\n\n// Configuração de status traduzida e melhorada\nconst statusConfig = {\n  open: { \n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\", \n    label: \"Aberto\",\n    icon: Circle\n  },\n  in_progress: { \n    color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\", \n    label: \"Em Progresso\",\n    icon: Timer\n  },\n  resolved: { \n    color: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\", \n    label: \"Resolvido\",\n    icon: CheckCircle2\n  },\n  closed: { \n    color: \"bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300\", \n    label: \"Fechado\",\n    icon: CheckCircle2\n  },\n};\n\n// Configuração de prioridade traduzida e melhorada\nconst priorityConfig = {\n  low: { \n    color: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\", \n    label: \"Baixa\",\n    dot: \"bg-green-500\"\n  },\n  medium: { \n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\", \n    label: \"Média\",\n    dot: \"bg-blue-500\"\n  },\n  high: { \n    color: \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400\", \n    label: \"Alta\",\n    dot: \"bg-orange-500\"\n  },\n  critical: { \n    color: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\", \n    label: \"Crítica\",\n    dot: \"bg-red-500\"\n  },\n};\n\ninterface RecentTicketsTableProps {\n  limit?: number;\n}\n\nexport default function RecentTicketsTable({ limit = 10 }: RecentTicketsTableProps) {\n  const { data: tickets = [], isLoading } = useQuery<TicketWithDetails[]>({\n    queryKey: [\"/api/tickets\"],\n  });\n\n  const recentTickets = tickets.slice(0, limit);\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"Hoje\";\n    if (diffDays === 2) return \"Ontem\";\n    if (diffDays <= 7) return `${diffDays} dias atrás`;\n    \n    return date.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Clock className=\"w-5 h-5\" />\n            <span>Tickets Recentes</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Clock className=\"w-5 h-5 text-blue-600\" />\n            <span>Tickets Recentes</span>\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-700\">\n            Ver todos\n            <ArrowRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {recentTickets.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-slate-100 dark:bg-slate-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Clock className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">\n              Nenhum ticket encontrado\n            </h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">\n              Quando novos tickets forem criados, eles aparecerão aqui.\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n            {recentTickets.map((ticket, index) => {\n              const statusStyle = statusConfig[ticket.status as keyof typeof statusConfig];\n              const priorityStyle = priorityConfig[ticket.priority as keyof typeof priorityConfig];\n              const StatusIcon = statusStyle?.icon;\n              \n              return (\n                <div key={ticket.id} className=\"p-6 hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 min-w-0\">\n                      {/* Header com ID e Status */}\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <span className=\"text-sm font-mono font-semibold text-blue-600 dark:text-blue-400\">\n                          #{ticket.ticketNumber}\n                        </span>\n                        <Badge className={`${statusStyle?.color} text-xs font-medium flex items-center space-x-1`}>\n                          {StatusIcon && <StatusIcon className=\"w-3 h-3\" />}\n                          <span>{statusStyle?.label}</span>\n                        </Badge>\n                        <div className=\"flex items-center space-x-1\">\n                          <div className={`w-2 h-2 rounded-full ${priorityStyle?.dot}`}></div>\n                          <span className=\"text-xs text-slate-600 dark:text-slate-400\">\n                            {priorityStyle?.label}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      {/* Título do Ticket */}\n                      <h3 className=\"text-base font-semibold text-slate-900 dark:text-slate-100 mb-2 line-clamp-1\">\n                        {ticket.subject}\n                      </h3>\n                      \n                      {/* Informações do Ticket */}\n                      <div className=\"flex items-center space-x-6 text-sm text-slate-600 dark:text-slate-400\">\n                        <div className=\"flex items-center space-x-2\">\n                          <User className=\"w-4 h-4\" />\n                          <span>Solicitante:</span>\n                          <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                            {ticket.createdByUser?.name || 'Usuário'}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>{formatDate(ticket.createdAt)}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <span>Departamento:</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {ticket.department?.name || 'Não especificado'}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {/* Assignee */}\n                      {ticket.assignedToUser && (\n                        <div className=\"flex items-center space-x-2 mt-3\">\n                          <span className=\"text-sm text-slate-600 dark:text-slate-400\">Atribuído para:</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-blue-600 dark:text-blue-400\">\n                                {getInitials(ticket.assignedToUser.name)}\n                              </span>\n                            </div>\n                            <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                              {ticket.assignedToUser.name}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Ações */}\n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-slate-600 hover:text-blue-600\"\n                        title=\"Visualizar ticket\"\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-slate-600 hover:text-green-600\"\n                        title=\"Editar ticket\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-slate-600 hover:text-slate-900\"\n                        title=\"Mais opções\"\n                      >\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Footer com estatísticas rápidas */}\n        {recentTickets.length > 0 && (\n          <div className=\"px-6 py-4 bg-slate-50 dark:bg-slate-800/50 border-t border-slate-200 dark:border-slate-700\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-slate-600 dark:text-slate-400\">\n                  Mostrando {recentTickets.length} de {tickets.length} tickets\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-blue-500\"></div>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {recentTickets.filter(t => t.status === 'open').length} Abertos\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {recentTickets.filter(t => t.status === 'in_progress').length} Em Progresso\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {recentTickets.filter(t => t.status === 'resolved').length} Resolvidos\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11704},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  List, \n  Columns, \n  BarChart3, \n  Users, \n  Settings, \n  Ticket,\n  LogOut,\n  User,\n  Bell\n} from \"lucide-react\";\n\nconst navigationItems = [\n  { path: \"/\", icon: LayoutDashboard, label: \"Painel\" },\n  { path: \"/tickets\", icon: List, label: \"Todos os Tickets\" },\n  { path: \"/kanban\", icon: Columns, label: \"Quadro Kanban\" },\n  { path: \"/analytics\", icon: BarChart3, label: \"Análises\" },\n  { path: \"/team\", icon: Users, label: \"Equipe\" },\n  { path: \"/config\", icon: Settings, label: \"Status e Prioridades\" },\n  { path: \"/settings\", icon: Settings, label: \"Configurações\" },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-border flex-shrink-0 flex flex-col shadow-enterprise\">\n      {/* Logo and Brand */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-primary rounded flex items-center justify-center\">\n            <Ticket className=\"text-white\" size={16} />\n          </div>\n          <div>\n            <h1 className=\"text-sm font-semibold text-foreground\">TicketFlow Pro</h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"p-2 space-y-1 flex-1\">\n        {navigationItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={`flex items-center space-x-3 px-3 py-2 rounded text-sm font-medium transition-enterprise cursor-pointer ${\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                }`}\n              >\n                <Icon size={16} />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n            <span>JS</span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\">João Silva</p>\n            <p className=\"text-xs text-muted-foreground truncate\">Administrador</p>\n          </div>\n          <div className=\"flex space-x-1\">\n            <button className=\"p-1 text-muted-foreground hover:text-primary transition-enterprise\">\n              <Bell size={16} />\n            </button>\n            <button className=\"p-1 text-muted-foreground hover:text-destructive transition-enterprise\">\n              <LogOut size={16} />\n            </button>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3043},"client/src/components/StatsCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change: string;\n  changeType: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n  onClick?: () => void;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType, \n  icon: Icon, \n  iconColor,\n  iconBgColor,\n  onClick\n}: StatsCardProps) {\n  const getChangeColor = () => {\n    switch (changeType) {\n      case \"positive\":\n        return \"text-success\";\n      case \"negative\":\n        return \"text-error\";\n      default:\n        return \"text-gray-50\";\n    }\n  };\n\n  const getChangeIcon = () => {\n    if (changeType === \"positive\") return \"↗\";\n    if (changeType === \"negative\") return \"↘\";\n    return \"\";\n  };\n\n  return (\n    <div \n      className={`bg-card border border-border rounded p-6 shadow-enterprise transition-enterprise hover:shadow-enterprise-lg ${onClick ? 'cursor-pointer hover:bg-gray-50' : ''}`}\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium text-muted-foreground mb-1\">{title}</p>\n          <p className=\"text-2xl font-semibold text-foreground mb-2\">{value}</p>\n          <div className={`inline-flex items-center text-xs font-medium ${getChangeColor()}`}>\n            <span className=\"mr-1\">{getChangeIcon()}</span>\n            {change}\n          </div>\n        </div>\n        <div className={`w-12 h-12 ${iconBgColor} rounded flex items-center justify-center`}>\n          <Icon className={iconColor} size={20} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1691},"client/src/components/TicketTrendsChart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport type { TrendData } from \"@shared/schema\";\n\ninterface TicketTrendsChartProps {\n  days: number;\n  filters?: {\n    dateFilter: string;\n    priorityFilter: string;\n    departmentFilter: string;\n  };\n}\n\nexport default function TicketTrendsChart({ days, filters }: TicketTrendsChartProps) {\n  // Build query parameters\n  const buildQueryParams = () => {\n    const params = new URLSearchParams();\n    params.append('days', days.toString());\n    if (filters?.dateFilter) params.append('dateFilter', filters.dateFilter);\n    if (filters?.priorityFilter && filters.priorityFilter !== 'all') params.append('priority', filters.priorityFilter);\n    if (filters?.departmentFilter && filters.departmentFilter !== 'all') params.append('department', filters.departmentFilter);\n    return params.toString();\n  };\n\n  const queryParams = buildQueryParams();\n\n  const { data: trendData, isLoading } = useQuery<TrendData[]>({\n    queryKey: [\"/api/dashboard/trends\", queryParams],\n    queryFn: () => fetch(`/api/dashboard/trends?${queryParams}`).then(res => res.json()),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-gray-50\">Loading chart...</div>\n      </div>\n    );\n  }\n\n  if (!trendData || trendData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-gray-500\">Sem dados disponíveis</div>\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={trendData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <defs>\n            <linearGradient id=\"colorCreated\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n              <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.05}/>\n            </linearGradient>\n            <linearGradient id=\"colorResolved\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#22c55e\" stopOpacity={0.3}/>\n              <stop offset=\"95%\" stopColor=\"#22c55e\" stopOpacity={0.05}/>\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" opacity={0.5} />\n          <XAxis \n            dataKey=\"date\" \n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: \"#6b7280\", fontSize: 12 }}\n            className=\"text-xs\"\n          />\n          <YAxis \n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: \"#6b7280\", fontSize: 12 }}\n            className=\"text-xs\"\n          />\n          <Tooltip \n            contentStyle={{\n              backgroundColor: \"white\",\n              border: \"1px solid #e5e7eb\",\n              borderRadius: \"8px\",\n              boxShadow: \"0 4px 6px -1px rgba(0, 0, 0, 0.1)\",\n            }}\n            labelStyle={{ color: \"#374151\", fontWeight: \"600\" }}\n          />\n          <Legend \n            wrapperStyle={{ paddingTop: \"20px\" }}\n            iconType=\"rect\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"created\"\n            stroke=\"#3b82f6\"\n            fillOpacity={1}\n            fill=\"url(#colorCreated)\"\n            strokeWidth={2}\n            name=\"Criados\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"resolved\"\n            stroke=\"#22c55e\"\n            fillOpacity={1}\n            fill=\"url(#colorResolved)\"\n            strokeWidth={2}\n            name=\"Resolvidos\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":3774},"client/src/components/TopBar.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SimpleTicketModal from \"./SimpleTicketModal\";\n\ninterface TopBarProps {\n  title: string;\n  description?: string;\n}\n\nexport default function TopBar({ title, description }: TopBarProps) {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <>\n      <header className=\"bg-card border-b border-border px-6 py-4 shadow-enterprise\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-xl font-semibold text-foreground\">{title}</h1>\n            {description && (\n              <p className=\"text-sm text-muted-foreground\">{description}</p>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar tickets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64 pl-10 bg-input border-border focus:ring-2 focus:ring-primary/20 focus:border-primary text-sm placeholder:text-muted-foreground\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={16} />\n            </div>\n            \n            {/* Notifications */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"relative text-muted-foreground hover:text-foreground hover:bg-muted transition-enterprise\"\n            >\n              <Bell size={16} />\n              <span className=\"absolute -top-1 -right-1 bg-destructive text-destructive-foreground text-xs rounded-full w-4 h-4 flex items-center justify-center font-medium\">\n                3\n              </span>\n            </Button>\n\n            {/* Create Ticket Button */}\n            <Button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('TopBar button clicked, opening modal');\n                setIsCreateModalOpen(true);\n              }}\n              className=\"bg-primary hover:bg-primary-hover text-primary-foreground font-medium transition-enterprise\"\n            >\n              <Plus size={16} className=\"mr-2\" />\n              Criar Ticket\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <SimpleTicketModal \n        isOpen={isCreateModalOpen} \n        onClose={() => setIsCreateModalOpen(false)} \n      />\n    </>\n  );\n}\n","size_bytes":2812},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AllTickets.tsx":{"content":"import TopBar from \"@/components/TopBar\";\n\nexport default function AllTickets() {\n  return (\n    <>\n      <TopBar \n        title=\"Todos os Tickets\" \n        description=\"Visualizar e gerenciar todos os tickets de suporte\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 bg-gray-10\">\n        <div className=\"bg-white rounded-lg border border-gray-20 p-8 text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">Visualização de Todos os Tickets</h3>\n          <p className=\"text-gray-50\">Esta página conterá uma tabela abrangente de tickets com recursos de filtragem e classificação.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":674},"client/src/pages/Analytics.tsx":{"content":"import TopBar from \"@/components/TopBar\";\n\nexport default function Analytics() {\n  return (\n    <>\n      <TopBar \n        title=\"Análises\" \n        description=\"Insights profundos sobre o desempenho do gerenciamento de tickets\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 bg-gray-10\">\n        <div className=\"bg-white rounded-lg border border-gray-20 p-8 text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">Painel de Análises</h3>\n          <p className=\"text-gray-50\">Esta página conterá funcionalidades detalhadas de análise e relatórios.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":642},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Ticket, Hourglass, CheckCircle, Clock, AlertTriangle, TrendingUp, Users, Timer, Target, Activity } from \"lucide-react\";\nimport StatsCard from \"@/components/StatsCard\";\nimport TicketTrendsChart from \"@/components/TicketTrendsChart\";\nimport PriorityBreakdown from \"@/components/PriorityBreakdown\";\n// Removed RecentTicketsTable as requested\nimport { Search, Filter, Calendar } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { DashboardStats, Department } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [chartPeriod, setChartPeriod] = useState(\"7\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [dateFilter, setDateFilter] = useState('');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [departmentFilter, setDepartmentFilter] = useState('all');\n\n  const navigateToTickets = (filter?: string) => {\n    let path = '/tickets';\n    if (filter) {\n      path += `?filter=${filter}`;\n    }\n    setLocation(path);\n  };\n\n  // Build query parameters for filters\n  const buildQueryParams = () => {\n    const params = new URLSearchParams();\n    if (dateFilter) params.append('dateFilter', dateFilter);\n    if (priorityFilter !== 'all') params.append('priority', priorityFilter);\n    if (departmentFilter !== 'all') params.append('department', departmentFilter);\n    return params.toString();\n  };\n\n  const queryParams = buildQueryParams();\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\", queryParams],\n    queryFn: async () => {\n      const url = `/api/dashboard/stats${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch stats');\n      return response.json();\n    }\n  });\n\n  // Fetch departments for filter dropdown\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Enhanced indicators data\n  const performanceIndicators = [\n    {\n      title: \"SLA Compliance\",\n      value: \"94.2%\",\n      target: \"95%\",\n      change: \"+2.1%\",\n      trend: \"up\",\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n      progress: 94.2\n    },\n    {\n      title: \"Tempo Médio de Resolução\",\n      value: \"4.2h\",\n      target: \"4h\",\n      change: \"-0.3h\",\n      trend: \"down\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n      progress: 89\n    },\n    {\n      title: \"Taxa de Satisfação\",\n      value: \"4.8/5\",\n      target: \"4.5/5\",\n      change: \"+0.2\",\n      trend: \"up\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n      progress: 96\n    },\n    {\n      title: \"Tickets Escalados\",\n      value: \"12\",\n      target: \"< 15\",\n      change: \"-3\",\n      trend: \"down\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      progress: 80\n    }\n  ];\n\n  const teamMetrics = [\n    { name: \"João Silva\", tickets: 28, resolved: 24, efficiency: 85.7 },\n    { name: \"Maria Santos\", tickets: 31, resolved: 29, efficiency: 93.5 },\n    { name: \"Pedro Costa\", tickets: 22, resolved: 19, efficiency: 86.4 },\n    { name: \"Ana Oliveira\", tickets: 26, resolved: 25, efficiency: 96.2 }\n  ];\n\n  const departmentStats = [\n    { name: \"TI\", tickets: 45, resolved: 38, pending: 7, sla: 92 },\n    { name: \"RH\", tickets: 23, resolved: 21, pending: 2, sla: 95 },\n    { name: \"Financeiro\", tickets: 18, resolved: 16, pending: 2, sla: 89 },\n    { name: \"Operações\", tickets: 31, resolved: 27, pending: 4, sla: 87 }\n  ];\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      {/* Header with filters */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n          <p className=\"text-gray-600\">Visão geral do sistema de tickets</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Filter className=\"w-4 h-4\" />\n            <span>Filtros Avançados</span>\n          </button>\n          <Select value={chartPeriod} onValueChange={setChartPeriod}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">7 dias</SelectItem>\n              <SelectItem value=\"30\">30 dias</SelectItem>\n              <SelectItem value=\"90\">90 dias</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Advanced Filters Panel */}\n      {showFilters && (\n        <div className=\"mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Filtros do Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Período</Label>\n                  <Input\n                    type=\"date\"\n                    value={dateFilter}\n                    onChange={(e) => setDateFilter(e.target.value)}\n                    className=\"w-full\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Prioridade</Label>\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todas as Prioridades\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todas as Prioridades</SelectItem>\n                      <SelectItem value=\"critical\">Crítica</SelectItem>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                      <SelectItem value=\"medium\">Média</SelectItem>\n                      <SelectItem value=\"low\">Baixa</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Departamento</Label>\n                  <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Departamentos\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Departamentos</SelectItem>\n                      {departments?.map((dept) => (\n                        <SelectItem key={dept.id} value={dept.id}>\n                          {dept.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n      \n      <div className=\"space-y-8\">\n        {/* Primary Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total de Tickets\"\n            value={stats?.totalTickets || 127}\n            change={stats?.totalTicketsChange || \"+8.2%\"}\n            changeType=\"positive\"\n            icon={Ticket}\n            iconColor=\"text-blue-600\"\n            iconBgColor=\"bg-blue-50\"\n            onClick={() => navigateToTickets('all')}\n          />\n          <StatsCard\n            title=\"Tickets Abertos\"\n            value={stats?.openTickets || 23}\n            change={stats?.openTicketsChange || \"-12%\"}\n            changeType=\"negative\"\n            icon={Hourglass}\n            iconColor=\"text-yellow-600\"\n            iconBgColor=\"bg-yellow-50\"\n            onClick={() => navigateToTickets('open')}\n          />\n          <StatsCard\n            title=\"Resolvidos Hoje\"\n            value={stats?.resolvedToday || 15}\n            change={stats?.resolvedTodayChange || \"+23%\"}\n            changeType=\"positive\"\n            icon={CheckCircle}\n            iconColor=\"text-green-600\"\n            iconBgColor=\"bg-green-50\"\n            onClick={() => navigateToTickets('resolved')}\n          />\n          <StatsCard\n            title=\"Críticos Pendentes\"\n            value={8}\n            change=\"-2\"\n            changeType=\"negative\"\n            icon={AlertTriangle}\n            iconColor=\"text-red-600\"\n            iconBgColor=\"bg-red-50\"\n            onClick={() => navigateToTickets('critical')}\n          />\n        </div>\n\n        {/* Performance Indicators */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {performanceIndicators.map((indicator, index) => (\n            <Card key={index} className=\"border-0 shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`p-2 rounded-lg ${indicator.bgColor}`}>\n                    <Target className={`w-5 h-5 ${indicator.color}`} />\n                  </div>\n                  <Badge variant={indicator.trend === \"up\" ? \"default\" : \"secondary\"}>\n                    {indicator.change}\n                    <TrendingUp className=\"w-3 h-3 ml-1\" />\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-medium text-gray-600\">{indicator.title}</h3>\n                  </div>\n                  <div className=\"flex items-baseline space-x-2\">\n                    <span className=\"text-2xl font-bold text-gray-900\">{indicator.value}</span>\n                    <span className=\"text-sm text-gray-500\">meta: {indicator.target}</span>\n                  </div>\n                  <Progress value={indicator.progress} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Analytics Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Ticket Trends Chart */}\n          <div className=\"lg:col-span-2 bg-card border border-border rounded-lg p-6 shadow-sm\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Tendências de Tickets</h2>\n              <Select value={chartPeriod} onValueChange={setChartPeriod}>\n                <SelectTrigger className=\"w-40 text-sm border-border\">\n                  <SelectValue placeholder=\"Selecionar período\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Últimos 7 dias</SelectItem>\n                  <SelectItem value=\"30\">Últimos 30 dias</SelectItem>\n                  <SelectItem value=\"90\">Últimos 3 meses</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <TicketTrendsChart days={parseInt(chartPeriod)} filters={{ dateFilter, priorityFilter, departmentFilter }} />\n          </div>\n\n          {/* Priority Breakdown */}\n          <div className=\"bg-card border border-border rounded-lg p-6 shadow-sm\">\n            <h2 className=\"text-lg font-semibold text-foreground mb-6\">Distribuição por Prioridade</h2>\n            <PriorityBreakdown filters={{ dateFilter, priorityFilter, departmentFilter }} />\n          </div>\n        </div>\n\n        {/* Team Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"border-0 shadow-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5 text-blue-600\" />\n                <span>Performance da Equipe</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {teamMetrics.map((member, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors\"\n                       onClick={() => navigateToTickets(`user-${member.name}`)}>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">{member.name}</h4>\n                        <Badge variant=\"outline\">{member.efficiency}%</Badge>\n                      </div>\n                      <div className=\"flex text-sm text-gray-600 space-x-4\">\n                        <span>Atribuídos: {member.tickets}</span>\n                        <span>Resolvidos: {member.resolved}</span>\n                      </div>\n                      <Progress value={member.efficiency} className=\"h-2 mt-2\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Department Statistics */}\n          <Card className=\"border-0 shadow-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Activity className=\"w-5 h-5 text-green-600\" />\n                <span>Estatísticas por Departamento</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {departmentStats.map((dept, index) => (\n                  <div key={index} className=\"p-3 border rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\"\n                       onClick={() => navigateToTickets(`dept-${dept.name}`)}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium text-gray-900\">{dept.name}</h4>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={dept.sla >= 90 ? \"default\" : \"destructive\"}>\n                          SLA: {dept.sla}%\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-blue-600\">{dept.tickets}</div>\n                        <div className=\"text-gray-600\">Total</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-green-600\">{dept.resolved}</div>\n                        <div className=\"text-gray-600\">Resolvidos</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold text-yellow-600\">{dept.pending}</div>\n                        <div className=\"text-gray-600\">Pendentes</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Tickets Table */}\n        <div className=\"bg-card border border-border rounded-lg shadow-enterprise overflow-hidden\">\n          {/* Recent Tickets section removed as requested */}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15978},"client/src/pages/KanbanBoard.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, Filter, ChevronDown, MoreHorizontal, Grid3X3, List, Eye, Edit, Trash, X } from 'lucide-react';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Label } from '@/components/ui/label';\nimport { TicketModal } from '@/components/TicketModal';\nimport TicketFinalizationModal from '@/components/TicketFinalizationModal';\nimport { useQuery } from '@tanstack/react-query';\n\n// Enhanced ticket data matching the reference image\nconst mockTickets = [\n  // ATRASADO (Red)\n  {\n    id: 'SR738',\n    number: '#SR738',\n    title: 'INSTALAÇÃO DE OFFICE FRISCO (OLDing)',\n    description: 'Instalação necessária para departamento',\n    status: 'Atrasado',\n    priority: 'Alta',\n    assignee: {\n      name: 'João Silva',\n      avatar: '/avatars/joao.jpg',\n      initials: 'JS'\n    },\n    requester: 'Cliente Opus',\n    department: 'Tecnologia',\n    dueDate: '17/12/2024 16:45',\n    tags: ['FRISCO'],\n    progress: 30\n  },\n  {\n    id: 'SR740',\n    number: '#SR740',\n    title: 'ARQUIVO DE PONTO MAXIMO CREDITO 27 a 01/07',\n    description: 'Processamento de arquivo de ponto',\n    status: 'Atrasado',\n    priority: 'Média',\n    assignee: {\n      name: 'Pedro Costa',\n      avatar: '/avatars/pedro.jpg',\n      initials: 'PC'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 14:32',\n    tags: ['PONTO'],\n    progress: 15\n  },\n  {\n    id: 'SR745',\n    number: '#SR745',\n    title: 'ARQUIVO PONTO MAXIMO CREDITO 24/07',\n    description: 'Processamento mensal de arquivo',\n    status: 'Atrasado',\n    priority: 'Baixa',\n    assignee: {\n      name: 'Ana Santos',\n      avatar: '/avatars/ana.jpg',\n      initials: 'AS'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 16:33',\n    tags: ['ARQUIVO'],\n    progress: 10\n  },\n\n  // ATENDENDO (Green)\n  {\n    id: 'SR734',\n    number: '#SR734',\n    title: 'Testesn Relname dos Files',\n    description: 'Desenvolvimento do novo files dos pais',\n    status: 'Atendendo',\n    priority: 'Alta',\n    assignee: {\n      name: 'Maria Silva',\n      avatar: '/avatars/maria.jpg',\n      initials: 'MS'\n    },\n    requester: 'Grupo Opus',\n    department: 'Desenvolvimento',\n    dueDate: '17/12/2024 17:32',\n    tags: ['DESENVOLVIMENTO'],\n    progress: 70\n  },\n  {\n    id: 'SR736',\n    number: '#SR736',\n    title: 'Grupo Opus',\n    description: 'TRANSPORTO PEÇA FARMARIO MECÂNICO VASSOURAS M4',\n    status: 'Atendendo',\n    priority: 'Média',\n    assignee: {\n      name: 'Carlos Lima',\n      avatar: '/avatars/carlos.jpg',\n      initials: 'CL'\n    },\n    requester: 'Grupo Opus',\n    department: 'Manutenção',\n    dueDate: '17/12/2024 15:46',\n    tags: ['MECÂNICO'],\n    progress: 85\n  },\n  {\n    id: 'SR742',\n    number: '#SR742',\n    title: 'Grupo Opus',\n    description: 'ATENDIMENTO TÉRMINO DE CONTRATO WILSON JOSE DE MATOS',\n    status: 'Atendendo',\n    priority: 'Alta',\n    assignee: {\n      name: 'Fernanda Costa',\n      avatar: '/avatars/fernanda.jpg',\n      initials: 'FC'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 15:24',\n    tags: ['CONTRATO'],\n    progress: 60\n  },\n\n  // PAUSADO (Yellow)\n  {\n    id: 'SR735',\n    number: '#SR735',\n    title: 'Grupo Opus',\n    description: 'Relatório Reservatórios Chassis dos Serviços',\n    status: 'Pausado',\n    priority: 'Média',\n    assignee: {\n      name: 'Roberto Santos',\n      avatar: '/avatars/roberto.jpg',\n      initials: 'RS'\n    },\n    requester: 'Grupo Opus',\n    department: 'Operações',\n    dueDate: '17/12/2024 16:35',\n    tags: ['RELATÓRIO'],\n    progress: 45\n  },\n  {\n    id: 'SR739',\n    number: '#SR739',\n    title: 'Grupo Opus',\n    description: 'ADMISSÃO - THIAGO RAMOS GRUPO LED',\n    status: 'Pausado',\n    priority: 'Alta',\n    assignee: {\n      name: 'Juliana Alves',\n      avatar: '/avatars/juliana.jpg',\n      initials: 'JA'\n    },\n    requester: 'Grupo Opus',\n    department: 'RH',\n    dueDate: '17/12/2024 15:30',\n    tags: ['ADMISSÃO'],\n    progress: 25\n  },\n  {\n    id: 'SR743',\n    number: '#SR743',\n    title: 'Grupo Opus',\n    description: 'INSTALAÇÃO PRINT DA CHVS',\n    status: 'Pausado',\n    priority: 'Baixa',\n    assignee: {\n      name: 'Lucas Ferreira',\n      avatar: '/avatars/lucas.jpg',\n      initials: 'LF'\n    },\n    requester: 'Grupo Opus',\n    department: 'TI',\n    dueDate: '17/12/2024 16:30',\n    tags: ['INSTALAÇÃO'],\n    progress: 20\n  },\n\n  // RESOLVIDO (Gray)\n  {\n    id: 'SR744',\n    number: '#SR744',\n    title: 'LANÇAMENTOS WEEGET AVISO DA SILVA',\n    description: 'CARTA DE CANALIZAÇÃO WATER AVISO DA SILVA',\n    status: 'Resolvido',\n    priority: 'Média',\n    assignee: {\n      name: 'Beatriz Oliveira',\n      avatar: '/avatars/beatriz.jpg',\n      initials: 'BO'\n    },\n    requester: 'Grupo Opus',\n    department: 'Operações',\n    dueDate: '17/12/2024 14:45',\n    tags: ['CANALIZAÇÃO'],\n    progress: 100\n  },\n  {\n    id: 'SR746',\n    number: '#SR746',\n    title: 'Grupo Opus',\n    description: 'ERP LICENCIAMENTO - NÃO CONSEGUE BAIXAR O VEEAM',\n    status: 'Resolvido',\n    priority: 'Alta',\n    assignee: {\n      name: 'Diego Silva',\n      avatar: '/avatars/diego.jpg',\n      initials: 'DS'\n    },\n    requester: 'Grupo Opus',\n    department: 'TI',\n    dueDate: '17/12/2024 13:20',\n    tags: ['ERP'],\n    progress: 100\n  },\n  {\n    id: 'SR747',\n    number: '#SR747',\n    title: 'Grupo Opus',\n    description: 'Subutando Arquitetos Balanço 042',\n    status: 'Resolvido',\n    priority: 'Baixa',\n    assignee: {\n      name: 'Patricia Mendes',\n      avatar: '/avatars/patricia.jpg',\n      initials: 'PM'\n    },\n    requester: 'Grupo Opus',\n    department: 'Projetos',\n    dueDate: '17/12/2024 12:15',\n    tags: ['PROJETOS'],\n    progress: 100\n  }\n];\n\nexport default function KanbanBoard() {\n  const [draggedTicket, setDraggedTicket] = useState<any>(null);\n  const [finalizationModal, setFinalizationModal] = useState<{\n    isOpen: boolean;\n    ticket: any | null;\n  }>({ isOpen: false, ticket: null });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterBy, setFilterBy] = useState('all');\n  const [viewMode, setViewMode] = useState<'kanban' | 'list'>('kanban');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [departmentFilter, setDepartmentFilter] = useState('all');\n  const [assigneeFilter, setAssigneeFilter] = useState('all');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  // Fetch real tickets from API\n  const { data: tickets = [], refetch: refetchTickets } = useQuery<any[]>({\n    queryKey: ['/api/tickets'],\n  });\n\n  // Fetch current user for role checking\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n  });\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Buscar configurações de status e prioridade\n  const { data: statusConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/status'],\n  });\n\n  const { data: priorityConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/priority'],\n  });\n\n  // Define columns with dynamic counts using database configurations\n  const columns = statusConfigs?.map(status => ({\n    id: status.value,\n    title: status.name.toUpperCase(),\n    color: status.color === '#dc2626' ? 'bg-red-500' : \n           status.color === '#f59e0b' ? 'bg-yellow-500' :\n           status.color === '#10b981' ? 'bg-green-500' : 'bg-gray-500',\n    headerColor: status.color === '#dc2626' ? 'bg-red-500' : \n                 status.color === '#f59e0b' ? 'bg-yellow-500' :\n                 status.color === '#10b981' ? 'bg-green-500' : 'bg-gray-500',\n    count: tickets.filter(t => t.status === status.value).length\n  })) || [\n    { id: 'open', title: 'ABERTO', color: 'bg-red-500', headerColor: 'bg-red-500', count: 0 },\n    { id: 'in_progress', title: 'EM PROGRESSO', color: 'bg-green-500', headerColor: 'bg-green-500', count: 0 },\n    { id: 'on_hold', title: 'PAUSADO', color: 'bg-yellow-500', headerColor: 'bg-yellow-500', count: 0 },\n    { id: 'resolved', title: 'RESOLVIDO', color: 'bg-gray-500', headerColor: 'bg-gray-500', count: 0 }\n  ];\n\n  // Check for URL parameters on component mount\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const filter = urlParams.get('filter');\n    \n    if (filter) {\n      switch (filter) {\n        case 'open':\n          setStatusFilter('Aberto');\n          setShowAdvancedFilters(true);\n          break;\n        case 'resolved':\n          setStatusFilter('Resolvido');\n          setShowAdvancedFilters(true);\n          break;\n        case 'critical':\n          setPriorityFilter('Alta');\n          setShowAdvancedFilters(true);\n          break;\n        case 'all':\n        default:\n          // Keep all filters as 'all'\n          break;\n      }\n    }\n  }, []);\n\n  const handleDragStart = (e: any, ticket: any) => {\n    setDraggedTicket(ticket);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e: any) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: any, status: string) => {\n    e.preventDefault();\n    if (draggedTicket && draggedTicket.status !== status) {\n      // Se estiver movendo para \"Resolvido\", mostrar modal de finalização\n      if (status === 'resolved') {\n        setFinalizationModal({ isOpen: true, ticket: draggedTicket });\n        setDraggedTicket(null);\n        return;\n      }\n      \n      // Para outros status, fazer update direto via API\n      fetch(`/api/tickets/${draggedTicket.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status }),\n      }).then(() => {\n        refetchTickets();\n      }).catch(error => {\n        console.error('Erro ao atualizar status:', error);\n      });\n      setDraggedTicket(null);\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority || p.name === priority);\n    if (config?.color) {\n      const colorMap: Record<string, string> = {\n        '#dc2626': 'bg-red-100 text-red-800 border-red-200',\n        '#f59e0b': 'bg-orange-100 text-orange-800 border-orange-200',\n        '#3b82f6': 'bg-blue-100 text-blue-800 border-blue-200',\n        '#10b981': 'bg-green-100 text-green-800 border-green-200',\n      };\n      return colorMap[config.color] || 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n    return 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getProgressColor = (progress: number, status: string) => {\n    if (status === 'Resolvido') return 'bg-green-500';\n    if (status === 'Atrasado') return 'bg-red-500';\n    if (status === 'Pausado') return 'bg-yellow-500';\n    return 'bg-blue-500';\n  };\n\n  // Funções SLA\n  const getSLAStatusColor = (ticket: any) => {\n    const slaTime = getSLATimeInHours(ticket);\n    const timeElapsed = getTimeElapsedInHours(ticket.createdAt);\n    const percentageUsed = (timeElapsed / slaTime) * 100;\n    \n    if (percentageUsed >= 100) return 'bg-red-500'; // Vencido\n    if (percentageUsed >= 80) return 'bg-orange-500'; // Crítico\n    if (percentageUsed >= 60) return 'bg-yellow-500'; // Atenção\n    return 'bg-green-500'; // Ok\n  };\n\n  const getSLATimeInHours = (ticket: any) => {\n    // SLA baseado na prioridade\n    switch (ticket.priority?.toLowerCase()) {\n      case 'crítica': return 4; // 4 horas\n      case 'alta': return 24; // 1 dia\n      case 'média': return 72; // 3 dias\n      case 'baixa': return 168; // 7 dias\n      default: return 24;\n    }\n  };\n\n  const getTimeElapsedInHours = (createdAt: string) => {\n    const now = new Date();\n    const created = new Date(createdAt);\n    return Math.abs(now.getTime() - created.getTime()) / (1000 * 60 * 60);\n  };\n\n  const getSLATimeRemaining = (ticket: any) => {\n    const slaTime = getSLATimeInHours(ticket);\n    const timeElapsed = getTimeElapsedInHours(ticket.createdAt);\n    const remaining = slaTime - timeElapsed;\n    \n    if (remaining <= 0) return 'Vencido';\n    if (remaining < 1) return `${Math.ceil(remaining * 60)}min`;\n    if (remaining < 24) return `${Math.ceil(remaining)}h`;\n    return `${Math.ceil(remaining / 24)}d`;\n  };\n\n  const getSLAStatus = (ticket: any) => {\n    const slaTime = getSLATimeInHours(ticket);\n    const timeElapsed = getTimeElapsedInHours(ticket.createdAt);\n    const percentageUsed = (timeElapsed / slaTime) * 100;\n    \n    if (percentageUsed >= 100) return 'Vencido';\n    if (percentageUsed >= 80) return 'Crítico';\n    if (percentageUsed >= 60) return 'Atenção';\n    return 'Ok';\n  };\n\n  const filteredTickets = tickets.filter(ticket => {\n    const matchesSearch = (ticket.subject || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.ticketNumber || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.assignedToUser?.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.createdByUser?.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (ticket.department?.name || '').toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || ticket.status === statusFilter;\n    const matchesPriority = priorityFilter === 'all' || ticket.priority === priorityFilter;\n    const matchesDepartment = departmentFilter === 'all' || ticket.department?.name === departmentFilter;\n    const matchesAssignee = assigneeFilter === 'all' || ticket.assignedToUser?.name === assigneeFilter;\n    \n    // Legacy filter compatibility\n    const matchesLegacyFilter = filterBy === 'all' || \n      (filterBy === 'alta' && ticket.priority === 'Alta') ||\n      (filterBy === 'atrasado' && ticket.status === 'Atrasado');\n    \n    return matchesSearch && matchesStatus && matchesPriority && matchesDepartment && matchesAssignee && matchesLegacyFilter;\n  });\n\n  // Get unique values for filter options\n  const uniqueStatuses = Array.from(new Set(tickets.map(t => t.status).filter(Boolean)));\n  const uniquePriorities = Array.from(new Set(tickets.map(t => t.priority).filter(Boolean)));\n  const uniqueDepartments = Array.from(new Set(tickets.map(t => t.department?.name).filter(Boolean)));\n  const uniqueAssignees = Array.from(new Set(tickets.map(t => t.assignedToUser?.name).filter(Boolean)));\n\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setFilterBy('all');\n    setStatusFilter('all');\n    setPriorityFilter('all');\n    setDepartmentFilter('all');\n    setAssigneeFilter('all');\n  };\n\n  const handleDeleteTicket = async (ticketId: string) => {\n    if (!currentUser || currentUser.role !== 'admin') {\n      console.warn('Apenas administradores podem excluir tickets');\n      return;\n    }\n\n    if (window.confirm('Tem certeza que deseja excluir este ticket? Esta ação não pode ser desfeita.')) {\n      try {\n        const response = await fetch(`/api/tickets/${ticketId}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          // Refetch dos tickets para atualizar lista\n          refetchTickets();\n          console.log('Ticket excluído com sucesso');\n        } else {\n          console.error('Erro ao excluir ticket');\n        }\n      } catch (error) {\n        console.error('Erro na requisição:', error);\n      }\n    }\n  };\n\n  const handleFinalizeTicket = (ticket: any) => {\n    setFinalizationModal({ isOpen: true, ticket });\n  };\n\n  const handleFinalizationConfirm = async (finalizationData: any) => {\n    if (!finalizationModal.ticket) return;\n\n    try {\n      // Fazer chamada à API para finalizar o ticket\n      const response = await fetch(`/api/tickets/${finalizationModal.ticket.id}/finalize`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          status: 'Resolvido',\n          finalizationData: finalizationData,\n          progress: 100\n        }),\n      });\n\n      if (response.ok) {\n        // Refetch dos tickets para atualizar com dados reais do banco\n        refetchTickets();\n        \n        console.log('Ticket finalizado com sucesso');\n      } else {\n        console.error('Erro ao finalizar ticket no servidor');\n      }\n\n      setFinalizationModal({ isOpen: false, ticket: null });\n    } catch (error) {\n      console.error('Erro ao finalizar ticket:', error);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Listagem de Tickets</h1>\n            <p className=\"text-gray-600\">\n              {viewMode === 'kanban' ? 'Gerencie tickets em formato Kanban' : 'Visualize tickets em formato de lista'}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {/* View Mode Toggle */}\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\n              <Button\n                variant={viewMode === 'kanban' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('kanban')}\n                className=\"px-3\"\n              >\n                <Grid3X3 className=\"w-4 h-4 mr-2\" />\n                Kanban\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                className=\"px-3\"\n              >\n                <List className=\"w-4 h-4 mr-2\" />\n                Lista\n              </Button>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtro Avançado\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Quick Filters */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input \n                placeholder=\"Buscar por ticket, título, responsável, solicitante...\" \n                className=\"pl-10\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os Status</SelectItem>\n                {uniqueStatuses.map(status => (\n                  <SelectItem key={status} value={status}>{status}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Prioridade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as Prioridades</SelectItem>\n                {uniquePriorities.map(priority => (\n                  <SelectItem key={priority} value={priority}>{priority}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtros Avançados\n              <ChevronDown className={`w-4 h-4 ml-1 transition-transform ${showAdvancedFilters ? 'rotate-180' : ''}`} />\n            </Button>\n\n            {(searchTerm || statusFilter !== 'all' || priorityFilter !== 'all' || departmentFilter !== 'all' || assigneeFilter !== 'all') && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={clearAllFilters}>\n                Limpar Filtros\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters */}\n          {showAdvancedFilters && (\n            <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Departamento</Label>\n                  <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Departamentos\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Departamentos</SelectItem>\n                      {uniqueDepartments.map(dept => (\n                        <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Responsável</Label>\n                  <Select value={assigneeFilter} onValueChange={setAssigneeFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todos os Responsáveis\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Responsáveis</SelectItem>\n                      {uniqueAssignees.map(assignee => (\n                        <SelectItem key={assignee} value={assignee}>{assignee}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Filtros Rápidos</Label>\n                  <Select value={filterBy} onValueChange={setFilterBy}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Filtros Especiais\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos</SelectItem>\n                      <SelectItem value=\"alta\">Alta Prioridade</SelectItem>\n                      <SelectItem value=\"atrasado\">Atrasados</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex flex-col justify-end\">\n                  <div className=\"text-sm text-gray-600 bg-white p-3 rounded border\">\n                    <strong>{filteredTickets.length}</strong> de <strong>{tickets.length}</strong> tickets\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Content Based on View Mode */}\n      {viewMode === 'kanban' ? (\n        /* Kanban Board */\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {columns.map((column) => (\n            <div key={column.id} className=\"space-y-4\">\n              {/* Column Header */}\n              <div className={`${column.headerColor} text-white p-4 rounded-lg flex items-center justify-between shadow-md`}>\n                <span className=\"font-bold text-sm tracking-wide\">{column.title}</span>\n                <div className=\"bg-white bg-opacity-20 rounded-full w-8 h-8 flex items-center justify-center\">\n                  <span className=\"text-sm font-bold\">\n                    {filteredTickets.filter(t => t.status === column.id).length}\n                  </span>\n                </div>\n              </div>\n              \n              {/* Drop Zone */}\n              <div \n                className=\"space-y-3 min-h-[600px] p-2 rounded-lg\"\n                onDragOver={handleDragOver}\n                onDrop={(e) => handleDrop(e, column.id)}\n              >\n                {filteredTickets\n                  .filter(ticket => ticket.status === column.id)\n                  .map((ticket) => (\n                    <TicketModal key={ticket.id} ticket={ticket} onUpdate={(updatedTicket: any) => {\n                      // Atualizar lista será feita pela revalidação de query\n                    }}>\n                      <Card \n                        className=\"cursor-pointer hover:shadow-lg transition-all duration-200 border-0 shadow-sm bg-white\"\n                        draggable\n                        onDragStart={(e) => handleDragStart(e, ticket)}\n                      >\n                      <CardContent className=\"p-4\">\n                        <div className=\"space-y-3\">\n                          {/* Header */}\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs font-bold text-gray-600\">{ticket.ticketNumber}</span>\n                            <div className=\"flex items-center space-x-1\">\n                              {/* Botão Finalizar (apenas para tickets não resolvidos) */}\n                              {ticket.status !== 'resolved' && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"w-6 h-6 p-0 text-green-600 hover:text-green-700 hover:bg-green-50\"\n                                  onClick={(e) => {\n                                    e.preventDefault();\n                                    e.stopPropagation();\n                                    handleFinalizeTicket(ticket);\n                                  }}\n                                  title=\"Finalizar Ticket\"\n                                >\n                                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                                  </svg>\n                                </Button>\n                              )}\n                              <Button variant=\"ghost\" size=\"sm\" className=\"w-6 h-6 p-0\">\n                                <MoreHorizontal className=\"w-4 h-4 text-gray-400\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Title */}\n                          <div>\n                            <h3 className=\"font-bold text-sm text-gray-900 leading-tight mb-1\">\n                              {ticket.subject}\n                            </h3>\n                            <p className=\"text-xs text-gray-600 line-clamp-2\">\n                              {ticket.description}\n                            </p>\n                          </div>\n\n                          {/* Assignee and Date */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Avatar className=\"w-6 h-6\">\n                                <AvatarFallback className=\"text-xs bg-blue-100 text-blue-600\">\n                                  {ticket.assignedToUser?.name?.charAt(0) || 'U'}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-xs text-gray-600\">{ticket.assignedToUser?.name || 'Não atribuído'}</span>\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {new Date(ticket.createdAt).toLocaleDateString('pt-BR')}\n                            </div>\n                          </div>\n\n                          {/* Priority Badge and SLA */}\n                          <div className=\"flex items-center justify-between\">\n                            <Badge className={`${getPriorityColor(ticket.priority)} text-xs px-2 py-1`}>\n                              {ticket.priority}\n                            </Badge>\n                            <span className=\"text-xs text-gray-500\">{ticket.department?.name || 'Sem departamento'}</span>\n                          </div>\n\n                          {/* SLA Status */}\n                          <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n                            <div className=\"flex items-center space-x-1\">\n                              <div className={`w-2 h-2 rounded-full ${getSLAStatusColor(ticket)}`}></div>\n                              <span className=\"text-xs text-gray-600\">SLA: {getSLATimeRemaining(ticket)}</span>\n                            </div>\n                            <span className=\"text-xs text-gray-400\">{getSLAStatus(ticket)}</span>\n                          </div>\n\n                          {/* Progress Bar */}\n                          <div className=\"space-y-1\">\n                            <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                              <div \n                                className={`h-1.5 rounded-full transition-all duration-300 ${getProgressColor(ticket.progress, ticket.status)}`}\n                                style={{ width: `${ticket.progress}%` }}\n                              />\n                            </div>\n                            <div className=\"flex justify-between text-xs text-gray-500\">\n                              <span>Progresso</span>\n                              <span>{ticket.progress}%</span>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                    </TicketModal>\n                  ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        /* List View */\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-[100px]\">Ticket</TableHead>\n                <TableHead>Título</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Prioridade</TableHead>\n                <TableHead>Responsável</TableHead>\n                <TableHead>Solicitante</TableHead>\n                <TableHead>Departamento</TableHead>\n                <TableHead>Progresso</TableHead>\n                <TableHead>Vencimento</TableHead>\n                <TableHead className=\"w-[100px]\">Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredTickets.map((ticket) => (\n                <TableRow key={ticket.id} className=\"hover:bg-gray-50\">\n                  <TableCell className=\"font-mono text-sm\">\n                    {ticket.ticketNumber}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <p className=\"font-medium text-sm\">{ticket.subject}</p>\n                      {ticket.tags && ticket.tags.length > 0 && (\n                        <div className=\"flex gap-1\">\n                          {ticket.tags.slice(0, 2).map((tag: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {ticket.tags.length > 2 && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{ticket.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${\n                        ticket.status === 'Atrasado' ? 'border-red-200 text-red-800 bg-red-50' :\n                        ticket.status === 'Atendendo' ? 'border-green-200 text-green-800 bg-green-50' :\n                        ticket.status === 'Pausado' ? 'border-yellow-200 text-yellow-800 bg-yellow-50' :\n                        'border-gray-200 text-gray-800 bg-gray-50'\n                      }`}\n                    >\n                      {ticket.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${getPriorityColor(ticket.priority)}`}\n                    >\n                      {ticket.priority}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                          {ticket.assignedToUser?.name?.charAt(0) || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm\">{ticket.assignedToUser?.name || 'Não atribuído'}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm\">{ticket.createdByUser?.name || 'Desconhecido'}</TableCell>\n                  <TableCell className=\"text-sm\">{ticket.department?.name || 'Sem departamento'}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full ${getProgressColor(ticket.progress, ticket.status)}`}\n                          style={{ width: `${ticket.progress}%` }}\n                        />\n                      </div>\n                      <span className=\"text-xs text-gray-500 w-8\">{ticket.progress}%</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm\">{new Date(ticket.createdAt).toLocaleDateString('pt-BR')}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <TicketModal ticket={ticket} onUpdate={(updatedTicket: any) => {\n                        // Atualizar lista será feita pela revalidação de query\n                      }}>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"w-8 h-8\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </TicketModal>\n                      {/* Botão Finalizar (apenas para tickets não resolvidos) */}\n                      {ticket.status !== 'resolved' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"w-8 h-8 text-green-600 hover:text-green-700\"\n                          onClick={() => handleFinalizeTicket(ticket)}\n                          title=\"Finalizar Ticket\"\n                        >\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                          </svg>\n                        </Button>\n                      )}\n                      {/* Botão de excluir apenas para administradores */}\n                      {currentUser?.role === 'admin' && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"w-8 h-8 text-red-600 hover:text-red-700\"\n                          onClick={() => handleDeleteTicket(ticket.id)}\n                        >\n                          <Trash className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n\n      {/* Modal de Finalização */}\n      {finalizationModal.isOpen && finalizationModal.ticket && (\n        <TicketFinalizationModal\n          isOpen={finalizationModal.isOpen}\n          ticket={finalizationModal.ticket}\n          onClose={() => setFinalizationModal({ isOpen: false, ticket: null })}\n          onConfirm={handleFinalizationConfirm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":37383},"client/src/pages/Settings.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Settings as SettingsIcon, \n  User, \n  Bell, \n  Shield, \n  Database, \n  Mail, \n  Palette, \n  Globe, \n  Key,\n  Save,\n  Download,\n  Upload,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  Info\n} from 'lucide-react';\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState('profile');\n  const [notifications, setNotifications] = useState({\n    email: true,\n    push: false,\n    sms: false,\n    digest: true\n  });\n  \n  const [systemSettings, setSystemSettings] = useState({\n    theme: 'system',\n    language: 'pt-BR',\n    timezone: 'America/Sao_Paulo',\n    dateFormat: 'DD/MM/YYYY',\n    autoAssign: true,\n    requireApproval: false\n  });\n\n  const handleSave = () => {\n    console.log('Salvando configurações...');\n    // TODO: Implementar salvamento real\n  };\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n            <SettingsIcon className=\"w-5 h-5 text-blue-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Configurações</h1>\n            <p className=\"text-muted-foreground\">Gerencie suas preferências e configurações do sistema</p>\n          </div>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n            <User className=\"w-4 h-4\" />\n            <span>Perfil</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n            <Bell className=\"w-4 h-4\" />\n            <span>Notificações</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Segurança</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"flex items-center space-x-2\">\n            <Database className=\"w-4 h-4\" />\n            <span>Sistema</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-2\">\n            <Palette className=\"w-4 h-4\" />\n            <span>Aparência</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Perfil */}\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Informações Pessoais</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input id=\"firstName\" defaultValue=\"João\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input id=\"lastName\" defaultValue=\"Silva\" />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input id=\"email\" type=\"email\" defaultValue=\"joao.silva@empresa.com\" />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input id=\"phone\" defaultValue=\"(11) 99999-9999\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"extension\">Ramal</Label>\n                    <Input id=\"extension\" defaultValue=\"1234\" />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"department\">Departamento</Label>\n                  <Select defaultValue=\"ti\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ti\">Tecnologia da Informação</SelectItem>\n                      <SelectItem value=\"rh\">Recursos Humanos</SelectItem>\n                      <SelectItem value=\"financeiro\">Financeiro</SelectItem>\n                      <SelectItem value=\"operacoes\">Operações</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Status e Preferências</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Status atual</Label>\n                    <p className=\"text-sm text-muted-foreground\">Define sua disponibilidade</p>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Receber atribuições automáticas</Label>\n                    <p className=\"text-sm text-muted-foreground\">Permite que tickets sejam atribuídos automaticamente</p>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Modo foco</Label>\n                    <p className=\"text-sm text-muted-foreground\">Reduz notificações durante trabalho concentrado</p>\n                  </div>\n                  <Switch />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Notificações */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"w-5 h-5\" />\n                <span>Preferências de Notificação</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Notificações por email</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber atualizações importantes por email</p>\n                  </div>\n                  <Switch \n                    checked={notifications.email}\n                    onCheckedChange={(checked) => setNotifications({...notifications, email: checked})}\n                  />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Notificações push</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber notificações instantâneas no navegador</p>\n                  </div>\n                  <Switch \n                    checked={notifications.push}\n                    onCheckedChange={(checked) => setNotifications({...notifications, push: checked})}\n                  />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Notificações SMS</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber alertas críticos por SMS</p>\n                  </div>\n                  <Switch \n                    checked={notifications.sms}\n                    onCheckedChange={(checked) => setNotifications({...notifications, sms: checked})}\n                  />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Resumo diário</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receber relatório diário de atividades</p>\n                  </div>\n                  <Switch \n                    checked={notifications.digest}\n                    onCheckedChange={(checked) => setNotifications({...notifications, digest: checked})}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Segurança */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Key className=\"w-5 h-5\" />\n                  <span>Senha e Autenticação</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"currentPassword\">Senha atual</Label>\n                  <Input id=\"currentPassword\" type=\"password\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"newPassword\">Nova senha</Label>\n                  <Input id=\"newPassword\" type=\"password\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"confirmPassword\">Confirmar nova senha</Label>\n                  <Input id=\"confirmPassword\" type=\"password\" />\n                </div>\n                <Button className=\"w-full\">\n                  Alterar Senha\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Configurações de Segurança</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Autenticação de dois fatores</Label>\n                    <p className=\"text-sm text-muted-foreground\">Adiciona uma camada extra de segurança</p>\n                  </div>\n                  <Switch />\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Sessões ativas</Label>\n                    <p className=\"text-sm text-muted-foreground\">3 dispositivos conectados</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Gerenciar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Sistema */}\n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Database className=\"w-5 h-5\" />\n                  <span>Configurações do Sistema</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Idioma</Label>\n                  <Select value={systemSettings.language} onValueChange={(value) => setSystemSettings({...systemSettings, language: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pt-BR\">Português (Brasil)</SelectItem>\n                      <SelectItem value=\"en-US\">English (US)</SelectItem>\n                      <SelectItem value=\"es-ES\">Español</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Fuso horário</Label>\n                  <Select value={systemSettings.timezone} onValueChange={(value) => setSystemSettings({...systemSettings, timezone: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"America/Sao_Paulo\">São Paulo (GMT-3)</SelectItem>\n                      <SelectItem value=\"America/New_York\">New York (GMT-5)</SelectItem>\n                      <SelectItem value=\"Europe/London\">London (GMT+0)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Formato de data</Label>\n                  <Select value={systemSettings.dateFormat} onValueChange={(value) => setSystemSettings({...systemSettings, dateFormat: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/AAAA</SelectItem>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/AAAA</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">AAAA-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Backup e Dados</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Exportar Dados\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Importar Configurações\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Restaurar Padrões\n                </Button>\n                <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                        Último backup\n                      </p>\n                      <p className=\"text-xs text-yellow-600 dark:text-yellow-300\">\n                        15/01/2024 às 14:30\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Aparência */}\n        <TabsContent value=\"appearance\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Palette className=\"w-5 h-5\" />\n                <span>Tema e Aparência</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Tema</Label>\n                <Select value={systemSettings.theme} onValueChange={(value) => setSystemSettings({...systemSettings, theme: value})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"system\">Automático (sistema)</SelectItem>\n                    <SelectItem value=\"light\">Claro</SelectItem>\n                    <SelectItem value=\"dark\">Escuro</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  O modo automático seguirá as configurações do seu sistema\n                </p>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-4\">\n                <Label>Densidade da interface</Label>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"p-4 border border-border rounded-lg cursor-pointer hover:border-primary\">\n                    <div className=\"text-sm font-medium\">Compacta</div>\n                    <div className=\"text-xs text-muted-foreground\">Mais informações em menos espaço</div>\n                  </div>\n                  <div className=\"p-4 border border-primary bg-primary/5 rounded-lg cursor-pointer\">\n                    <div className=\"text-sm font-medium\">Normal</div>\n                    <div className=\"text-xs text-muted-foreground\">Equilibrio entre espaço e informação</div>\n                  </div>\n                  <div className=\"p-4 border border-border rounded-lg cursor-pointer hover:border-primary\">\n                    <div className=\"text-sm font-medium\">Espaçosa</div>\n                    <div className=\"text-xs text-muted-foreground\">Mais espaço para navegação</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Botão de Salvar Fixo */}\n      <div className=\"fixed bottom-6 right-6\">\n        <Button onClick={handleSave} size=\"lg\" className=\"shadow-lg\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          Salvar Configurações\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":18414},"client/src/pages/Team.tsx":{"content":"import TopBar from \"@/components/TopBar\";\n\nexport default function Team() {\n  return (\n    <>\n      <TopBar \n        title=\"Equipe\" \n        description=\"Gerenciar membros da equipe e suas funções\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6 bg-gray-10\">\n        <div className=\"bg-white rounded-lg border border-gray-20 p-8 text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">Gerenciamento de Equipe</h3>\n          <p className=\"text-gray-50\">Esta página conterá recursos de gerenciamento de membros da equipe e atribuição de funções.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":639},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/index.ts":{"content":"import { configureStore } from '@reduxjs/toolkit';\nimport ticketReducer from './ticketSlice';\n\nexport const store = configureStore({\n  reducer: {\n    tickets: ticketReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","size_bytes":292},"client/src/store/ticketSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { TicketWithDetails } from '@shared/schema';\n\ninterface TicketState {\n  tickets: TicketWithDetails[];\n  loading: boolean;\n  error: string | null;\n  selectedTicket: TicketWithDetails | null;\n  filters: {\n    status: string[];\n    priority: string[];\n    assignee: string[];\n  };\n  searchQuery: string;\n}\n\nconst initialState: TicketState = {\n  tickets: [],\n  loading: false,\n  error: null,\n  selectedTicket: null,\n  filters: {\n    status: [],\n    priority: [],\n    assignee: [],\n  },\n  searchQuery: '',\n};\n\nconst ticketSlice = createSlice({\n  name: 'tickets',\n  initialState,\n  reducers: {\n    setTickets: (state, action: PayloadAction<TicketWithDetails[]>) => {\n      state.tickets = action.payload;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n    setSelectedTicket: (state, action: PayloadAction<TicketWithDetails | null>) => {\n      state.selectedTicket = action.payload;\n    },\n    updateTicket: (state, action: PayloadAction<TicketWithDetails>) => {\n      const index = state.tickets.findIndex(ticket => ticket.id === action.payload.id);\n      if (index !== -1) {\n        state.tickets[index] = action.payload;\n      }\n    },\n    addTicket: (state, action: PayloadAction<TicketWithDetails>) => {\n      state.tickets.unshift(action.payload);\n    },\n    removeTicket: (state, action: PayloadAction<string>) => {\n      state.tickets = state.tickets.filter(ticket => ticket.id !== action.payload);\n    },\n    setFilters: (state, action: PayloadAction<Partial<TicketState['filters']>>) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    setSearchQuery: (state, action: PayloadAction<string>) => {\n      state.searchQuery = action.payload;\n    },\n  },\n});\n\nexport const {\n  setTickets,\n  setLoading,\n  setError,\n  setSelectedTicket,\n  updateTicket,\n  addTicket,\n  removeTicket,\n  setFilters,\n  setSearchQuery,\n} = ticketSlice.actions;\n\nexport default ticketSlice.reducer;\n","size_bytes":2149},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\"\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"default\", size = \"default\", ...props }, ref) => {\n    return (\n      <button\n        className={cn(\n          \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n          {\n            \"bg-primary text-primary-foreground hover:bg-primary/90\":\n              variant === \"default\",\n            \"bg-destructive text-destructive-foreground hover:bg-destructive/90\":\n              variant === \"destructive\",\n            \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\":\n              variant === \"outline\",\n            \"bg-secondary text-secondary-foreground hover:bg-secondary/80\":\n              variant === \"secondary\",\n            \"hover:bg-accent hover:text-accent-foreground\": variant === \"ghost\",\n            \"text-primary underline-offset-4 hover:underline\": variant === \"link\",\n          },\n          {\n            \"h-10 px-4 py-2\": size === \"default\",\n            \"h-9 rounded-md px-3\": size === \"sm\",\n            \"h-11 rounded-md px-8\": size === \"lg\",\n            \"h-10 w-10\": size === \"icon\",\n          },\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button }","size_bytes":1784},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }","size_bytes":2220},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport type {\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n} from \"react-hook-form\"\nimport { Controller, FormProvider, useFormContext } from \"react-hook-form\"\nimport { cn } from \"@/lib/utils\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<\"label\">,\n  React.ComponentPropsWithoutRef<\"label\">\n>(({ className, ...props }, ref) => {\n  const { formItemId } = useFormField()\n\n  return (\n    <label\n      ref={ref}\n      className={cn(\n        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        className\n      )}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <div\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}","size_bytes":4000},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":822},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\nconst SelectGroup = SelectPrimitive.Group\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5611},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}","size_bytes":4837},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}","size_bytes":771},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\nconst Tooltip = TooltipPrimitive.Root\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","size_bytes":1141},"client/src/components/users/ActivityMonitor.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Button from '@/components/Button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Icon from '@/components/AppIcon';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n}\n\ninterface ActivityEntry {\n  id: string;\n  userId: string;\n  userName: string;\n  userRole: string;\n  type: string;\n  action: string;\n  target?: string;\n  timestamp: string;\n  ipAddress: string;\n  userAgent: string;\n  location: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface ActivityMonitorProps {\n  onClose: () => void;\n  users: User[];\n}\n\nexport default function ActivityMonitor({\n  onClose,\n  users\n}: ActivityMonitorProps) {\n  const [activities, setActivities] = useState<ActivityEntry[]>([]);\n  const [filteredActivities, setFilteredActivities] = useState<ActivityEntry[]>([]);\n  const [filters, setFilters] = useState({\n    user: 'all',\n    type: 'all',\n    severity: 'all',\n    timeRange: 'today'\n  });\n  const [isLive, setIsLive] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // Mock activity data\n  const mockActivities: ActivityEntry[] = [\n    {\n      id: '1',\n      userId: '1',\n      userName: 'João Silva Santos',\n      userRole: 'admin',\n      type: 'authentication',\n      action: 'Login realizado com sucesso',\n      timestamp: new Date().toISOString(),\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'low'\n    },\n    {\n      id: '2',\n      userId: '2',\n      userName: 'Maria Santos Oliveira',\n      userRole: 'operator',\n      type: 'ticket',\n      action: 'Ticket #1234 foi resolvido',\n      target: 'Ticket #1234',\n      timestamp: new Date(Date.now() - 300000).toISOString(),\n      ipAddress: '192.168.1.101',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'medium'\n    },\n    {\n      id: '3',\n      userId: '1',\n      userName: 'João Silva Santos',\n      userRole: 'admin',\n      type: 'user_management',\n      action: 'Novo usuário criado: Carlos Lima',\n      target: 'Carlos Lima',\n      timestamp: new Date(Date.now() - 600000).toISOString(),\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'high'\n    },\n    {\n      id: '4',\n      userId: '3',\n      userName: 'Carlos Eduardo Lima',\n      userRole: 'user',\n      type: 'authentication',\n      action: 'Tentativa de login falhada (senha incorreta)',\n      timestamp: new Date(Date.now() - 900000).toISOString(),\n      ipAddress: '192.168.1.102',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'Rio de Janeiro, RJ',\n      severity: 'critical'\n    },\n    {\n      id: '5',\n      userId: '2',\n      userName: 'Maria Santos Oliveira',\n      userRole: 'operator',\n      type: 'settings',\n      action: 'Configurações de perfil atualizadas',\n      timestamp: new Date(Date.now() - 1200000).toISOString(),\n      ipAddress: '192.168.1.101',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      location: 'São Paulo, SP',\n      severity: 'low'\n    }\n  ];\n\n  useEffect(() => {\n    setActivities(mockActivities);\n    setFilteredActivities(mockActivities);\n  }, []);\n\n  // Auto refresh simulation\n  useEffect(() => {\n    if (!autoRefresh || !isLive) return;\n\n    const interval = setInterval(() => {\n      // Simulate new activity\n      const newActivity: ActivityEntry = {\n        id: Date.now().toString(),\n        userId: users[Math.floor(Math.random() * users.length)].id,\n        userName: users[Math.floor(Math.random() * users.length)].name,\n        userRole: users[Math.floor(Math.random() * users.length)].role,\n        type: ['authentication', 'ticket', 'settings', 'user_management'][Math.floor(Math.random() * 4)],\n        action: 'Nova atividade simulada',\n        timestamp: new Date().toISOString(),\n        ipAddress: `192.168.1.${Math.floor(Math.random() * 255)}`,\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n        location: ['São Paulo, SP', 'Rio de Janeiro, RJ', 'Belo Horizonte, MG'][Math.floor(Math.random() * 3)],\n        severity: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as 'low' | 'medium' | 'high'\n      };\n\n      setActivities(prev => [newActivity, ...prev.slice(0, 49)]); // Keep only 50 most recent\n    }, 10000); // Every 10 seconds\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, isLive, users]);\n\n  // Apply filters\n  useEffect(() => {\n    let filtered = [...activities];\n\n    if (filters.user) {\n      filtered = filtered.filter(activity => activity.userId === filters.user);\n    }\n\n    if (filters.type) {\n      filtered = filtered.filter(activity => activity.type === filters.type);\n    }\n\n    if (filters.severity) {\n      filtered = filtered.filter(activity => activity.severity === filters.severity);\n    }\n\n    const now = new Date();\n    const timeRangeFilter = (activity: ActivityEntry) => {\n      const activityTime = new Date(activity.timestamp);\n      const diffInMs = now.getTime() - activityTime.getTime();\n      \n      switch (filters.timeRange) {\n        case 'today':\n          return diffInMs <= 24 * 60 * 60 * 1000;\n        case 'week':\n          return diffInMs <= 7 * 24 * 60 * 60 * 1000;\n        case 'month':\n          return diffInMs <= 30 * 24 * 60 * 60 * 1000;\n        default:\n          return true;\n      }\n    };\n\n    filtered = filtered.filter(timeRangeFilter);\n    setFilteredActivities(filtered);\n  }, [activities, filters]);\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Agora mesmo';\n    if (diffInMinutes < 60) return `${diffInMinutes} min atrás`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h atrás`;\n    \n    return date.toLocaleString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'authentication': return 'LogIn';\n      case 'ticket': return 'Ticket';\n      case 'user_management': return 'Users';\n      case 'settings': return 'Settings';\n      default: return 'Activity';\n    }\n  };\n\n  const getActivityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'text-red-600 bg-red-50 dark:bg-red-900/20';\n      case 'high': return 'text-orange-600 bg-orange-50 dark:bg-orange-900/20';\n      case 'medium': return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20';\n      case 'low': return 'text-green-600 bg-green-50 dark:bg-green-900/20';\n      default: return 'text-slate-600 bg-slate-50 dark:bg-slate-700';\n    }\n  };\n\n  const getSeverityLabel = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'Crítica';\n      case 'high': return 'Alta';\n      case 'medium': return 'Média';\n      case 'low': return 'Baixa';\n      default: return severity;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'authentication': return 'Autenticação';\n      case 'ticket': return 'Tickets';\n      case 'user_management': return 'Usuários';\n      case 'settings': return 'Configurações';\n      default: return type;\n    }\n  };\n\n  const exportActivities = () => {\n    const csv = [\n      ['Timestamp', 'Usuário', 'Função', 'Tipo', 'Ação', 'Severidade', 'IP', 'Localização'].join(','),\n      ...filteredActivities.map(activity => [\n        activity.timestamp,\n        activity.userName,\n        activity.userRole,\n        getTypeLabel(activity.type),\n        activity.action,\n        getSeverityLabel(activity.severity),\n        activity.ipAddress,\n        activity.location\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `atividades-usuarios-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white dark:bg-slate-800 rounded-lg shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center justify-center w-10 h-10 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n              <Icon name=\"Activity\" size={20} className=\"text-blue-600 dark:text-blue-400\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">\n                Monitor de Atividade dos Usuários\n              </h2>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Acompanhe em tempo real as ações realizadas pelos usuários\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full ${isLive ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`}></div>\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {isLive ? 'Ao Vivo' : 'Pausado'}\n              </span>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsLive(!isLive)}\n              iconName={isLive ? \"Pause\" : \"Play\"}\n            />\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportActivities}\n              iconName=\"Download\"\n            />\n            \n            <Button\n              variant=\"ghost\"\n              onClick={onClose}\n              iconName=\"X\"\n            />\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"p-4 border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <Select value={filters.user} onValueChange={(value) => setFilters({...filters, user: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os usuários\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os usuários</SelectItem>\n                  {users.map(user => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Select value={filters.type} onValueChange={(value) => setFilters({...filters, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os tipos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os tipos</SelectItem>\n                  <SelectItem value=\"authentication\">Autenticação</SelectItem>\n                  <SelectItem value=\"ticket\">Tickets</SelectItem>\n                  <SelectItem value=\"user_management\">Usuários</SelectItem>\n                  <SelectItem value=\"settings\">Configurações</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Select value={filters.severity} onValueChange={(value) => setFilters({...filters, severity: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas severidades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas severidades</SelectItem>\n                  <SelectItem value=\"critical\">Crítica</SelectItem>\n                  <SelectItem value=\"high\">Alta</SelectItem>\n                  <SelectItem value=\"medium\">Média</SelectItem>\n                  <SelectItem value=\"low\">Baixa</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Select value={filters.timeRange} onValueChange={(value) => setFilters({...filters, timeRange: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"today\">Hoje</SelectItem>\n                  <SelectItem value=\"week\">Esta semana</SelectItem>\n                  <SelectItem value=\"month\">Este mês</SelectItem>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAutoRefresh(!autoRefresh)}\n                iconName={autoRefresh ? \"Pause\" : \"Play\"}\n                className=\"flex-1\"\n              >\n                {autoRefresh ? 'Pausar' : 'Iniciar'}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Activity List */}\n        <div className=\"p-6 max-h-[calc(90vh-12rem)] overflow-y-auto\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n              Atividades Recentes ({filteredActivities.length})\n            </h3>\n            <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Atualizado {formatTimestamp(new Date().toISOString())}\n            </div>\n          </div>\n\n          {filteredActivities.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Icon name=\"Activity\" size={48} className=\"text-slate-400 dark:text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">\n                Nenhuma atividade encontrada\n              </h3>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                Não há atividades que correspondam aos filtros aplicados.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredActivities.map(activity => (\n                <div\n                  key={activity.id}\n                  className={`flex items-start space-x-4 p-4 rounded-lg border transition-all duration-200 ${getActivityColor(activity.severity)}`}\n                >\n                  <div className=\"flex-shrink-0 mt-1\">\n                    <Icon name={getActivityIcon(activity.type) as any} size={16} />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                          {activity.userName}\n                        </span>\n                        <span className=\"text-xs px-2 py-1 bg-white dark:bg-slate-800 rounded text-slate-600 dark:text-slate-400\">\n                          {activity.userRole}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-2 text-xs text-slate-600 dark:text-slate-400\">\n                        <span>{getSeverityLabel(activity.severity)}</span>\n                        <span>•</span>\n                        <span>{formatTimestamp(activity.timestamp)}</span>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-slate-800 dark:text-slate-200 mt-1\">\n                      {activity.action}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-slate-600 dark:text-slate-400\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"MapPin\" size={12} />\n                        <span>{activity.location}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"Globe\" size={12} />\n                        <span>{activity.ipAddress}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon name=\"Tag\" size={12} />\n                        <span>{getTypeLabel(activity.type)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17491},"client/src/components/NewSidebar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport Icon from './AppIcon';\nimport Button from './Button';\n\ninterface SidebarProps {\n  isOpen?: boolean;\n  onClose: () => void;\n  isCollapsed?: boolean;\n  onToggleCollapse: () => void;\n  onOpenTicketModal: () => void;\n}\n\nconst NewSidebar: React.FC<SidebarProps> = ({ \n  isOpen = false, \n  onClose, \n  isCollapsed = false, \n  onToggleCollapse,\n  onOpenTicketModal \n}) => {\n  const [location, setLocation] = useLocation();\n  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);\n  \n  const navigate = (path: string) => setLocation(path);\n\n  const navigationItems = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      path: '/',\n      icon: 'LayoutDashboard',\n      description: 'Visão geral e métricas'\n    },\n    {\n      id: 'tickets',\n      label: 'Tickets',\n      icon: 'Ticket',\n      description: 'Gerenciar tickets',\n      submenu: [\n        { label: 'Kanban Board', path: '/tickets', icon: 'Kanban' },\n        { label: 'Criar Ticket', action: 'modal', icon: 'Plus' }\n      ]\n    },\n    {\n      id: 'monitoring',\n      label: 'SLA Monitor',\n      path: '/sla',\n      icon: 'Clock',\n      description: 'Acompanhar performance'\n    },\n    {\n      id: 'reports',\n      label: 'Relatórios Avançados',\n      path: '/reports',\n      icon: 'BarChart3',\n      description: 'Análises e insights'\n    },\n    {\n      id: 'administration',\n      label: 'Administração',\n      icon: 'Settings',\n      description: 'Gerenciar sistema',\n      submenu: [\n        { label: 'Gerenciar Usuários', path: '/users', icon: 'Users' },\n        { label: 'Departamentos', path: '/departments', icon: 'Building2' },\n        { label: 'Categorias', path: '/categories', icon: 'FolderTree' },\n        { label: 'Formulários', path: '/forms', icon: 'FileText' },\n        { label: 'Campos Customizáveis', path: '/fields', icon: 'Settings2' },\n        { label: 'Sistema de Aprovações', path: '/approvals', icon: 'CheckCircle' },\n        { label: 'Configuração SLA', path: '/sla-config', icon: 'Clock' }\n      ]\n    }\n  ];\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    if (window.innerWidth < 1024) {\n      onClose();\n    }\n  };\n\n  const handleSubmenuToggle = (itemId: string) => {\n    if (isCollapsed) return;\n    setActiveSubmenu(activeSubmenu === itemId ? null : itemId);\n  };\n\n  const isActivePath = (path: string) => {\n    return location === path;\n  };\n\n  const isActiveParent = (item: any) => {\n    if (item?.path && isActivePath(item?.path)) return true;\n    if (item?.submenu) {\n      return item?.submenu?.some((subItem: any) => isActivePath(subItem?.path));\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    // Auto-expand active parent menu\n    const activeParentItem = navigationItems?.find(item => isActiveParent(item));\n    if (activeParentItem && activeParentItem?.submenu && !isCollapsed) {\n      setActiveSubmenu(activeParentItem?.id);\n    }\n  }, [location, isCollapsed]);\n\n  const sidebarWidth = isCollapsed ? 'w-16' : 'w-60';\n  const sidebarClasses = `\n    fixed top-16 left-0 h-full bg-card border-r border-border shadow-enterprise-lg z-30\n    transition-all duration-300 ease-in-out\n    ${sidebarWidth}\n    lg:translate-x-0\n    ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\n  `;\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-20 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Collapse Toggle Button - External */}\n      <button\n        onClick={onToggleCollapse}\n        className=\"fixed bg-white border border-gray-300 rounded-full p-2 shadow-lg hover:shadow-xl transition-all duration-300 z-50 hover:bg-gray-50\"\n        title={isCollapsed ? 'Expandir sidebar' : 'Recolher sidebar'}\n        style={{ \n          top: '5rem',\n          left: isCollapsed ? '4.5rem' : '15.5rem',\n          transform: 'translateX(-50%)'\n        }}\n      >\n        <Icon name={isCollapsed ? \"ChevronRight\" : \"ChevronLeft\"} size={16} />\n      </button>\n      \n      {/* Sidebar */}\n      <aside className={sidebarClasses}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className={`flex items-center border-b border-border ${isCollapsed ? 'justify-center p-2' : 'justify-between p-4'}`}>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-lg\">\n                <Icon name=\"Ticket\" size={20} color=\"white\" />\n              </div>\n              {!isCollapsed && (\n                <div>\n                  <h1 className=\"text-lg font-semibold text-foreground\">TicketFlow Pro</h1>\n                  <p className=\"text-xs text-muted-foreground\">Enterprise Edition</p>\n                </div>\n              )}\n            </div>\n\n            {/* Close Button (Mobile only when not collapsed) */}\n            {!isCollapsed && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"lg:hidden transition-enterprise\"\n              >\n                <Icon name=\"X\" size={16} />\n              </Button>\n            )}\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n            {navigationItems?.map((item) => (\n              <div key={item?.id}>\n                {/* Main Navigation Item */}\n                <div\n                  className={`\n                    group relative flex items-center rounded-lg transition-enterprise cursor-pointer\n                    ${isActiveParent(item) \n                      ? 'bg-primary text-primary-foreground' \n                      : 'text-foreground hover:bg-muted'\n                    }\n                    ${isCollapsed ? 'justify-center p-3' : 'p-3'}\n                  `}\n                  onClick={() => {\n                    if (item?.path) {\n                      handleNavigation(item?.path);\n                    } else if (item?.submenu) {\n                      handleSubmenuToggle(item?.id);\n                    }\n                  }}\n                >\n                  <div className={`flex items-center justify-center ${isCollapsed ? 'w-6 h-6' : ''}`}>\n                    <Icon \n                      name={item?.icon} \n                      size={isCollapsed ? 18 : 20} \n                      className={`\n                        ${isCollapsed ? '' : 'mr-3'} \n                        ${isActiveParent(item) ? 'text-primary-foreground' : ''}\n                      `}\n                    />\n                  </div>\n                  \n                  {!isCollapsed && (\n                    <>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{item?.label}</div>\n                        {item?.description && (\n                          <div className={`text-xs ${\n                            isActiveParent(item) ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                          }`}>\n                            {item?.description}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {item?.submenu && (\n                        <Icon \n                          name={activeSubmenu === item?.id ? \"ChevronDown\" : \"ChevronRight\"} \n                          size={16}\n                          className={`transition-transform ${\n                            isActiveParent(item) ? 'text-primary-foreground' : ''\n                          }`}\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {/* Tooltip for Collapsed State */}\n                  {isCollapsed && (\n                    <div className=\"absolute left-full ml-3 px-3 py-2 bg-gray-900 text-white rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 min-w-48\">\n                      <div className=\"text-sm font-medium mb-1\">{item?.label}</div>\n                      {item?.description && (\n                        <div className=\"text-xs opacity-80 mb-2\">{item?.description}</div>\n                      )}\n                      {/* Submenu items em tooltip */}\n                      {item?.submenu && (\n                        <div className=\"space-y-1 border-t border-gray-700 pt-2\">\n                          {item?.submenu?.map((subItem: any) => (\n                            <div \n                              key={subItem?.path || subItem?.action} \n                              className=\"text-xs opacity-80 cursor-pointer hover:opacity-100 p-1 rounded hover:bg-gray-800\"\n                              onClick={() => {\n                                if (subItem?.action === 'modal') {\n                                  onOpenTicketModal();\n                                } else {\n                                  handleNavigation(subItem?.path);\n                                }\n                              }}\n                            >\n                              {subItem?.label}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Submenu */}\n                {item?.submenu && !isCollapsed && activeSubmenu === item?.id && (\n                  <div className=\"ml-6 mt-2 space-y-1 border-l-2 border-border pl-4\">\n                    {item?.submenu?.map((subItem: any) => (\n                      <div\n                        key={subItem?.path || subItem?.action}\n                        className={`\n                          flex items-center p-2 rounded-md text-sm transition-enterprise cursor-pointer\n                          ${isActivePath(subItem?.path)\n                            ? 'bg-primary/10 text-primary font-medium' \n                            : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                          }\n                        `}\n                        onClick={() => {\n                          if (subItem?.action === 'modal') {\n                            onOpenTicketModal();\n                          } else {\n                            handleNavigation(subItem?.path);\n                          }\n                        }}\n                      >\n                        <Icon name={subItem?.icon} size={16} className=\"mr-3\" />\n                        {subItem?.label}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </nav>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border\">\n            {!isCollapsed ? (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"HelpCircle\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  className=\"w-full justify-start transition-enterprise\"\n                >\n                  Ajuda & Suporte\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"LogOut\"\n                  iconPosition=\"left\"\n                  iconSize={16}\n                  className=\"w-full justify-start text-error hover:text-error hover:bg-error/10 transition-enterprise\"\n                  onClick={() => handleNavigation('/login')}\n                >\n                  Sair\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-full transition-enterprise group relative\"\n                >\n                  <Icon name=\"HelpCircle\" size={16} />\n                  <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                    Ajuda & Suporte\n                  </div>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-full text-error hover:text-error hover:bg-error/10 transition-enterprise group relative\"\n                  onClick={() => handleNavigation('/login')}\n                >\n                  <Icon name=\"LogOut\" size={16} />\n                  <div className=\"absolute left-full ml-2 px-2 py-1 bg-popover border border-border rounded-md shadow-enterprise-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n                    Sair\n                  </div>\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n};\n\nexport default NewSidebar;","size_bytes":13125},"client/src/components/tickets/AssignmentControls.tsx":{"content":"import React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport Icon from '@/components/AppIcon';\n\ninterface Operator {\n  id: string;\n  name: string;\n  department: string;\n  specialties: string[];\n  currentTickets: number;\n  status: 'online' | 'busy' | 'offline';\n  serviceDeskId: string;\n}\n\ninterface ServiceDesk {\n  id: string;\n  name: string;\n  activeOperators: number;\n  defaultSla: number;\n}\n\ninterface AssignmentControlsProps {\n  formData: any;\n  onFormChange: (field: string, value: any) => void;\n  errors: any;\n  operators: Operator[];\n  serviceDesks: ServiceDesk[];\n  userRole: string;\n}\n\nexport default function AssignmentControls({\n  formData,\n  onFormChange,\n  errors,\n  operators,\n  serviceDesks,\n  userRole\n}: AssignmentControlsProps) {\n  const handleInputChange = (field: string, value: any) => {\n    onFormChange(field, value);\n  };\n\n  const filteredOperators = formData?.serviceDesk ? \n    operators?.filter(op => op?.serviceDeskId === formData?.serviceDesk) : [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'text-green-600';\n      case 'busy': return 'text-yellow-600';\n      case 'offline': return 'text-red-600';\n      default: return 'text-slate-500';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'online': return 'CheckCircle';\n      case 'busy': return 'Clock';\n      case 'offline': return 'XCircle';\n      default: return 'Circle';\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg\">\n          <Icon name=\"Users\" size={20} className=\"text-indigo-600 dark:text-indigo-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Atribuição e Roteamento\n          </h2>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Configure como o chamado será distribuído e tratado\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {/* Service Desk Selection */}\n        <div>\n          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n            Mesa de Atendimento *\n          </label>\n          <Select \n            value={formData?.serviceDesk || ''} \n            onValueChange={(value) => {\n              handleInputChange('serviceDesk', value);\n              handleInputChange('assignedOperator', '');\n            }}\n          >\n            <SelectTrigger className={errors?.serviceDesk ? 'border-red-500' : ''}>\n              <SelectValue placeholder=\"Selecione a mesa de atendimento\" />\n            </SelectTrigger>\n            <SelectContent>\n              {serviceDesks?.map(desk => (\n                <SelectItem key={desk?.id} value={desk?.id}>\n                  <div className=\"flex items-center justify-between w-full\">\n                    <div>\n                      <div className=\"font-medium\">{desk?.name}</div>\n                      <div className=\"text-xs text-slate-500\">\n                        {desk?.activeOperators} operadores ativos • SLA padrão: {desk?.defaultSla}h\n                      </div>\n                    </div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors?.serviceDesk && (\n            <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n              {errors?.serviceDesk}\n            </p>\n          )}\n        </div>\n\n        {/* Assignment Options */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                Atribuição Automática\n              </label>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Sistema escolhe automaticamente o melhor operador disponível\n              </p>\n            </div>\n            <Switch\n              checked={formData?.autoAssign || false}\n              onCheckedChange={(checked) => {\n                handleInputChange('autoAssign', checked);\n                if (checked) {\n                  handleInputChange('assignedOperator', '');\n                }\n              }}\n            />\n          </div>\n\n          {/* Manual Assignment */}\n          {!formData?.autoAssign && (\n            <div>\n              <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2 block\">\n                Operador Específico\n              </label>\n              <Select \n                value={formData?.assignedOperator || ''} \n                onValueChange={(value) => handleInputChange('assignedOperator', value)}\n                disabled={!formData?.serviceDesk || formData?.autoAssign}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione um operador (opcional)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"auto\">\n                    <span className=\"text-slate-500\">Deixar para distribuição automática</span>\n                  </SelectItem>\n                  {filteredOperators?.map(operator => (\n                    <SelectItem key={operator?.id} value={operator?.id}>\n                      <div className=\"flex items-center space-x-3 w-full\">\n                        <Icon \n                          name={getStatusIcon(operator?.status) as any} \n                          size={12} \n                          className={getStatusColor(operator?.status)} \n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-medium\">{operator?.name}</span>\n                            <span className=\"text-xs text-slate-500\">\n                              {operator?.currentTickets} chamados\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-slate-500\">\n                            {operator?.department} • {operator?.specialties?.join(', ')}\n                          </div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n        </div>\n\n        {/* Advanced Options */}\n        <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n          <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-4\">\n            Configurações Avançadas\n          </h4>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                  Notificação por E-mail\n                </label>\n                <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                  Enviar e-mail para o solicitante quando o chamado for criado\n                </p>\n              </div>\n              <Switch\n                checked={formData?.emailNotification !== false}\n                onCheckedChange={(checked) => handleInputChange('emailNotification', checked)}\n              />\n            </div>\n\n            {userRole === 'admin' && (\n              <>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                      Chamado Interno\n                    </label>\n                    <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Marcar como chamado interno da equipe\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData?.internalTicket || false}\n                    onCheckedChange={(checked) => handleInputChange('internalTicket', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                      Pular Validações\n                    </label>\n                    <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Ignorar algumas validações automáticas do sistema\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData?.skipValidations || false}\n                    onCheckedChange={(checked) => handleInputChange('skipValidations', checked)}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Auto Assignment Preview */}\n        {formData?.autoAssign && formData?.serviceDesk && (\n          <div className=\"p-4 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg border border-indigo-200 dark:border-indigo-800\">\n            <div className=\"flex items-start space-x-3\">\n              <Icon name=\"Cpu\" size={16} className=\"text-indigo-600 dark:text-indigo-400 mt-0.5\" />\n              <div>\n                <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-1\">\n                  Critérios de Atribuição Automática\n                </h4>\n                <ul className=\"text-sm text-slate-600 dark:text-slate-400 space-y-1\">\n                  <li>• Especialidade do operador na categoria selecionada</li>\n                  <li>• Carga atual de trabalho (número de chamados em aberto)</li>\n                  <li>• Status de disponibilidade (online/ocupado)</li>\n                  <li>• Balanceamento de carga entre a equipe</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Operator Availability */}\n        {formData?.serviceDesk && !formData?.autoAssign && (\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-700 rounded-lg border border-slate-200 dark:border-slate-600\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <Icon name=\"Users\" size={16} className=\"text-slate-600 dark:text-slate-400\" />\n              <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                Status da Equipe\n              </h4>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                  {filteredOperators?.filter(op => op?.status === 'online')?.length}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Disponíveis</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-yellow-600 dark:text-yellow-400\">\n                  {filteredOperators?.filter(op => op?.status === 'busy')?.length}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Ocupados</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-slate-600 dark:text-slate-400\">\n                  {filteredOperators?.reduce((acc, op) => acc + op?.currentTickets, 0)}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Chamados Ativos</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-semibold text-blue-600 dark:text-blue-400\">\n                  {Math.round(filteredOperators?.reduce((acc, op) => acc + op?.currentTickets, 0) / Math.max(filteredOperators?.length, 1))}\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400\">Média por Operador</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12423},"client/src/components/users/FilterPanel.tsx":{"content":"import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface FilterPanelProps {\n  filters: {\n    status: string;\n    role: string;\n    department: string;\n    lastLogin: string;\n    search: string;\n  };\n  onFiltersChange: (filters: any) => void;\n  departments: Array<{\n    id: string;\n    name: string;\n    userCount: number;\n  }>;\n  roles: Array<{\n    id: string;\n    name: string;\n    description: string;\n  }>;\n  userStats: {\n    total: number;\n    active: number;\n    inactive: number;\n    admins: number;\n    operators: number;\n    regularUsers: number;\n  };\n}\n\nexport default function FilterPanel({\n  filters,\n  onFiltersChange,\n  departments,\n  roles,\n  userStats\n}: FilterPanelProps) {\n  const handleFilterChange = (key: string, value: string) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value\n    });\n  };\n\n  const clearFilters = () => {\n    onFiltersChange({\n      status: 'all',\n      role: 'all',\n      department: 'all',\n      lastLogin: 'all',\n      search: ''\n    });\n  };\n\n  const hasActiveFilters = Object.entries(filters).some(([key, value]) => \n    key === 'search' ? value !== '' : value !== 'all'\n  );\n\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n          Filtros\n        </h3>\n        {hasActiveFilters && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={clearFilters}\n            iconName=\"X\"\n            iconPosition=\"left\"\n          >\n            Limpar\n          </Button>\n        )}\n      </div>\n\n      {/* Search */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Buscar\n        </label>\n        <div className=\"relative\">\n          <Icon name=\"Search\" size={16} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Nome ou email...\"\n            value={filters.search}\n            onChange={(e) => handleFilterChange('search', e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Status Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Status\n        </label>\n        <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Todos os status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos os status</SelectItem>\n            <SelectItem value=\"active\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span>Ativo ({userStats.active})</span>\n              </div>\n            </SelectItem>\n            <SelectItem value=\"inactive\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                <span>Inativo ({userStats.inactive})</span>\n              </div>\n            </SelectItem>\n            <SelectItem value=\"pending\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                <span>Pendente</span>\n              </div>\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Role Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Função\n        </label>\n        <Select value={filters.role} onValueChange={(value) => handleFilterChange('role', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Todas as funções\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todas as funções</SelectItem>\n            {roles.map(role => (\n              <SelectItem key={role.id} value={role.id}>\n                <div>\n                  <div className=\"font-medium\">{role.name}</div>\n                  <div className=\"text-xs text-slate-500\">{role.description}</div>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Department Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Departamento\n        </label>\n        <Select value={filters.department} onValueChange={(value) => handleFilterChange('department', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Todos os departamentos\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos os departamentos</SelectItem>\n            {departments.map(dept => (\n              <SelectItem key={dept.id} value={dept.name}>\n                <div className=\"flex items-center justify-between w-full\">\n                  <span>{dept.name}</span>\n                  <span className=\"text-xs text-slate-500\">({dept.userCount})</span>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Last Login Filter */}\n      <div>\n        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n          Último Login\n        </label>\n        <Select value={filters.lastLogin} onValueChange={(value) => handleFilterChange('lastLogin', value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Qualquer período\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Qualquer período</SelectItem>\n            <SelectItem value=\"today\">Hoje</SelectItem>\n            <SelectItem value=\"week\">Esta semana</SelectItem>\n            <SelectItem value=\"month\">Este mês</SelectItem>\n            <SelectItem value=\"older\">Mais de 30 dias</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n        <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-3\">\n          Estatísticas Rápidas\n        </h4>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Users\" size={14} className=\"text-slate-500\" />\n              <span className=\"text-slate-600 dark:text-slate-400\">Total</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.total}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-slate-600 dark:text-slate-400\">Ativos</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.active}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Shield\" size={14} className=\"text-purple-500\" />\n              <span className=\"text-slate-600 dark:text-slate-400\">Admins</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.admins}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Headphones\" size={14} className=\"text-blue-500\" />\n              <span className=\"text-slate-600 dark:text-slate-400\">Operadores</span>\n            </div>\n            <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n              {userStats.operators}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Department Breakdown */}\n      <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n        <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-3\">\n          Por Departamento\n        </h4>\n        <div className=\"space-y-2\">\n          {departments.slice(0, 5).map(dept => (\n            <div key={dept.id} className=\"flex items-center justify-between text-sm\">\n              <span \n                className=\"text-slate-600 dark:text-slate-400 truncate cursor-pointer hover:text-slate-900 dark:hover:text-slate-100\"\n                onClick={() => handleFilterChange('department', dept.name)}\n              >\n                {dept.name}\n              </span>\n              <span className=\"font-medium text-slate-900 dark:text-slate-100\">\n                {dept.userCount}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Active Filters Summary */}\n      {hasActiveFilters && (\n        <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n          <h4 className=\"text-sm font-medium text-slate-900 dark:text-slate-100 mb-2\">\n            Filtros Ativos\n          </h4>\n          <div className=\"space-y-1\">\n            {filters.search && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Busca: \"{filters.search}\"\n              </div>\n            )}\n            {filters.status && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Status: {filters.status === 'active' ? 'Ativo' : filters.status === 'inactive' ? 'Inativo' : 'Pendente'}\n              </div>\n            )}\n            {filters.role && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Função: {roles.find(r => r.id === filters.role)?.name}\n              </div>\n            )}\n            {filters.department && (\n              <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Depto: {filters.department}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10737},"client/src/pages/UserManagement.tsx":{"content":"import React, { useState } from 'react';\nimport UserDataGrid from '@/components/users/UserDataGrid';\nimport UserDetailsPanel from '@/components/users/UserDetailsPanel';\nimport FilterPanel from '@/components/users/FilterPanel';\nimport BulkActionsPanel from '@/components/users/BulkActionsPanel';\nimport ActivityMonitor from '@/components/users/ActivityMonitor';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\n\nexport default function UserManagement() {\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\n  const [editingUser, setEditingUser] = useState<string | null>(null);\n  const [filters, setFilters] = useState({\n    status: '',\n    role: '',\n    department: '',\n    lastLogin: '',\n    search: ''\n  });\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [showActivityMonitor, setShowActivityMonitor] = useState(false);\n  const [showCreateUserModal, setShowCreateUserModal] = useState(false);\n  const [newUser, setNewUser] = useState({\n    name: '',\n    email: '',\n    role: '',\n    department: '',\n    phone: '',\n    extension: '',\n    location: '',\n    manager: ''\n  });\n\n  // Mock data\n  const users = [\n    {\n      id: '1',\n      name: 'João Silva Santos',\n      email: 'joao.silva@empresa.com',\n      role: 'admin',\n      status: 'active',\n      department: 'Tecnologia da Informação',\n      lastLogin: '2024-01-15T10:30:00Z',\n      createdAt: '2023-06-15T00:00:00Z',\n      avatar: null,\n      phone: '(11) 99999-9999',\n      extension: '1001',\n      location: 'São Paulo - SP',\n      manager: 'Maria Santos',\n      permissions: ['users.read', 'users.write', 'tickets.read', 'tickets.write', 'reports.read'],\n      ticketsAssigned: 12,\n      ticketsResolved: 145,\n      averageResolutionTime: '2.5 horas',\n      satisfactionRating: 4.7\n    },\n    {\n      id: '2',\n      name: 'Maria Santos Oliveira',\n      email: 'maria.santos@empresa.com',\n      role: 'operator',\n      status: 'active',\n      department: 'Suporte ao Cliente',\n      lastLogin: '2024-01-15T14:22:00Z',\n      createdAt: '2023-03-10T00:00:00Z',\n      avatar: null,\n      phone: '(11) 88888-8888',\n      extension: '1002',\n      location: 'São Paulo - SP',\n      manager: 'João Silva Santos',\n      permissions: ['tickets.read', 'tickets.write', 'knowledge.read'],\n      ticketsAssigned: 8,\n      ticketsResolved: 98,\n      averageResolutionTime: '3.1 horas',\n      satisfactionRating: 4.5\n    },\n    {\n      id: '3',\n      name: 'Carlos Eduardo Lima',\n      email: 'carlos.lima@empresa.com',\n      role: 'user',\n      status: 'inactive',\n      department: 'Recursos Humanos',\n      lastLogin: '2024-01-10T16:45:00Z',\n      createdAt: '2023-08-20T00:00:00Z',\n      avatar: null,\n      phone: '(11) 77777-7777',\n      extension: '1003',\n      location: 'Rio de Janeiro - RJ',\n      manager: 'Ana Costa',\n      permissions: ['tickets.create', 'profile.read'],\n      ticketsAssigned: 0,\n      ticketsResolved: 0,\n      averageResolutionTime: '-',\n      satisfactionRating: 0\n    },\n    {\n      id: '4',\n      name: 'Ana Costa Ferreira',\n      email: 'ana.costa@empresa.com',\n      role: 'manager',\n      status: 'active',\n      department: 'Recursos Humanos',\n      lastLogin: '2024-01-15T09:15:00Z',\n      createdAt: '2023-01-05T00:00:00Z',\n      avatar: null,\n      phone: '(11) 66666-6666',\n      extension: '1004',\n      location: 'Rio de Janeiro - RJ',\n      manager: null,\n      permissions: ['users.read', 'tickets.read', 'reports.read', 'reports.write'],\n      ticketsAssigned: 0,\n      ticketsResolved: 0,\n      averageResolutionTime: '-',\n      satisfactionRating: 0\n    }\n  ];\n\n  const departments = [\n    { id: '1', name: 'Tecnologia da Informação', userCount: 15 },\n    { id: '2', name: 'Suporte ao Cliente', userCount: 25 },\n    { id: '3', name: 'Recursos Humanos', userCount: 8 },\n    { id: '4', name: 'Financeiro', userCount: 12 },\n    { id: '5', name: 'Comercial', userCount: 18 }\n  ];\n\n  const roles = [\n    { id: 'admin', name: 'Administrador', description: 'Acesso completo ao sistema' },\n    { id: 'manager', name: 'Gerente', description: 'Gerenciamento de equipe e relatórios' },\n    { id: 'operator', name: 'Operador', description: 'Atendimento e resolução de chamados' },\n    { id: 'user', name: 'Usuário', description: 'Criação de chamados apenas' }\n  ];\n\n  const handleUserSelect = (userId: string) => {\n    setSelectedUser(userId);\n    setEditingUser(null);\n  };\n\n  const handleUserEdit = (userId: string) => {\n    setEditingUser(userId);\n    setSelectedUser(userId);\n  };\n\n  const handleUserMultiSelect = (userIds: string[]) => {\n    setSelectedUsers(userIds);\n    setShowBulkActions(userIds.length > 0);\n  };\n\n  const handleFilterChange = (newFilters: any) => {\n    setFilters(newFilters);\n  };\n\n  const handleBulkAction = (action: string, userIds: string[]) => {\n    console.log(`Bulk action: ${action} for users:`, userIds);\n    // Implementar ações em lote aqui\n    setSelectedUsers([]);\n    setShowBulkActions(false);\n  };\n\n  const handleCreateUser = () => {\n    setShowCreateUserModal(true);\n    setNewUser({\n      name: '',\n      email: '',\n      role: '',\n      department: '',\n      phone: '',\n      extension: '',\n      location: '',\n      manager: ''\n    });\n  };\n\n  const handleSaveUser = () => {\n    if (!newUser.name || !newUser.email || !newUser.role || !newUser.department) {\n      alert('Por favor, preencha todos os campos obrigatórios.');\n      return;\n    }\n\n    const newUserData = {\n      id: (users.length + 1).toString(),\n      name: newUser.name,\n      email: newUser.email,\n      role: newUser.role,\n      status: 'active',\n      department: newUser.department,\n      lastLogin: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      avatar: null,\n      phone: newUser.phone,\n      extension: newUser.extension,\n      location: newUser.location || 'São Paulo - SP',\n      manager: newUser.manager || null,\n      permissions: getDefaultPermissions(newUser.role),\n      ticketsAssigned: 0,\n      ticketsResolved: 0,\n      averageResolutionTime: '-',\n      satisfactionRating: 0\n    };\n\n    console.log('Novo usuário criado:', newUserData);\n    // Aqui você adicionaria a lógica para salvar no backend\n    \n    setShowCreateUserModal(false);\n    alert('Usuário criado com sucesso!');\n  };\n\n  const getDefaultPermissions = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return ['users.read', 'users.write', 'tickets.read', 'tickets.write', 'reports.read', 'reports.write'];\n      case 'manager':\n        return ['users.read', 'tickets.read', 'tickets.write', 'reports.read', 'reports.write'];\n      case 'operator':\n        return ['tickets.read', 'tickets.write', 'knowledge.read'];\n      case 'user':\n        return ['tickets.create', 'profile.read'];\n      default:\n        return ['profile.read'];\n    }\n  };\n\n  const handleImportUsers = () => {\n    console.log('Import users from file');\n    // Implementar importação de usuários\n  };\n\n  const filteredUsers = users.filter(user => {\n    if (filters.search && !user.name.toLowerCase().includes(filters.search.toLowerCase()) && \n        !user.email.toLowerCase().includes(filters.search.toLowerCase())) {\n      return false;\n    }\n    if (filters.status && user.status !== filters.status) return false;\n    if (filters.role && user.role !== filters.role) return false;\n    if (filters.department && user.department !== filters.department) return false;\n    return true;\n  });\n\n  const stats = {\n    total: users.length,\n    active: users.filter(u => u.status === 'active').length,\n    inactive: users.filter(u => u.status === 'inactive').length,\n    admins: users.filter(u => u.role === 'admin').length,\n    operators: users.filter(u => u.role === 'operator').length,\n    regularUsers: users.filter(u => u.role === 'user').length\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n            Gerenciamento de Usuários\n          </h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Gerencie contas de usuário, permissões e atividades da equipe\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowActivityMonitor(!showActivityMonitor)}\n            iconName=\"Activity\"\n            iconPosition=\"left\"\n          >\n            Monitor\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={handleImportUsers}\n            iconName=\"Upload\"\n            iconPosition=\"left\"\n          >\n            Importar\n          </Button>\n          \n          <Button\n            onClick={handleCreateUser}\n            iconName=\"Plus\"\n            iconPosition=\"left\"\n          >\n            Novo Usuário\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n        <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"Users\" size={20} className=\"text-blue-600 dark:text-blue-400\" />\n            <div>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {stats.total}\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Total\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"CheckCircle\" size={20} className=\"text-green-600 dark:text-green-400\" />\n            <div>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {stats.active}\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Ativos\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"XCircle\" size={20} className=\"text-red-600 dark:text-red-400\" />\n            <div>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {stats.inactive}\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Inativos\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"Shield\" size={20} className=\"text-purple-600 dark:text-purple-400\" />\n            <div>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {stats.admins}\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Admins\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"Headphones\" size={20} className=\"text-indigo-600 dark:text-indigo-400\" />\n            <div>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {stats.operators}\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Operadores\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"User\" size={20} className=\"text-slate-600 dark:text-slate-400\" />\n            <div>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {stats.regularUsers}\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Usuários\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Toolbar */}\n      <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant={showFilters ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setShowFilters(!showFilters)}\n              iconName=\"Filter\"\n              iconPosition=\"left\"\n            >\n              Filtros\n            </Button>\n            \n            <div className=\"w-px h-6 bg-slate-300 dark:bg-slate-600\"></div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant={viewMode === 'grid' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n                iconName=\"Grid3X3\"\n              />\n              <Button\n                variant={viewMode === 'list' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                iconName=\"List\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3 text-sm text-slate-600 dark:text-slate-400\">\n            <span>{filteredUsers.length} de {users.length} usuários</span>\n            {selectedUsers.length > 0 && (\n              <span className=\"text-blue-600 dark:text-blue-400\">\n                {selectedUsers.length} selecionado(s)\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Filters Panel */}\n        {showFilters && (\n          <div className=\"lg:col-span-1\">\n            <FilterPanel\n              filters={filters}\n              onFiltersChange={handleFilterChange}\n              departments={departments}\n              roles={roles}\n              userStats={stats}\n            />\n          </div>\n        )}\n        \n        {/* Main Content */}\n        <div className={`${showFilters ? 'lg:col-span-3' : 'lg:col-span-4'} space-y-6`}>\n          {/* Bulk Actions */}\n          {showBulkActions && (\n            <BulkActionsPanel\n              selectedUsers={selectedUsers}\n              onBulkAction={handleBulkAction}\n              onClear={() => {\n                setSelectedUsers([]);\n                setShowBulkActions(false);\n              }}\n            />\n          )}\n\n          {/* User Data Grid */}\n          <UserDataGrid\n            users={filteredUsers}\n            selectedUsers={selectedUsers}\n            onUserSelect={handleUserSelect}\n            onUserMultiSelect={handleUserMultiSelect}\n            onUserEdit={handleUserEdit}\n            viewMode={viewMode}\n            departments={departments}\n            roles={roles}\n          />\n        </div>\n      </div>\n\n      {/* User Details Panel */}\n      {selectedUser && (\n        <UserDetailsPanel\n          userId={selectedUser}\n          onClose={() => {\n            setSelectedUser(null);\n            setEditingUser(null);\n          }}\n          user={users.find(u => u.id === selectedUser)}\n          departments={departments}\n          roles={roles}\n          isEditing={editingUser === selectedUser}\n        />\n      )}\n\n      {/* Activity Monitor */}\n      {showActivityMonitor && (\n        <ActivityMonitor\n          onClose={() => setShowActivityMonitor(false)}\n          users={users}\n        />\n      )}\n\n      {/* Create User Modal */}\n      <Dialog open={showCreateUserModal} onOpenChange={setShowCreateUserModal}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Criar Novo Usuário</DialogTitle>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"name\" className=\"text-right\">\n                Nome *\n              </Label>\n              <Input\n                id=\"name\"\n                value={newUser.name}\n                onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}\n                className=\"col-span-3\"\n                placeholder=\"Nome completo\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"email\" className=\"text-right\">\n                Email *\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={newUser.email}\n                onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n                className=\"col-span-3\"\n                placeholder=\"usuario@empresa.com\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"role\" className=\"text-right\">\n                Função *\n              </Label>\n              <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })}>\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue placeholder=\"Selecione uma função\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {roles.map((role) => (\n                    <SelectItem key={role.id} value={role.id}>\n                      {role.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"department\" className=\"text-right\">\n                Departamento *\n              </Label>\n              <Select value={newUser.department} onValueChange={(value) => setNewUser({ ...newUser, department: value })}>\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue placeholder=\"Selecione um departamento\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {departments.map((dept) => (\n                    <SelectItem key={dept.id} value={dept.name}>\n                      {dept.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"phone\" className=\"text-right\">\n                Telefone\n              </Label>\n              <Input\n                id=\"phone\"\n                value={newUser.phone}\n                onChange={(e) => setNewUser({ ...newUser, phone: e.target.value })}\n                className=\"col-span-3\"\n                placeholder=\"(11) 99999-9999\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"extension\" className=\"text-right\">\n                Ramal\n              </Label>\n              <Input\n                id=\"extension\"\n                value={newUser.extension}\n                onChange={(e) => setNewUser({ ...newUser, extension: e.target.value })}\n                className=\"col-span-3\"\n                placeholder=\"1001\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"location\" className=\"text-right\">\n                Localização\n              </Label>\n              <Input\n                id=\"location\"\n                value={newUser.location}\n                onChange={(e) => setNewUser({ ...newUser, location: e.target.value })}\n                className=\"col-span-3\"\n                placeholder=\"São Paulo - SP\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowCreateUserModal(false)}\n            >\n              Cancelar\n            </Button>\n            <Button onClick={handleSaveUser}>\n              Criar Usuário\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21312},"client/src/components/users/UserDataGrid.tsx":{"content":"import React from 'react';\nimport UserCard from '@/components/users/UserCard';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport Button from '@/components/Button';\nimport Icon from '@/components/AppIcon';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n  createdAt: string;\n  avatar?: string | null;\n  phone?: string;\n  extension?: string;\n  location?: string;\n  manager?: string | null;\n  permissions?: string[];\n  ticketsAssigned?: number;\n  ticketsResolved?: number;\n  averageResolutionTime?: string;\n  satisfactionRating?: number;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  userCount: number;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface UserDataGridProps {\n  users: User[];\n  selectedUsers: string[];\n  onUserSelect: (userId: string) => void;\n  onUserMultiSelect: (userIds: string[]) => void;\n  onUserEdit: (userId: string) => void;\n  viewMode: 'grid' | 'list';\n  departments: Department[];\n  roles: Role[];\n}\n\nexport default function UserDataGrid({\n  users,\n  selectedUsers,\n  onUserSelect,\n  onUserMultiSelect,\n  onUserEdit,\n  viewMode,\n  departments,\n  roles\n}: UserDataGridProps) {\n  const handleSelectAll = () => {\n    if (selectedUsers.length === users.length) {\n      onUserMultiSelect([]);\n    } else {\n      onUserMultiSelect(users.map(u => u.id));\n    }\n  };\n\n  const handleUserCheck = (userId: string) => {\n    const newSelection = selectedUsers.includes(userId)\n      ? selectedUsers.filter(id => id !== userId)\n      : [...selectedUsers, userId];\n    onUserMultiSelect(newSelection);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getRoleName = (roleId: string) => {\n    return roles.find(r => r.id === roleId)?.name || roleId;\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';\n      case 'manager': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'operator': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'user': return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'inactive': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  if (users.length === 0) {\n    return (\n      <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-12 text-center\">\n        <Icon name=\"Users\" size={48} className=\"text-slate-400 dark:text-slate-600 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2\">\n          Nenhum usuário encontrado\n        </h3>\n        <p className=\"text-slate-600 dark:text-slate-400 mb-6\">\n          Não há usuários que correspondam aos filtros aplicados.\n        </p>\n        <Button iconName=\"Plus\" iconPosition=\"left\">\n          Criar Primeiro Usuário\n        </Button>\n      </div>\n    );\n  }\n\n  if (viewMode === 'grid') {\n    return (\n      <div className=\"space-y-4\">\n        {/* Selection Header */}\n        {users.length > 0 && (\n          <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Checkbox\n                checked={selectedUsers.length === users.length && users.length > 0}\n                onCheckedChange={handleSelectAll}\n              />\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {selectedUsers.length > 0 \n                  ? `${selectedUsers.length} de ${users.length} selecionado(s)`\n                  : `Selecionar todos (${users.length})`\n                }\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* User Cards Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {users.map(user => (\n            <UserCard\n              key={user.id}\n              user={user}\n              isSelected={selectedUsers.includes(user.id)}\n              onSelect={() => onUserSelect(user.id)}\n              onCheck={() => handleUserCheck(user.id)}\n              departments={departments}\n              roles={roles}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // List View\n  return (\n    <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 overflow-hidden\">\n      {/* Table Header */}\n      <div className=\"border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700\">\n        <div className=\"grid grid-cols-12 gap-4 p-4 text-sm font-medium text-slate-900 dark:text-slate-100\">\n          <div className=\"col-span-1 flex items-center\">\n            <Checkbox\n              checked={selectedUsers.length === users.length && users.length > 0}\n              onCheckedChange={handleSelectAll}\n            />\n          </div>\n          <div className=\"col-span-3\">Usuário</div>\n          <div className=\"col-span-2\">Função</div>\n          <div className=\"col-span-2\">Departamento</div>\n          <div className=\"col-span-1\">Status</div>\n          <div className=\"col-span-2\">Último Login</div>\n          <div className=\"col-span-1\">Ações</div>\n        </div>\n      </div>\n\n      {/* Table Body */}\n      <div className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n        {users.map(user => (\n          <div\n            key={user.id}\n            className={`grid grid-cols-12 gap-4 p-4 hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors ${\n              selectedUsers.includes(user.id) ? 'bg-blue-50 dark:bg-blue-900/10' : ''\n            }`}\n          >\n            <div className=\"col-span-1 flex items-center\">\n              <Checkbox\n                checked={selectedUsers.includes(user.id)}\n                onCheckedChange={() => handleUserCheck(user.id)}\n              />\n            </div>\n            \n            <div className=\"col-span-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-shrink-0\">\n                  {user.avatar ? (\n                    <img\n                      src={user.avatar}\n                      alt={user.name}\n                      className=\"w-10 h-10 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-10 h-10 bg-slate-100 dark:bg-slate-700 rounded-full flex items-center justify-center\">\n                      <Icon name=\"User\" size={16} className=\"text-slate-500 dark:text-slate-400\" />\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <button\n                    onClick={() => onUserSelect(user.id)}\n                    className=\"text-sm font-medium text-slate-900 dark:text-slate-100 hover:text-blue-600 dark:hover:text-blue-400 text-left\"\n                  >\n                    {user.name}\n                  </button>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"col-span-2 flex items-center\">\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>\n                {getRoleName(user.role)}\n              </span>\n            </div>\n            \n            <div className=\"col-span-2 flex items-center\">\n              <span className=\"text-sm text-slate-900 dark:text-slate-100\">\n                {user.department}\n              </span>\n            </div>\n            \n            <div className=\"col-span-1 flex items-center\">\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(user.status)}`}>\n                {getStatusLabel(user.status)}\n              </span>\n            </div>\n            \n            <div className=\"col-span-2 flex items-center\">\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                {formatDate(user.lastLogin)}\n              </span>\n            </div>\n            \n            <div className=\"col-span-1 flex items-center space-x-1\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => onUserSelect(user.id)}\n                iconName=\"Eye\"\n                title=\"Visualizar usuário\"\n              />\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => onUserEdit(user.id)}\n                iconName=\"Edit\"\n                title=\"Editar usuário\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Table Footer */}\n      <div className=\"border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700 p-4\">\n        <div className=\"flex items-center justify-between text-sm text-slate-600 dark:text-slate-400\">\n          <span>\n            {selectedUsers.length > 0 && `${selectedUsers.length} selecionado(s) • `}\n            Mostrando {users.length} usuário(s)\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            <Button size=\"sm\" variant=\"outline\" disabled iconName=\"ChevronLeft\">\n              Anterior\n            </Button>\n            <span className=\"px-3 py-1 text-xs\">Página 1 de 1</span>\n            <Button size=\"sm\" variant=\"outline\" disabled iconName=\"ChevronRight\">\n              Próxima\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10654},"client/src/components/users/UserDetailsPanel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Calendar, \n  Shield, \n  Activity, \n  BarChart3, \n  Clock, \n  CheckCircle, \n  Star, \n  Edit, \n  Save, \n  X, \n  Settings,\n  Award,\n  Target,\n  TrendingUp,\n  Users,\n  Ticket\n} from 'lucide-react';\n\ninterface UserType {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  department: string;\n  lastLogin: string;\n  createdAt: string;\n  avatar?: string | null;\n  phone?: string;\n  extension?: string;\n  location?: string;\n  manager?: string | null;\n  permissions?: string[];\n  ticketsAssigned?: number;\n  ticketsResolved?: number;\n  averageResolutionTime?: string;\n  satisfactionRating?: number;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n  userCount: number;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface UserDetailsPanelProps {\n  userId: string;\n  onClose: () => void;\n  user?: UserType;\n  departments: Department[];\n  roles: Role[];\n  isEditing?: boolean;\n}\n\nexport default function UserDetailsPanel({\n  userId,\n  onClose,\n  user,\n  departments,\n  roles,\n  isEditing: initialIsEditing = false\n}: UserDetailsPanelProps) {\n  const [isEditing, setIsEditing] = useState(initialIsEditing);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n    extension: user?.extension || '',\n    role: user?.role || '',\n    department: user?.department || '',\n    status: user?.status || 'active',\n    location: user?.location || '',\n    manager: user?.manager || ''\n  });\n\n  useEffect(() => {\n    setIsEditing(initialIsEditing);\n  }, [initialIsEditing]);\n\n  if (!user) {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <User className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Usuário não encontrado</h3>\n            <p className=\"text-slate-600 dark:text-slate-400 mb-6\">\n              O usuário selecionado não pôde ser carregado.\n            </p>\n            <Button onClick={onClose} className=\"w-full\">Fechar</Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleSave = () => {\n    console.log('Saving user data:', formData);\n    setIsEditing(false);\n    // TODO: Implementar salvamento real\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n      extension: user?.extension || '',\n      role: user?.role || '',\n      department: user?.department || '',\n      status: user?.status || 'active',\n      location: user?.location || '',\n      manager: user?.manager || ''\n    });\n    setIsEditing(false);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getRoleName = (roleId: string) => {\n    switch (roleId) {\n      case 'admin': return 'Administrador';\n      case 'manager': return 'Gerente';\n      case 'operator': return 'Operador';\n      case 'user': return 'Usuário';\n      default: return roleId;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'inactive': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';\n      case 'manager': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'operator': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'user': return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n      default: return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  // Mock performance data\n  const performanceData = [\n    { month: 'Jan', tickets: 45, satisfaction: 4.5 },\n    { month: 'Fev', tickets: 52, satisfaction: 4.7 },\n    { month: 'Mar', tickets: 48, satisfaction: 4.6 },\n    { month: 'Abr', tickets: 61, satisfaction: 4.8 },\n    { month: 'Mai', tickets: 55, satisfaction: 4.7 },\n    { month: 'Jun', tickets: 67, satisfaction: 4.9 }\n  ];\n\n  const weeklyActivity = [\n    { day: 'Seg', hours: 8.5 },\n    { day: 'Ter', hours: 7.2 },\n    { day: 'Qua', hours: 8.8 },\n    { day: 'Qui', hours: 6.5 },\n    { day: 'Sex', hours: 8.0 },\n    { day: 'Sáb', hours: 2.5 },\n    { day: 'Dom', hours: 0 }\n  ];\n\n  const recentActivity = [\n    { \n      id: '1', \n      type: 'ticket_resolved', \n      icon: CheckCircle,\n      title: 'Ticket #1234 resolvido', \n      description: 'Problema de rede solucionado com sucesso', \n      timestamp: '2024-01-15T14:30:00Z',\n      color: 'text-green-600'\n    },\n    { \n      id: '2', \n      type: 'login', \n      icon: Activity,\n      title: 'Login realizado', \n      description: 'Acesso ao sistema às 09:00', \n      timestamp: '2024-01-15T09:00:00Z',\n      color: 'text-blue-600'\n    },\n    { \n      id: '3', \n      type: 'ticket_assigned', \n      icon: Users,\n      title: 'Novo ticket atribuído', \n      description: 'Ticket #1235 - Solicitação de acesso', \n      timestamp: '2024-01-14T16:45:00Z',\n      color: 'text-orange-600'\n    },\n    { \n      id: '4', \n      type: 'profile_updated', \n      icon: Settings,\n      title: 'Perfil atualizado', \n      description: 'Informações de contato modificadas', \n      timestamp: '2024-01-14T11:20:00Z',\n      color: 'text-purple-600'\n    }\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-2xl w-full max-w-6xl max-h-[95vh] overflow-hidden\">\n        {/* Header com Gradiente */}\n        <div className=\"relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                {user.avatar ? (\n                  <img\n                    src={user.avatar}\n                    alt={user.name}\n                    className=\"w-20 h-20 rounded-full object-cover border-4 border-white/20\"\n                  />\n                ) : (\n                  <div className=\"w-20 h-20 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white text-2xl font-bold border-4 border-white/20\">\n                    {getInitials(user.name)}\n                  </div>\n                )}\n                <div className={`absolute -bottom-1 -right-1 w-6 h-6 rounded-full border-4 border-white ${\n                  user.status === 'active' ? 'bg-green-500' : \n                  user.status === 'inactive' ? 'bg-red-500' : 'bg-yellow-500'\n                }`}></div>\n              </div>\n              \n              <div className=\"text-white\">\n                <h1 className=\"text-3xl font-bold\">{user.name}</h1>\n                <div className=\"flex items-center space-x-4 mt-2\">\n                  <Badge className={`${getRoleColor(user.role)} text-sm font-medium`}>\n                    <Shield className=\"w-3 h-3 mr-1\" />\n                    {getRoleName(user.role)}\n                  </Badge>\n                  <Badge className={`${getStatusColor(user.status)} text-sm font-medium`}>\n                    {getStatusLabel(user.status)}\n                  </Badge>\n                </div>\n                <p className=\"text-white/80 mt-1 flex items-center\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {user.email}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              {!isEditing ? (\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setIsEditing(true)}\n                  className=\"bg-white/20 border-white/30 text-white hover:bg-white/30\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Editar\n                </Button>\n              ) : (\n                <>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={handleCancel}\n                    className=\"bg-white/20 border-white/30 text-white hover:bg-white/30\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Cancelar\n                  </Button>\n                  <Button\n                    onClick={handleSave}\n                    className=\"bg-green-600 hover:bg-green-700 text-white border-0\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Salvar\n                  </Button>\n                </>\n              )}\n              \n              <Button\n                variant=\"ghost\"\n                onClick={onClose}\n                className=\"text-white hover:bg-white/20\"\n                size=\"sm\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"max-h-[calc(95vh-8rem)] overflow-y-auto\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800/50\">\n              <TabsList className=\"grid w-full grid-cols-4 bg-transparent\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Informações\n                </TabsTrigger>\n                <TabsTrigger value=\"performance\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Performance\n                </TabsTrigger>\n                <TabsTrigger value=\"activity\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  Atividade\n                </TabsTrigger>\n                <TabsTrigger value=\"permissions\" className=\"data-[state=active]:bg-white dark:data-[state=active]:bg-slate-800\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Permissões\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <div className=\"p-6\">\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                {/* Estatísticas Rápidas */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                          <Ticket className=\"w-5 h-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.ticketsAssigned || 0}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Tickets Ativos</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.ticketsResolved || 0}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Resolvidos</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center\">\n                          <Clock className=\"w-5 h-5 text-orange-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.averageResolutionTime || '0h'}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Tempo Médio</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg flex items-center justify-center\">\n                          <Star className=\"w-5 h-5 text-yellow-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold\">{user.satisfactionRating || '0.0'}</p>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Satisfação</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Informações Pessoais e Profissionais */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <User className=\"w-5 h-5\" />\n                        <span>Informações Pessoais</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Nome Completo\n                        </label>\n                        {isEditing ? (\n                          <Input\n                            value={formData.name}\n                            onChange={(e) => setFormData({...formData, name: e.target.value})}\n                          />\n                        ) : (\n                          <p className=\"text-slate-600 dark:text-slate-400\">{user.name}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Email\n                        </label>\n                        {isEditing ? (\n                          <Input\n                            type=\"email\"\n                            value={formData.email}\n                            onChange={(e) => setFormData({...formData, email: e.target.value})}\n                          />\n                        ) : (\n                          <p className=\"text-slate-600 dark:text-slate-400\">{user.email}</p>\n                        )}\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                            Telefone\n                          </label>\n                          {isEditing ? (\n                            <Input\n                              value={formData.phone}\n                              onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                            />\n                          ) : (\n                            <p className=\"text-slate-600 dark:text-slate-400\">{user.phone || 'Não informado'}</p>\n                          )}\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                            Ramal\n                          </label>\n                          {isEditing ? (\n                            <Input\n                              value={formData.extension}\n                              onChange={(e) => setFormData({...formData, extension: e.target.value})}\n                            />\n                          ) : (\n                            <p className=\"text-slate-600 dark:text-slate-400\">{user.extension || 'Não informado'}</p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Localização\n                        </label>\n                        {isEditing ? (\n                          <Input\n                            value={formData.location}\n                            onChange={(e) => setFormData({...formData, location: e.target.value})}\n                          />\n                        ) : (\n                          <div className=\"flex items-center text-slate-600 dark:text-slate-400\">\n                            <MapPin className=\"w-4 h-4 mr-2\" />\n                            {user.location || 'Não informado'}\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Shield className=\"w-5 h-5\" />\n                        <span>Informações Profissionais</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Função\n                        </label>\n                        {isEditing ? (\n                          <Select value={formData.role} onValueChange={(value) => setFormData({...formData, role: value})}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {roles.map(role => (\n                                <SelectItem key={role.id} value={role.id}>\n                                  {role.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <Badge className={`${getRoleColor(user.role)} text-sm`}>\n                            {getRoleName(user.role)}\n                          </Badge>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Departamento\n                        </label>\n                        {isEditing ? (\n                          <Select value={formData.department} onValueChange={(value) => setFormData({...formData, department: value})}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {departments.map(dept => (\n                                <SelectItem key={dept.id} value={dept.name}>\n                                  {dept.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <p className=\"text-slate-600 dark:text-slate-400\">{user.department}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Status\n                        </label>\n                        {isEditing ? (\n                          <Select value={formData.status} onValueChange={(value) => setFormData({...formData, status: value})}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"active\">Ativo</SelectItem>\n                              <SelectItem value=\"inactive\">Inativo</SelectItem>\n                              <SelectItem value=\"pending\">Pendente</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <Badge className={`${getStatusColor(user.status)} text-sm`}>\n                            {getStatusLabel(user.status)}\n                          </Badge>\n                        )}\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Gerente\n                        </label>\n                        <p className=\"text-slate-600 dark:text-slate-400\">{user.manager || 'Não informado'}</p>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Membro desde\n                        </label>\n                        <div className=\"flex items-center text-slate-600 dark:text-slate-400\">\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          {formatDate(user.createdAt)}\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-slate-900 dark:text-slate-100 block mb-2\">\n                          Último acesso\n                        </label>\n                        <div className=\"flex items-center text-slate-600 dark:text-slate-400\">\n                          <Activity className=\"w-4 h-4 mr-2\" />\n                          {formatDate(user.lastLogin)}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"performance\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <TrendingUp className=\"w-5 h-5\" />\n                        <span>Performance Mensal</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <LineChart data={performanceData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"month\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line type=\"monotone\" dataKey=\"tickets\" stroke=\"#3b82f6\" strokeWidth={2} />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-5 h-5\" />\n                        <span>Atividade Semanal</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={weeklyActivity}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"day\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"hours\" fill=\"#10b981\" radius={[4, 4, 0, 0]} />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Métricas de Performance */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                          <Target className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Meta Mensal</p>\n                          <p className=\"text-2xl font-bold\">85%</p>\n                          <p className=\"text-sm text-green-600\">+5% vs mês anterior</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                          <Award className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Qualidade</p>\n                          <p className=\"text-2xl font-bold\">4.8/5</p>\n                          <p className=\"text-sm text-green-600\">Excelente</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                          <Clock className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Eficiência</p>\n                          <p className=\"text-2xl font-bold\">92%</p>\n                          <p className=\"text-sm text-green-600\">Acima da média</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"activity\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Activity className=\"w-5 h-5\" />\n                      <span>Atividade Recente</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {recentActivity.map((activity) => {\n                        const IconComponent = activity.icon;\n                        return (\n                          <div key={activity.id} className=\"flex items-start space-x-4 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\n                            <div className={`w-10 h-10 rounded-full flex items-center justify-center bg-slate-100 dark:bg-slate-800`}>\n                              <IconComponent className={`w-5 h-5 ${activity.color}`} />\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">\n                                {activity.title}\n                              </h4>\n                              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                                {activity.description}\n                              </p>\n                              <p className=\"text-xs text-slate-500 dark:text-slate-500 mt-1\">\n                                {formatDate(activity.timestamp)}\n                              </p>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"permissions\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Shield className=\"w-5 h-5\" />\n                      <span>Permissões do Sistema</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Gerenciar Usuários</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Criar, editar e excluir usuários</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('users.write')} />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Visualizar Relatórios</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Acesso aos relatórios do sistema</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('reports.read')} />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Gerenciar Tickets</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Criar e editar tickets</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('tickets.write')} />\n                      </div>\n                      <Separator />\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Configurações do Sistema</h4>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Acesso às configurações administrativas</p>\n                        </div>\n                        <Switch checked={user.permissions?.includes('admin.settings')} />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":33659},"client/src/components/Header.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport Icon from './AppIcon';\nimport Button from './Button';\nimport SimpleTicketModal from './SimpleTicketModal';\n\ninterface HeaderProps {\n  onSidebarToggle: () => void;\n  isSidebarCollapsed?: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = ({ onSidebarToggle, isSidebarCollapsed = false }) => {\n  const [location, setLocation] = useLocation();\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  \n  const navigate = (path: string) => setLocation(path);\n\n  const primaryNavItems = [\n    { label: 'Dashboard', path: '/', icon: 'LayoutDashboard' },\n    { label: 'Tickets', path: '/tickets', icon: 'Ticket' },\n    { label: 'Criar Ticket', path: 'CREATE_MODAL', icon: 'Plus' },\n    { label: 'SLA Monitor', path: '/sla', icon: 'Clock' },\n  ];\n\n  const secondaryNavItems = [\n    { label: 'Gerenciar Usuários', path: '/users', icon: 'Users' },\n  ];\n\n  const handleNavigation = (path: string) => {\n    if (path === 'CREATE_MODAL') {\n      setIsCreateModalOpen(true);\n    } else {\n      navigate(path);\n    }\n    setIsMoreMenuOpen(false);\n  };\n\n  const isActivePath = (path: string) => {\n    if (path === 'CREATE_MODAL') return false;\n    return location === path;\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-40 bg-card border-b border-border shadow-enterprise\">\n      <div className=\"flex items-center justify-between h-16 px-4\">\n        {/* Left Section - Logo and Mobile Menu */}\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onSidebarToggle}\n            className=\"lg:hidden\"\n          >\n            <Icon name=\"Menu\" size={20} />\n          </Button>\n          \n          {/* Logo removido do header para evitar duplicação */}\n        </div>\n\n        {/* Center Section - Primary Navigation (Desktop) */}\n        <nav className=\"hidden lg:flex items-center space-x-1\">\n          {primaryNavItems?.map((item) => (\n            <Button\n              key={item?.path}\n              variant={isActivePath(item?.path) ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => handleNavigation(item?.path)}\n              iconName={item?.icon}\n              iconPosition=\"left\"\n              iconSize={16}\n              className=\"transition-enterprise\"\n            >\n              {item?.label}\n            </Button>\n          ))}\n        </nav>\n\n        {/* Right Section - More Menu and User Actions */}\n        <div className=\"flex items-center space-x-2\">\n          {/* More Menu */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMoreMenuOpen(!isMoreMenuOpen)}\n              iconName=\"MoreHorizontal\"\n              iconSize={16}\n              className=\"transition-enterprise\"\n            >\n              Mais\n            </Button>\n            \n            {isMoreMenuOpen && (\n              <div className=\"absolute right-0 top-full mt-2 w-48 bg-popover border border-border rounded-lg shadow-enterprise-lg z-50\">\n                <div className=\"py-2\">\n                  {secondaryNavItems?.map((item) => (\n                    <button\n                      key={item?.path}\n                      onClick={() => handleNavigation(item?.path)}\n                      className={`w-full flex items-center space-x-3 px-4 py-2 text-sm transition-enterprise hover:bg-muted ${\n                        isActivePath(item?.path) ? 'bg-muted text-primary' : 'text-foreground'\n                      }`}\n                    >\n                      <Icon name={item?.icon} size={16} />\n                      <span>{item?.label}</span>\n                    </button>\n                  ))}\n                  <div className=\"border-t border-border my-2\"></div>\n                  <button \n                    onClick={() => handleNavigation('/settings')}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-foreground hover:bg-muted transition-enterprise\"\n                  >\n                    <Icon name=\"Settings\" size={16} />\n                    <span>Configurações</span>\n                  </button>\n                  <button \n                    onClick={() => {\n                      window.open('https://docs.ticketflow.com', '_blank');\n                      setIsMoreMenuOpen(false);\n                    }}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-foreground hover:bg-muted transition-enterprise\"\n                  >\n                    <Icon name=\"HelpCircle\" size={16} />\n                    <span>Ajuda</span>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* User Profile */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleNavigation('/profile')}\n            iconName=\"User\"\n            iconSize={16}\n            className=\"transition-enterprise\"\n          >\n            Perfil\n          </Button>\n\n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"relative transition-enterprise\"\n          >\n            <Icon name=\"Bell\" size={18} />\n            <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-error rounded-full\"></span>\n          </Button>\n        </div>\n      </div>\n      \n      {/* Mobile Navigation Menu */}\n      <div className=\"lg:hidden border-t border-border bg-card\">\n        <nav className=\"flex overflow-x-auto px-4 py-2 space-x-1\">\n          {primaryNavItems?.map((item) => (\n            <Button\n              key={item?.path}\n              variant={isActivePath(item?.path) ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => handleNavigation(item?.path)}\n              iconName={item?.icon}\n              iconPosition=\"left\"\n              iconSize={14}\n              className=\"whitespace-nowrap transition-enterprise\"\n            >\n              {item?.label}\n            </Button>\n          ))}\n        </nav>\n      </div>\n      \n      {/* Overlay for More Menu */}\n      {isMoreMenuOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsMoreMenuOpen(false)}\n        />\n      )}\n      \n      {/* SimpleTicketModal */}\n      <SimpleTicketModal \n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n      />\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":6651},"client/src/pages/Categories.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { Plus, Edit2, Trash2, Clock, Target, Users } from 'lucide-react';\n\ninterface Category {\n  id: string;\n  name: string;\n  response_time: string;\n  resolution_time: string;\n  status: 'Ativo' | 'Inativo';\n  priority: 'Baixa' | 'Média' | 'Alta' | 'Planejado' | 'Não Pausar';\n  department: string;\n  subcategories?: Category[];\n}\n\nfunction Categories() {\n  const [categories, setCategories] = useState<Category[]>([\n    {\n      id: '1',\n      name: 'Custos',\n      response_time: '60:00',\n      resolution_time: '60:00',\n      status: 'Ativo',\n      priority: 'Média',\n      department: 'Custos'\n    },\n    {\n      id: '2',\n      name: 'Contão Clara',\n      response_time: '60:00',\n      resolution_time: '60:00',\n      status: 'Ativo',\n      priority: 'Média',\n      department: 'Custos',\n      subcategories: [\n        {\n          id: '2-1',\n          name: 'Solicitar Saldo',\n          response_time: '60:00',\n          resolution_time: '60:00',\n          status: 'Ativo',\n          priority: 'Baixa',\n          department: 'Custos'\n        },\n        {\n          id: '2-2',\n          name: 'Solicitar Cartão',\n          response_time: '60:00',\n          resolution_time: '60:00',\n          status: 'Ativo',\n          priority: 'Planejado',\n          department: 'Custos'\n        }\n      ]\n    },\n    {\n      id: '3',\n      name: 'Reembolso Protheus',\n      response_time: '60:00',\n      resolution_time: '60:00',\n      status: 'Ativo',\n      priority: 'Baixa',\n      department: 'Custos',\n      subcategories: [\n        {\n          id: '3-1',\n          name: 'Solicitar Aprovação',\n          response_time: '60:00',\n          resolution_time: '60:00',\n          status: 'Ativo',\n          priority: 'Baixa',\n          department: 'Custos'\n        }\n      ]\n    },\n    {\n      id: '4',\n      name: 'Departamento Pessoal',\n      response_time: '02:00',\n      resolution_time: '09:00',\n      status: 'Ativo',\n      priority: 'Não Pausar',\n      department: 'Tecnologia'\n    },\n    {\n      id: '5',\n      name: 'Outras Solicitações',\n      response_time: '05:00',\n      resolution_time: '27:00',\n      status: 'Ativo',\n      priority: 'Não Pausar',\n      department: 'Tecnologia',\n      subcategories: [\n        {\n          id: '5-1',\n          name: 'Alteração cadastral',\n          response_time: '05:00',\n          resolution_time: '27:00',\n          status: 'Ativo',\n          priority: 'Não Pausar',\n          department: 'Tecnologia'\n        },\n        {\n          id: '5-2',\n          name: 'Relatórios diversos',\n          response_time: '02:00',\n          resolution_time: '09:00',\n          status: 'Ativo',\n          priority: 'Não Pausar',\n          department: 'Tecnologia'\n        }\n      ]\n    },\n    {\n      id: '6',\n      name: 'Ponto',\n      response_time: '05:00',\n      resolution_time: '18:00',\n      status: 'Ativo',\n      priority: 'Não Pausar',\n      department: 'Tecnologia'\n    }\n  ]);\n\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);\n  const [isCreateMode, setIsCreateMode] = useState(false);\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n\n  const toggleExpanded = (categoryId: string) => {\n    const newExpanded = new Set(expandedCategories);\n    if (newExpanded.has(categoryId)) {\n      newExpanded.delete(categoryId);\n    } else {\n      newExpanded.add(categoryId);\n    }\n    setExpandedCategories(newExpanded);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'Baixa': return 'bg-green-100 text-green-800 border-green-200';\n      case 'Média': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Alta': return 'bg-red-100 text-red-800 border-red-200';\n      case 'Planejado': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'Não Pausar': return 'bg-purple-100 text-purple-800 border-purple-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    return status === 'Ativo' \n      ? 'bg-green-100 text-green-800 border-green-200'\n      : 'bg-red-100 text-red-800 border-red-200';\n  };\n\n  const renderCategoryRow = (category: Category, level = 0) => {\n    const hasSubcategories = category.subcategories && category.subcategories.length > 0;\n    const isExpanded = expandedCategories.has(category.id);\n\n    return (\n      <React.Fragment key={category.id}>\n        <tr className=\"border-b border-gray-200 hover:bg-gray-50\">\n          <td className=\"px-4 py-3\">\n            <div className=\"flex items-center space-x-2\" style={{ paddingLeft: `${level * 20}px` }}>\n              {hasSubcategories && (\n                <button\n                  onClick={() => toggleExpanded(category.id)}\n                  className=\"w-4 h-4 flex items-center justify-center text-gray-400 hover:text-gray-600\"\n                >\n                  {isExpanded ? '▼' : '▶'}\n                </button>\n              )}\n              <span className={`font-medium ${level > 0 ? 'text-sm' : ''}`}>\n                {category.name}\n              </span>\n            </div>\n          </td>\n          <td className=\"px-4 py-3 text-center\">\n            <span className=\"font-mono text-sm\">{category.response_time}</span>\n          </td>\n          <td className=\"px-4 py-3 text-center\">\n            <span className=\"font-mono text-sm\">{category.resolution_time}</span>\n          </td>\n          <td className=\"px-4 py-3 text-center\">\n            <Badge className={getStatusColor(category.status)}>\n              {category.status}\n            </Badge>\n          </td>\n          <td className=\"px-4 py-3 text-center\">\n            <Badge className={getPriorityColor(category.priority)}>\n              {category.priority}\n            </Badge>\n          </td>\n          <td className=\"px-4 py-3 text-center text-sm text-gray-600\">\n            {category.department}\n          </td>\n          <td className=\"px-4 py-3\">\n            <div className=\"flex items-center justify-center space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedCategory(category)}\n                className=\"w-8 h-8 p-0 text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n              >\n                <Edit2 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"w-8 h-8 p-0 text-gray-400 hover:text-gray-600 hover:bg-gray-50\"\n              >\n                <Users className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"w-8 h-8 p-0 text-green-600 hover:text-green-800 hover:bg-green-50\"\n              >\n                <Target className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </td>\n        </tr>\n        {hasSubcategories && isExpanded && \n          category.subcategories!.map(subcat => renderCategoryRow(subcat, level + 1))\n        }\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Catálogo de Categorias</h1>\n          <p className=\"text-gray-600 mt-1\">Gerencie categorias e subcategorias com SLA definido</p>\n        </div>\n        <Button \n          onClick={() => setIsCreateMode(true)}\n          className=\"bg-green-600 hover:bg-green-700 text-white\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Nova categoria\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Label>Categoria</Label>\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas</SelectItem>\n                  <SelectItem value=\"custos\">Custos</SelectItem>\n                  <SelectItem value=\"tecnologia\">Tecnologia</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Label>Status</Label>\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"ativo\">Ativo</SelectItem>\n                  <SelectItem value=\"inativo\">Inativo</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Label>Prioridade</Label>\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas</SelectItem>\n                  <SelectItem value=\"baixa\">Baixa</SelectItem>\n                  <SelectItem value=\"media\">Média</SelectItem>\n                  <SelectItem value=\"alta\">Alta</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Button variant=\"outline\">\n              Filtrar\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Categories Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Categoria</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Resposta</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Solução</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Status</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Prioridade</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Mesa</th>\n                  <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">Ações</th>\n                </tr>\n              </thead>\n              <tbody>\n                {categories.map(category => renderCategoryRow(category))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Category Edit Modal */}\n      {(selectedCategory || isCreateMode) && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">\n                {isCreateMode ? 'Nova Categoria' : 'Editar Categoria'}\n              </h2>\n              <Button\n                variant=\"ghost\"\n                onClick={() => {\n                  setSelectedCategory(null);\n                  setIsCreateMode(false);\n                }}\n              >\n                ×\n              </Button>\n            </div>\n\n            <form className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nome da Categoria</Label>\n                  <Input\n                    id=\"name\"\n                    defaultValue={selectedCategory?.name || ''}\n                    placeholder=\"Nome da categoria\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"department\">Departamento</Label>\n                  <Select defaultValue={selectedCategory?.department || ''}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar departamento\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"custos\">Custos</SelectItem>\n                      <SelectItem value=\"tecnologia\">Tecnologia</SelectItem>\n                      <SelectItem value=\"rh\">Recursos Humanos</SelectItem>\n                      <SelectItem value=\"financeiro\">Financeiro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"response_time\">Tempo de Resposta (hh:mm)</Label>\n                  <Input\n                    id=\"response_time\"\n                    defaultValue={selectedCategory?.response_time || ''}\n                    placeholder=\"60:00\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"resolution_time\">Tempo de Solução (hh:mm)</Label>\n                  <Input\n                    id=\"resolution_time\"\n                    defaultValue={selectedCategory?.resolution_time || ''}\n                    placeholder=\"60:00\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"priority\">Prioridade</Label>\n                  <Select defaultValue={selectedCategory?.priority || ''}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar prioridade\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Baixa\">Baixa</SelectItem>\n                      <SelectItem value=\"Média\">Média</SelectItem>\n                      <SelectItem value=\"Alta\">Alta</SelectItem>\n                      <SelectItem value=\"Planejado\">Planejado</SelectItem>\n                      <SelectItem value=\"Não Pausar\">Não Pausar</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center space-x-2 mt-6\">\n                  <Switch\n                    id=\"status\"\n                    defaultChecked={selectedCategory?.status === 'Ativo'}\n                  />\n                  <Label htmlFor=\"status\">Categoria Ativa</Label>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSelectedCategory(null);\n                    setIsCreateMode(false);\n                  }}\n                >\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  {isCreateMode ? 'Criar' : 'Salvar'}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Categories;","size_bytes":15933},"client/src/components/TicketModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Eye, Edit, Save, X, Paperclip, MessageCircle, Clock, User, \n  FileText, Image, Download, Upload, Calendar, AlertCircle,\n  CheckCircle, Pause, Play, MoreHorizontal, Send\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\n\ninterface TicketModalProps {\n  ticket: any;\n  children: React.ReactNode;\n  onUpdate?: (ticket: any) => void;\n}\n\nexport function TicketModal({ ticket, children, onUpdate }: TicketModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTicket, setEditedTicket] = useState(ticket);\n  const [newComment, setNewComment] = useState('');\n  const [newTag, setNewTag] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar comentários do ticket\n  const { data: comments, isLoading: commentsLoading } = useQuery<any[]>({\n    queryKey: ['/api/tickets', ticket.id, 'comments'],\n    enabled: isOpen && !!ticket.id,\n  });\n\n  // Buscar usuários para saber quem está logado\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n    enabled: isOpen,\n  });\n\n  // Buscar configurações de status e prioridade\n  const { data: statusConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/status'],\n    enabled: isOpen,\n  });\n\n  const { data: priorityConfigs } = useQuery<any[]>({\n    queryKey: ['/api/config/priority'],\n    enabled: isOpen,\n  });\n\n  // Usuário atual (assumindo que é o primeiro admin para demo)\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Mutation para criar comentário\n  const createCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!currentUser) throw new Error('Usuário não encontrado');\n      \n      return apiRequest(`/api/tickets/${ticket.id}/comments`, 'POST', {\n        content,\n        userId: currentUser.id,\n        ticketId: ticket.id,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets', ticket.id, 'comments'] });\n      setNewComment('');\n      toast({\n        title: 'Comentário adicionado',\n        description: 'Seu comentário foi adicionado com sucesso.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro',\n        description: error.message || 'Erro ao adicionar comentário',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const [attachments, setAttachments] = useState([\n    { id: 1, name: 'screenshot.png', type: 'image', size: '2.4 MB', uploadedAt: new Date(), uploadedBy: 'João Silva' },\n    { id: 2, name: 'log_error.txt', type: 'text', size: '156 KB', uploadedAt: new Date(), uploadedBy: 'Ana Santos' }\n  ]);\n\n  // Mutation para salvar ticket\n  const saveTicketMutation = useMutation({\n    mutationFn: async (ticketData: any) => {\n      return apiRequest(`/api/tickets/${ticket.id}`, 'PATCH', ticketData);\n    },\n    onSuccess: (updatedTicket) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      onUpdate?.(updatedTicket);\n      setIsEditing(false);\n      toast({\n        title: 'Ticket atualizado',\n        description: 'As alterações foram salvas com sucesso.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro ao salvar',\n        description: error.message || 'Erro ao salvar as alterações',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSave = () => {\n    saveTicketMutation.mutate(editedTicket);\n  };\n\n  const handleCancel = () => {\n    setEditedTicket(ticket);\n    setNewTag(''); // Limpar tag input\n    setIsEditing(false);\n  };\n\n  const handleAddComment = () => {\n    if (!newComment.trim()) return;\n    createCommentMutation.mutate(newComment);\n  };\n\n  const handleDownloadAttachment = (attachment: any) => {\n    // Simular download do anexo\n    const link = document.createElement('a');\n    link.href = attachment.url || '#';\n    link.download = attachment.name;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // Toast de confirmação\n    toast({\n      title: 'Download iniciado',\n      description: `Fazendo download de ${attachment.name}`,\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const config = priorityConfigs?.find(p => p.value === priority || p.name === priority);\n    if (config?.color) {\n      // Convert hex to Tailwind classes\n      const colorMap: Record<string, string> = {\n        '#dc2626': 'bg-red-100 text-red-800 border-red-200',\n        '#f59e0b': 'bg-orange-100 text-orange-800 border-orange-200',\n        '#3b82f6': 'bg-blue-100 text-blue-800 border-blue-200',\n        '#10b981': 'bg-green-100 text-green-800 border-green-200',\n      };\n      return colorMap[config.color] || 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n    return 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getStatusColor = (status: string) => {\n    const config = statusConfigs?.find(s => s.value === status || s.name === status);\n    if (config?.color) {\n      // Convert hex to Tailwind classes  \n      const colorMap: Record<string, string> = {\n        '#3b82f6': 'border-blue-200 text-blue-800 bg-blue-50',\n        '#f59e0b': 'border-yellow-200 text-yellow-800 bg-yellow-50',\n        '#10b981': 'border-green-200 text-green-800 bg-green-50',\n        '#6b7280': 'border-gray-200 text-gray-800 bg-gray-50',\n      };\n      return colorMap[config.color] || 'border-gray-200 text-gray-800 bg-gray-50';\n    }\n    return 'border-gray-200 text-gray-800 bg-gray-50';\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      // Aqui você adicionaria a lógica para upload dos arquivos\n      console.log('Uploading files:', files);\n    }\n  };\n\n  // Função para adicionar nova tag\n  const handleAddTag = () => {\n    if (!newTag.trim()) return;\n    \n    const currentTags = editedTicket.tags || [];\n    \n    // Verificar se a tag já existe (não case-sensitive)\n    if (currentTags.some((tag: string) => tag.toLowerCase() === newTag.toLowerCase())) {\n      toast({\n        title: 'Tag já existe',\n        description: 'Esta tag já foi adicionada ao ticket.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    // Adicionar nova tag\n    setEditedTicket({\n      ...editedTicket,\n      tags: [...currentTags, newTag.trim()]\n    });\n    \n    setNewTag('');\n    \n    toast({\n      title: 'Tag adicionada',\n      description: `A tag \"${newTag.trim()}\" foi adicionada com sucesso.`,\n    });\n  };\n\n  // Função para remover tag\n  const handleRemoveTag = (indexToRemove: number) => {\n    const currentTags = editedTicket.tags || [];\n    const tagToRemove = currentTags[indexToRemove];\n    \n    const updatedTags = currentTags.filter((_: string, index: number) => index !== indexToRemove);\n    \n    setEditedTicket({\n      ...editedTicket,\n      tags: updatedTags\n    });\n    \n    toast({\n      title: 'Tag removida',\n      description: `A tag \"${tagToRemove}\" foi removida com sucesso.`,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <DialogTitle className=\"flex items-center space-x-3\">\n            <span className=\"text-xl font-bold\">Ticket {ticket.ticketNumber}</span>\n            <Badge variant=\"outline\" className={`${getStatusColor(editedTicket.status)}`}>\n              {editedTicket.status}\n            </Badge>\n            <Badge variant=\"outline\" className={`${getPriorityColor(editedTicket.priority)}`}>\n              {editedTicket.priority}\n            </Badge>\n          </DialogTitle>\n          <div className=\"flex items-center space-x-2\">\n            {isEditing ? (\n              <>\n                <Button size=\"sm\" onClick={handleSave} disabled={saveTicketMutation.isPending}>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveTicketMutation.isPending ? 'Salvando...' : 'Salvar'}\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={handleCancel}>\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancelar\n                </Button>\n              </>\n            ) : (\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setIsEditing(true)}>\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Editar\n              </Button>\n            )}\n          </div>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"details\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\n            <TabsTrigger value=\"comments\">Comentários</TabsTrigger>\n            <TabsTrigger value=\"attachments\">Anexos</TabsTrigger>\n            <TabsTrigger value=\"history\">Histórico</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"details\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Informações Principais */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Informações Principais</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Título</Label>\n                    {isEditing ? (\n                      <Input\n                        value={editedTicket.subject}\n                        onChange={(e) => setEditedTicket({...editedTicket, subject: e.target.value})}\n                        className=\"mt-1\"\n                      />\n                    ) : (\n                      <p className=\"mt-1 text-sm text-gray-900\">{editedTicket.subject}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Descrição</Label>\n                    {isEditing ? (\n                      <Textarea\n                        value={editedTicket.description || ''}\n                        onChange={(e) => setEditedTicket({...editedTicket, description: e.target.value})}\n                        className=\"mt-1\"\n                        rows={3}\n                      />\n                    ) : (\n                      <p className=\"mt-1 text-sm text-gray-700\">{editedTicket.description}</p>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Status</Label>\n                      {isEditing ? (\n                        <Select \n                          value={editedTicket.status} \n                          onValueChange={(value) => setEditedTicket({...editedTicket, status: value})}\n                        >\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {statusConfigs?.map((status) => (\n                              <SelectItem key={status.id} value={status.value}>\n                                {status.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <Badge variant=\"outline\" className={`mt-1 ${getStatusColor(editedTicket.status)}`}>\n                          {editedTicket.status}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm font-medium\">Prioridade</Label>\n                      {isEditing ? (\n                        <Select \n                          value={editedTicket.priority} \n                          onValueChange={(value) => setEditedTicket({...editedTicket, priority: value})}\n                        >\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {priorityConfigs?.map((priority) => (\n                              <SelectItem key={priority.id} value={priority.value}>\n                                {priority.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <Badge variant=\"outline\" className={`mt-1 ${getPriorityColor(editedTicket.priority)}`}>\n                          {editedTicket.priority}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Progresso</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Concluído</span>\n                        <span>{editedTicket.progress}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-500 h-2 rounded-full transition-all\"\n                          style={{ width: `${editedTicket.progress}%` }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Atribuições */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Atribuições</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Responsável</Label>\n                    <div className=\"mt-2 flex items-center space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                          {editedTicket.assignedToUser?.name?.charAt(0) || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"text-sm font-medium\">{editedTicket.assignedToUser?.name || 'Não atribuído'}</p>\n                        <p className=\"text-xs text-gray-500\">{editedTicket.department?.name || 'Sem departamento'}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Solicitante</Label>\n                    <p className=\"mt-1 text-sm text-gray-700\">{editedTicket.createdByUser?.name || 'Desconhecido'}</p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Departamento</Label>\n                    <p className=\"mt-1 text-sm text-gray-700\">{editedTicket.department?.name || 'Sem departamento'}</p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Data de Criação</Label>\n                    <div className=\"mt-1 flex items-center space-x-2\">\n                      <Calendar className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-sm text-gray-700\">{new Date(editedTicket.createdAt).toLocaleDateString('pt-BR')}</span>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium\">Tags</Label>\n                    {isEditing ? (\n                      <div className=\"mt-2 space-y-2\">\n                        {/* Tags existentes - editáveis */}\n                        <div className=\"flex flex-wrap gap-1\">\n                          {editedTicket.tags?.map((tag: string, index: number) => (\n                            <Badge \n                              key={index} \n                              variant=\"secondary\" \n                              className=\"text-xs flex items-center gap-1 pr-1\"\n                            >\n                              {tag}\n                              <button\n                                type=\"button\"\n                                onClick={() => handleRemoveTag(index)}\n                                className=\"ml-1 text-gray-500 hover:text-red-500 transition-colors\"\n                                title=\"Remover tag\"\n                              >\n                                <X className=\"w-3 h-3\" />\n                              </button>\n                            </Badge>\n                          )) || []}\n                        </div>\n                        \n                        {/* Input para adicionar nova tag */}\n                        <div className=\"flex items-center space-x-2\">\n                          <Input\n                            type=\"text\"\n                            placeholder=\"Adicionar nova tag...\"\n                            value={newTag}\n                            onChange={(e) => setNewTag(e.target.value)}\n                            onKeyPress={(e) => {\n                              if (e.key === 'Enter') {\n                                e.preventDefault();\n                                handleAddTag();\n                              }\n                            }}\n                            className=\"flex-1\"\n                          />\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            onClick={handleAddTag}\n                            disabled={!newTag.trim()}\n                            className=\"px-3\"\n                          >\n                            Adicionar\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      /* Modo visualização - somente leitura */\n                      <div className=\"mt-1 flex flex-wrap gap-1\">\n                        {editedTicket.tags?.map((tag: string, index: number) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        )) || <span className=\"text-sm text-gray-500\">Nenhuma tag</span>}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"comments\" className=\"space-y-4\">\n            {/* Adicionar Comentário */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Adicionar Comentário</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Textarea\n                  placeholder=\"Escreva seu comentário...\"\n                  value={newComment}\n                  onChange={(e) => setNewComment(e.target.value)}\n                  rows={3}\n                />\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center space-x-2\">\n                    <input type=\"checkbox\" id=\"internal\" className=\"rounded\" />\n                    <Label htmlFor=\"internal\" className=\"text-sm\">Comentário interno</Label>\n                  </div>\n                  <Button \n                    onClick={handleAddComment} \n                    disabled={!newComment.trim() || createCommentMutation.isPending}\n                  >\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    {createCommentMutation.isPending ? 'Adicionando...' : 'Adicionar Comentário'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lista de Comentários */}\n            <div className=\"space-y-4\">\n              {commentsLoading ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-2 text-sm text-gray-500\">Carregando comentários...</p>\n                </div>\n              ) : comments && comments.length > 0 ? (\n                comments.map((comment) => (\n                  <Card key={comment.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Avatar className=\"w-8 h-8\">\n                          <AvatarFallback className=\"bg-blue-100 text-blue-600 text-xs\">\n                            {comment.user?.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <span className=\"text-sm font-medium\">{comment.user?.name || 'Usuário'}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              {format(new Date(comment.createdAt), \"dd 'de' MMMM 'às' HH:mm\", { locale: ptBR })}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-700\">{comment.content}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <MessageCircle className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <p className=\"mt-2 text-sm text-gray-500\">Nenhum comentário ainda</p>\n                  <p className=\"text-xs text-gray-400\">Seja o primeiro a comentar neste ticket</p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"attachments\" className=\"space-y-4\">\n            {/* Upload de Anexos */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Adicionar Anexos</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <div className=\"mt-2\">\n                    <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                      <span className=\"text-sm font-medium text-blue-600 hover:text-blue-500\">\n                        Clique para fazer upload\n                      </span>\n                      <span className=\"text-sm text-gray-500\"> ou arraste arquivos aqui</span>\n                    </label>\n                    <input\n                      id=\"file-upload\"\n                      type=\"file\"\n                      multiple\n                      className=\"hidden\"\n                      onChange={handleFileUpload}\n                    />\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    PNG, JPG, PDF até 10MB\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lista de Anexos */}\n            <div className=\"space-y-3\">\n              {attachments.map((attachment) => (\n                <Card key={attachment.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-2 bg-gray-100 rounded\">\n                          {attachment.type === 'image' ? (\n                            <Image className=\"w-5 h-5 text-blue-600\" />\n                          ) : (\n                            <FileText className=\"w-5 h-5 text-gray-600\" />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium\">{attachment.name}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {attachment.size} • {attachment.uploadedBy} • \n                            {format(attachment.uploadedAt, \"dd/MM/yyyy HH:mm\")}\n                          </p>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleDownloadAttachment(attachment)}\n                      >\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-4\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"p-2 bg-green-100 rounded-full\">\n                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Ticket criado</p>\n                  <p className=\"text-xs text-gray-500\">Por Cliente Opus • 17/12/2024 10:30</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <User className=\"w-4 h-4 text-blue-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Ticket atribuído para João Silva</p>\n                  <p className=\"text-xs text-gray-500\">Por Sistema • 17/12/2024 10:35</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"p-2 bg-yellow-100 rounded-full\">\n                  <Play className=\"w-4 h-4 text-yellow-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Status alterado para \"Atendendo\"</p>\n                  <p className=\"text-xs text-gray-500\">Por João Silva • 17/12/2024 11:00</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"p-2 bg-purple-100 rounded-full\">\n                  <Paperclip className=\"w-4 h-4 text-purple-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Anexo adicionado: screenshot.png</p>\n                  <p className=\"text-xs text-gray-500\">Por João Silva • 17/12/2024 14:20</p>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":28362},"client/src/pages/SLAConfiguration.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Plus, Edit2, Trash2, Target, Settings } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface SLARule {\n  id: string;\n  name: string;\n  departmentId?: string;\n  departmentName?: string;\n  category?: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  timeHours: number;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport default function SLAConfiguration() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingSLA, setEditingSLA] = useState<SLARule | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    departmentId: '',\n    category: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical',\n    timeHours: 24,\n    isActive: true\n  });\n\n  const [slaType, setSlaType] = useState<'category' | 'department' | 'priority'>('category');\n\n  // Buscar departamentos\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n  });\n\n  // Buscar categorias\n  const { data: categories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Buscar regras SLA do banco de dados\n  const { data: slaRules, isLoading } = useQuery<any[]>({\n    queryKey: ['/api/sla/rules'],\n  });\n\n  // Mutation para criar/atualizar SLA\n  const saveSLAMutation = useMutation({\n    mutationFn: async (data: Partial<SLARule>) => {\n      const method = editingSLA ? 'PUT' : 'POST';\n      const url = editingSLA ? `/api/sla/rules/${editingSLA.id}` : '/api/sla/rules';\n      return apiRequest(url, method, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sla/rules'] });\n      resetForm();\n      toast({\n        title: 'SLA salvo',\n        description: 'Regra SLA foi salva com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao salvar regra SLA.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation para deletar SLA\n  const deleteSLAMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/sla/rules/${id}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sla/rules'] });\n      toast({\n        title: 'SLA removido',\n        description: 'Regra SLA foi removida com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao remover regra SLA.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      departmentId: '',\n      category: '',\n      priority: 'medium',\n      timeHours: 24,\n      isActive: true\n    });\n    setSlaType('category');\n    setEditingSLA(null);\n    setIsCreateModalOpen(false);\n  };\n\n  const handleEdit = (sla: SLARule) => {\n    setEditingSLA(sla);\n    setFormData({\n      name: sla.name,\n      departmentId: sla.departmentId || '',\n      category: sla.category || '',\n      priority: sla.priority,\n      timeHours: sla.timeHours || 24,\n      isActive: sla.isActive\n    });\n    \n    // Determinar o tipo baseado nos campos preenchidos\n    if (sla.departmentId && !sla.category) {\n      setSlaType('department');\n    } else if (sla.category && !sla.departmentId) {\n      setSlaType('category');\n    } else {\n      setSlaType('priority');\n    }\n    \n    setIsCreateModalOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validação baseada no tipo de SLA\n    if (slaType === 'category' && !formData.category) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"Categoria é obrigatória para SLA por categoria\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (slaType === 'department' && !formData.departmentId) {\n      toast({\n        title: \"Erro de validação\", \n        description: \"Departamento é obrigatório para SLA por departamento\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (slaType === 'priority' && !formData.priority) {\n      toast({\n        title: \"Erro de validação\", \n        description: \"Prioridade é obrigatória para SLA por prioridade\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Preparar dados baseado no tipo de SLA\n    const submitData = {\n      name: formData.name,\n      timeHours: formData.timeHours,\n      isActive: formData.isActive,\n      departmentId: slaType === 'department' ? formData.departmentId : null,\n      category: slaType === 'category' ? formData.category : null,\n      priority: slaType === 'priority' ? formData.priority : null\n    };\n    \n    saveSLAMutation.mutate(submitData);\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const colors = {\n      low: 'bg-green-100 text-green-800',\n      medium: 'bg-yellow-100 text-yellow-800',\n      high: 'bg-orange-100 text-orange-800',\n      critical: 'bg-red-100 text-red-800',\n    };\n\n    const labels = {\n      low: 'Baixa',\n      medium: 'Média',\n      high: 'Alta',\n      critical: 'Crítica',\n    };\n\n    return (\n      <Badge className={colors[priority as keyof typeof colors]}>\n        {labels[priority as keyof typeof labels]}\n      </Badge>\n    );\n  };\n\n  const formatTime = (hours: number) => {\n    if (hours < 1) return `${hours * 60}min`;\n    if (hours < 24) return `${hours}h`;\n    return `${Math.floor(hours / 24)}d ${hours % 24}h`;\n  };\n\n  const getSLAType = (sla: SLARule) => {\n    if (sla.departmentId && !sla.category) return 'Por Departamento';\n    if (sla.category && !sla.departmentId) return 'Por Categoria';\n    if (!sla.departmentId && !sla.category) return 'Por Prioridade';\n    return 'Indefinido';\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Configuração de SLAs</h1>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Configure os acordos de nível de serviço por departamento, categoria e prioridade\n          </p>\n        </div>\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nova Regra SLA\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingSLA ? 'Editar Regra SLA' : 'Nova Regra SLA'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nome da Regra</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"Ex: SLA TI - Alta Prioridade\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"slaType\">Tipo de SLA</Label>\n                <Select\n                  value={slaType}\n                  onValueChange={(value: 'category' | 'department' | 'priority') => setSlaType(value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"category\">Por Categoria</SelectItem>\n                    <SelectItem value=\"department\">Por Departamento</SelectItem>\n                    <SelectItem value=\"priority\">Por Prioridade</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {slaType === 'department' && (\n                <div>\n                  <Label htmlFor=\"departmentId\">Departamento *</Label>\n                  <Select\n                    value={formData.departmentId}\n                    onValueChange={(value) => setFormData({...formData, departmentId: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar departamento\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments?.map((dept) => (\n                        <SelectItem key={dept.id} value={dept.id}>\n                          {dept.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {slaType === 'category' && (\n                <div>\n                  <Label htmlFor=\"category\">Categoria *</Label>\n                  <Select\n                    value={formData.category}\n                    onValueChange={(value) => setFormData({...formData, category: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar categoria\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories?.map((cat) => (\n                        <SelectItem key={cat.id} value={cat.name}>\n                          {cat.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {slaType === 'priority' && (\n                <div>\n                  <Label htmlFor=\"priority\">Prioridade *</Label>\n                  <Select\n                    value={formData.priority}\n                    onValueChange={(value: any) => setFormData({...formData, priority: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecionar prioridade\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Baixa</SelectItem>\n                      <SelectItem value=\"medium\">Média</SelectItem>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                      <SelectItem value=\"critical\">Crítica</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"timeHours\">Tempo SLA (horas)</Label>\n                <Input\n                  id=\"timeHours\"\n                  type=\"number\"\n                  step=\"0.5\"\n                  min=\"1\"\n                  value={formData.timeHours}\n                  onChange={(e) => setFormData({...formData, timeHours: parseFloat(e.target.value)})}\n                  required\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={saveSLAMutation.isPending}>\n                  {saveSLAMutation.isPending ? 'Salvando...' : editingSLA ? 'Atualizar' : 'Criar'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"space-y-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5\" />\n              <span>Regras SLA Configuradas</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"mt-2 text-sm text-gray-500\">Carregando regras SLA...</p>\n              </div>\n            ) : slaRules && slaRules.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>Tipo</TableHead>\n                    <TableHead>Critério</TableHead>\n                    <TableHead>Tempo SLA</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"w-[100px]\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {slaRules.map((sla) => (\n                    <TableRow key={sla.id}>\n                      <TableCell className=\"font-medium\">{sla.name}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{getSLAType(sla)}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        {sla.departmentId && sla.departmentName && sla.departmentName}\n                        {sla.category && sla.category}\n                        {!sla.departmentId && !sla.category && getPriorityBadge(sla.priority)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-1\">\n                          <Target className=\"w-4 h-4 text-green-500\" />\n                          <span>{formatTime(sla.timeHours)}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={sla.isActive ? 'default' : 'secondary'}>\n                          {sla.isActive ? 'Ativo' : 'Inativo'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"w-8 h-8\"\n                            onClick={() => handleEdit(sla)}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"w-8 h-8 text-red-600 hover:text-red-700\"\n                            onClick={() => deleteSLAMutation.mutate(sla.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Settings className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <p className=\"mt-2 text-sm text-gray-500\">\n                  Nenhuma regra SLA configurada\n                </p>\n                <Button\n                  className=\"mt-4\"\n                  onClick={() => setIsCreateModalOpen(true)}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Criar primeira regra\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16009},"client/src/components/CreateTicketModalNew.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Paperclip, X, Upload } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CreateTicketModalNewProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface DynamicField {\n  id: string;\n  label: string;\n  type: 'text' | 'email' | 'select' | 'textarea' | 'number' | 'tel';\n  placeholder?: string;\n  required?: boolean;\n  options?: string[];\n}\n\n// Configurações de campos dinâmicos por categoria\nconst DYNAMIC_FIELDS_CONFIG: Record<string, DynamicField[]> = {\n  'Suporte Técnico': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true, \n      options: ['Instalação de Software', 'Problemas de Hardware', 'Problemas de Rede', 'Outros'] },\n    { id: 'equipamento', label: 'Equipamento/Sistema', type: 'text', placeholder: 'Ex: Notebook Dell, Sistema XYZ', required: true },\n    { id: 'urgencia_negocio', label: 'Urgência do Negócio', type: 'select', required: true,\n      options: ['Baixa', 'Média', 'Alta', 'Crítica'] }\n  ],\n  'Recursos Humanos': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Férias', 'Licença', 'Benefícios', 'Folha de Pagamento', 'Outros'] },\n    { id: 'cpf_solicitante', label: 'Qual CPF do solicitante?', type: 'text', placeholder: '000.000.000-00', required: true },\n    { id: 'email_solicitante', label: 'Qual e-mail?', type: 'email', placeholder: '(Email) Pressione Enter ou Tab', required: true },\n    { id: 'celular_solicitante', label: 'Número do Celular do solicitante', type: 'tel', required: true },\n    { id: 'centro_custo', label: 'Qual Centro de Custo do solicitante?', type: 'text', required: true },\n    { id: 'superior_direto', label: 'Superior Direto', type: 'text', required: true }\n  ],\n  'Financeiro': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Contas a Pagar', 'Contas a Receber', 'Reembolso', 'Orçamento', 'Outros'] },\n    { id: 'valor_envolvido', label: 'Valor Envolvido', type: 'number', placeholder: 'R$ 0,00', required: true },\n    { id: 'centro_custo', label: 'Centro de Custo', type: 'text', required: true },\n    { id: 'aprovador', label: 'Aprovador Responsável', type: 'text', required: true }\n  ],\n  'Jurídico': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Contrato', 'Assessoria Legal', 'Compliance', 'Outros'] },\n    { id: 'prazo_resposta', label: 'Prazo para Resposta', type: 'select', required: true,\n      options: ['24 horas', '48 horas', '1 semana', '2 semanas', 'Não urgente'] },\n    { id: 'area_direito', label: 'Área do Direito', type: 'select', required: true,\n      options: ['Trabalhista', 'Tributário', 'Civil', 'Empresarial', 'Outros'] }\n  ],\n  'Marketing': [\n    { id: 'tipo_ticket', label: 'Tipo de Ticket', type: 'select', required: true,\n      options: ['Campanha', 'Material Gráfico', 'Evento', 'Mídias Sociais', 'Outros'] },\n    { id: 'prazo_entrega', label: 'Prazo de Entrega', type: 'text', placeholder: 'Ex: 15 dias', required: true },\n    { id: 'publico_alvo', label: 'Público Alvo', type: 'text', required: true },\n    { id: 'orcamento_estimado', label: 'Orçamento Estimado', type: 'number', placeholder: 'R$ 0,00' }\n  ]\n};\n\nexport default function CreateTicketModalNew({ isOpen, onClose }: CreateTicketModalNewProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Estados do formulário\n  const [formData, setFormData] = useState({\n    subject: '',\n    description: '',\n    requesterDepartment: '',\n    primaryCategory: '',\n    secondaryCategory: '',\n    requesterName: '',\n    requesterEmail: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical',\n    dynamicFields: {} as Record<string, string>\n  });\n  \n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [subcategories, setSubcategories] = useState<string[]>([]);\n\n  // Buscar dados necessários\n  const { data: users } = useQuery<any[]>({\n    queryKey: ['/api/users'],\n    enabled: isOpen,\n  });\n\n  const { data: departments } = useQuery<any[]>({\n    queryKey: ['/api/departments'],\n    enabled: isOpen,\n  });\n\n  const { data: categories } = useQuery<any[]>({\n    queryKey: ['/api/categories'],\n    enabled: isOpen,\n  });\n\n  // Usuário atual\n  const currentUser = users?.find(u => u.role === 'admin') || users?.[0];\n\n  // Atualizar subcategorias quando categoria primária muda\n  useEffect(() => {\n    if (formData.primaryCategory) {\n      // Simular subcategorias baseadas na categoria primária\n      const mockSubcategories: Record<string, string[]> = {\n        'Tecnologia': ['Suporte Técnico', 'Desenvolvimento', 'Infraestrutura'],\n        'Custos': ['Cartão Clara', 'Reembolso Protheus'],\n        'Departamento Pessoal': ['Folha de Pagamento', 'Benefícios', 'Admissão/Demissão'],\n        'Jurídico': ['Contratos', 'Assessoria Legal', 'Compliance'],\n        'Marketing': ['Campanhas', 'Material Gráfico', 'Eventos'],\n        'Qualidade': ['Auditoria', 'Processos', 'Melhorias']\n      };\n      \n      setSubcategories(mockSubcategories[formData.primaryCategory] || []);\n      setFormData(prev => ({ \n        ...prev, \n        secondaryCategory: '',\n        dynamicFields: {} // Reset dynamic fields when category changes\n      }));\n    }\n  }, [formData.primaryCategory]);\n\n  // Obter campos dinâmicos baseados na categoria secundária\n  const getDynamicFields = (): DynamicField[] => {\n    if (!formData.secondaryCategory) return [];\n    return DYNAMIC_FIELDS_CONFIG[formData.secondaryCategory] || [];\n  };\n\n  // Mutation para criar ticket\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!currentUser) {\n        throw new Error('Usuário não encontrado');\n      }\n\n      const ticketData = {\n        subject: data.subject,\n        description: data.description,\n        priority: data.priority,\n        category: data.secondaryCategory,\n        responsibleDepartmentId: departments?.find(d => d.name === data.primaryCategory)?.id || null,\n        requesterDepartmentId: currentUser.departmentId || null,\n        createdBy: currentUser.id,\n        assignedTo: null,\n        customFields: {\n          requesterName: data.requesterName,\n          requesterEmail: data.requesterEmail,\n          ...data.dynamicFields\n        }\n      };\n\n      return apiRequest('/api/tickets', 'POST', ticketData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Sucesso',\n        description: 'Ticket criado com sucesso',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n      handleReset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Erro',\n        description: error.message || 'Erro ao criar ticket',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleReset = () => {\n    setFormData({\n      subject: '',\n      description: '',\n      requesterDepartment: '',\n      primaryCategory: '',\n      secondaryCategory: '',\n      requesterName: '',\n      requesterEmail: '',\n      priority: 'medium',\n      dynamicFields: {}\n    });\n    setSelectedFiles([]);\n    setSubcategories([]);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validações básicas\n    if (!formData.subject.trim()) {\n      toast({ title: 'Erro', description: 'Assunto é obrigatório', variant: 'destructive' });\n      return;\n    }\n    \n    if (!formData.description.trim()) {\n      toast({ title: 'Erro', description: 'Descrição é obrigatória', variant: 'destructive' });\n      return;\n    }\n    \n    if (!formData.primaryCategory) {\n      toast({ title: 'Erro', description: 'Categoria Primária é obrigatória', variant: 'destructive' });\n      return;\n    }\n    \n    if (!formData.secondaryCategory) {\n      toast({ title: 'Erro', description: 'Categoria Secundária é obrigatória', variant: 'destructive' });\n      return;\n    }\n\n    // Validar campos dinâmicos obrigatórios\n    const dynamicFields = getDynamicFields();\n    for (const field of dynamicFields) {\n      if (field.required && !formData.dynamicFields[field.id]) {\n        toast({ \n          title: 'Erro', \n          description: `${field.label} é obrigatório`, \n          variant: 'destructive' \n        });\n        return;\n      }\n    }\n\n    createTicketMutation.mutate(formData);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleDynamicFieldChange = (fieldId: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      dynamicFields: {\n        ...prev.dynamicFields,\n        [fieldId]: value\n      }\n    }));\n  };\n\n  const primaryCategories = ['Custos', 'Departamento Pessoal', 'Jurídico', 'Marketing', 'Qualidade', 'Tecnologia'];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Novo Ticket\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Assunto */}\n          <div>\n            <Label htmlFor=\"subject\" className=\"text-sm font-medium\">\n              Assunto <span className=\"text-red-500\">*</span>\n            </Label>\n            <Input\n              id=\"subject\"\n              value={formData.subject}\n              onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n              className=\"mt-1\"\n              required\n            />\n          </div>\n\n          {/* Descrição */}\n          <div>\n            <Label htmlFor=\"description\" className=\"text-sm font-medium\">\n              Descrição <span className=\"text-red-500\">*</span>\n            </Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"mt-1 min-h-[100px]\"\n              required\n            />\n          </div>\n\n          {/* Setor do Solicitante */}\n          <div>\n            <Label htmlFor=\"requesterDepartment\" className=\"text-sm font-medium\">\n              Setor do Solicitante <span className=\"text-red-500\">*</span>\n            </Label>\n            <Select\n              value={formData.requesterDepartment}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, requesterDepartment: value }))}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments?.map((dept) => (\n                  <SelectItem key={dept.id} value={dept.name}>\n                    {dept.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Categoria Primária */}\n          <div>\n            <Label htmlFor=\"primaryCategory\" className=\"text-sm font-medium\">\n              Categoria Primária <span className=\"text-red-500\">*</span>\n            </Label>\n            <Select\n              value={formData.primaryCategory}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, primaryCategory: value }))}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione...\" />\n              </SelectTrigger>\n              <SelectContent>\n                <div className=\"p-2\">\n                  <Input placeholder=\"Pesquisar\" className=\"mb-2\" />\n                </div>\n                {primaryCategories.map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Categoria Secundária */}\n          <div>\n            <Label htmlFor=\"secondaryCategory\" className=\"text-sm font-medium\">\n              Categoria Secundária <span className=\"text-red-500\">*</span>\n              <span className=\"text-red-600 text-xs ml-2\">\n                (Para abertura do ticket, é obrigatório a seleção do último nível das categorias que estão sinalizadas na cor verde)\n              </span>\n            </Label>\n            <Select\n              value={formData.secondaryCategory}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, secondaryCategory: value }))}\n              disabled={!formData.primaryCategory}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder={\n                  formData.primaryCategory ? \"Selecione...\" : \"Selecione uma categoria primária antes\"\n                } />\n              </SelectTrigger>\n              <SelectContent>\n                <div className=\"p-2\">\n                  <Input placeholder=\"Pesquisar\" className=\"mb-2\" />\n                </div>\n                {subcategories.map((subcat) => (\n                  <SelectItem key={subcat} value={subcat}>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n                      {subcat}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Nome do Solicitante */}\n          <div>\n            <Label htmlFor=\"requesterName\" className=\"text-sm font-medium\">\n              Nome do Solicitante (Completo) <span className=\"text-red-500\">*</span>\n            </Label>\n            <Input\n              id=\"requesterName\"\n              value={formData.requesterName}\n              onChange={(e) => setFormData(prev => ({ ...prev, requesterName: e.target.value }))}\n              className=\"mt-1\"\n              placeholder=\"Felipe\"\n              required\n            />\n          </div>\n\n          {/* Contato Email */}\n          <div>\n            <Label htmlFor=\"requesterEmail\" className=\"text-sm font-medium\">\n              Contato Email <span className=\"text-red-500\">*</span>\n              <span className=\"text-red-600 text-xs ml-2\">\n                (Após digitar o e-mail, pressione Enter ou Tab)\n              </span>\n            </Label>\n            <div className=\"mt-1 flex items-center space-x-2\">\n              <Badge variant=\"secondary\" className=\"bg-blue-900 text-white text-xs px-2 py-1\">\n                FELIPE.LACERDA@GRUPOOPUS.COM\n              </Badge>\n              <Input\n                id=\"requesterEmail\"\n                type=\"email\"\n                value={formData.requesterEmail}\n                onChange={(e) => setFormData(prev => ({ ...prev, requesterEmail: e.target.value }))}\n                placeholder=\"(Email) Pressione Enter ou Tab\"\n                className=\"flex-1\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Campos Dinâmicos */}\n          {getDynamicFields().map((field) => (\n            <div key={field.id}>\n              <Label htmlFor={field.id} className=\"text-sm font-medium\">\n                {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n              </Label>\n              {field.type === 'select' ? (\n                <Select\n                  value={formData.dynamicFields[field.id] || ''}\n                  onValueChange={(value) => handleDynamicFieldChange(field.id, value)}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Selecione uma opção\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {field.options?.map((option) => (\n                      <SelectItem key={option} value={option}>\n                        {option}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              ) : field.type === 'textarea' ? (\n                <Textarea\n                  id={field.id}\n                  value={formData.dynamicFields[field.id] || ''}\n                  onChange={(e) => handleDynamicFieldChange(field.id, e.target.value)}\n                  placeholder={field.placeholder}\n                  className=\"mt-1\"\n                  required={field.required}\n                />\n              ) : (\n                <Input\n                  id={field.id}\n                  type={field.type}\n                  value={formData.dynamicFields[field.id] || ''}\n                  onChange={(e) => handleDynamicFieldChange(field.id, e.target.value)}\n                  placeholder={field.placeholder}\n                  className=\"mt-1\"\n                  required={field.required}\n                />\n              )}\n            </div>\n          ))}\n\n          {/* Prioridade */}\n          <div>\n            <Label htmlFor=\"priority\" className=\"text-sm font-medium\">Prioridade</Label>\n            <Select\n              value={formData.priority}\n              onValueChange={(value: any) => setFormData(prev => ({ ...prev, priority: value }))}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione uma opção\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Baixa</SelectItem>\n                <SelectItem value=\"medium\">Média</SelectItem>\n                <SelectItem value=\"high\">Alta</SelectItem>\n                <SelectItem value=\"critical\">Crítica</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Anexos */}\n          <div>\n            <Label className=\"text-sm font-medium\">\n              Anexo <Badge variant=\"outline\" className=\"ml-2\">i</Badge>\n            </Label>\n            <div className=\"mt-2 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n              <input\n                type=\"file\"\n                multiple\n                onChange={handleFileSelect}\n                className=\"hidden\"\n                id=\"file-upload\"\n              />\n              <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                <Upload className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                <p className=\"text-sm text-gray-600\">Clique aqui para carregar seu arquivo.</p>\n              </label>\n            </div>\n            \n            {/* Lista de arquivos selecionados */}\n            {selectedFiles.length > 0 && (\n              <div className=\"mt-2 space-y-2\">\n                {selectedFiles.map((file, index) => (\n                  <div key={index} className=\"flex items-center justify-between bg-gray-50 p-2 rounded\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Paperclip className=\"h-4 w-4 text-gray-500\" />\n                      <span className=\"text-sm\">{file.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({(file.size / 1024 / 1024).toFixed(1)} MB)\n                      </span>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(index)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Botões */}\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={createTicketMutation.isPending}>\n              {createTicketMutation.isPending ? 'Criando...' : 'Criar Ticket'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":21052},"client/src/components/TicketFinalizationModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\n\ninterface TicketFinalizationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (finalizationData: FinalizationData) => void;\n  ticket: {\n    id: string;\n    subject: string;\n    createdAt?: string;\n  };\n}\n\ninterface FinalizationData {\n  comment: string;\n  hoursSpent: string;\n  equipmentRemoved: string;\n  materialsUsed: string;\n  extraCharge: boolean;\n  chargeType: string;\n}\n\nexport default function TicketFinalizationModal({ \n  isOpen, \n  onClose, \n  onConfirm, \n  ticket \n}: TicketFinalizationModalProps) {\n  const [formData, setFormData] = useState<FinalizationData>({\n    comment: '',\n    hoursSpent: '04:30',\n    equipmentRemoved: '',\n    materialsUsed: '',\n    extraCharge: false,\n    chargeType: 'Selecione'\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      await onConfirm(formData);\n      onClose();\n    } catch (error) {\n      console.error('Erro ao finalizar ticket:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const updateFormField = (field: keyof FinalizationData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-5\">\n      <div \n        className=\"bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-hidden shadow-2xl\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-red-50 to-pink-50\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-bold text-red-600 mb-1\">\n                Finalizar Ticket {ticket.id}\n              </h2>\n              <p className=\"text-sm text-gray-600\">{ticket.subject}</p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <svg className=\"w-5 h-5 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <form onSubmit={handleSubmit} className=\"overflow-y-auto max-h-[calc(90vh-140px)]\">\n          <div className=\"p-6 space-y-6\">\n            \n            {/* Comentário */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Comentário de Finalização *\n              </label>\n              <textarea\n                value={formData.comment}\n                onChange={(e) => updateFormField('comment', e.target.value)}\n                placeholder=\"Descreva como o problema foi resolvido...\"\n                required\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[100px] focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Horas - Travado */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Apontamento de Horas (Calculado automaticamente)\n              </label>\n              <div className=\"flex items-center p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n                <svg className=\"w-5 h-5 text-gray-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <input\n                  type=\"text\"\n                  value={formData.hoursSpent}\n                  readOnly\n                  className=\"bg-transparent border-none text-gray-600 font-semibold cursor-not-allowed flex-1\"\n                />\n              </div>\n            </div>\n\n            {/* Equipamentos */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Equipamentos Retirados\n              </label>\n              <textarea\n                value={formData.equipmentRemoved}\n                onChange={(e) => updateFormField('equipmentRemoved', e.target.value)}\n                placeholder=\"Liste os equipamentos retirados, se houver...\"\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[80px] focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Materiais */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Materiais Utilizados\n              </label>\n              <textarea\n                value={formData.materialsUsed}\n                onChange={(e) => updateFormField('materialsUsed', e.target.value)}\n                placeholder=\"Liste os materiais utilizados...\"\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[80px] focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Cobrança Avulsa */}\n            <div>\n              <label className=\"flex items-center text-sm font-medium text-gray-700 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.extraCharge}\n                  onChange={(e) => updateFormField('extraCharge', e.target.checked)}\n                  className=\"mr-3 w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500\"\n                />\n                Cobrança Avulsa\n              </label>\n              \n              {formData.extraCharge && (\n                <div className=\"mt-3\">\n                  <select\n                    value={formData.chargeType}\n                    onChange={(e) => updateFormField('chargeType', e.target.value)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"Selecione\">Selecione o tipo de cobrança</option>\n                    <option value=\"Serviço Extra\">Serviço Extra</option>\n                    <option value=\"Hora Extra\">Hora Extra</option>\n                    <option value=\"Material Adicional\">Material Adicional</option>\n                    <option value=\"Deslocamento\">Deslocamento</option>\n                  </select>\n                </div>\n              )}\n            </div>\n\n          </div>\n\n          {/* Footer */}\n          <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors\"\n            >\n              Cancelar\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || !formData.comment.trim()}\n              className={`px-6 py-2 rounded-lg font-medium transition-colors ${\n                isSubmitting || !formData.comment.trim()\n                  ? 'bg-gray-400 text-white cursor-not-allowed'\n                  : 'bg-red-600 text-white hover:bg-red-700'\n              }`}\n            >\n              {isSubmitting ? 'Finalizando...' : 'Finalizar Ticket'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":7766},"client/src/pages/ConfigurationPage.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Trash2, Edit, Plus, Save, X, Settings, Palette, Clock } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface StatusConfig {\n  id: string;\n  name: string;\n  value: string;\n  color: string;\n  order: number;\n  isActive: boolean;\n  isDefault: boolean;\n}\n\ninterface PriorityConfig {\n  id: string;\n  name: string;\n  value: string;\n  color: string;\n  slaHours: number;\n  order: number;\n  isActive: boolean;\n  isDefault: boolean;\n}\n\nexport default function ConfigurationPage() {\n  const [statusEditModal, setStatusEditModal] = useState<{ isOpen: boolean; status: StatusConfig | null }>({\n    isOpen: false,\n    status: null\n  });\n  const [priorityEditModal, setPriorityEditModal] = useState<{ isOpen: boolean; priority: PriorityConfig | null }>({\n    isOpen: false,\n    priority: null\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar configurações\n  const { data: statusConfigs = [], isLoading: statusLoading } = useQuery<StatusConfig[]>({\n    queryKey: ['/api/config/status'],\n  });\n\n  const { data: priorityConfigs = [], isLoading: priorityLoading } = useQuery<PriorityConfig[]>({\n    queryKey: ['/api/config/priority'],\n  });\n\n  // Mutations para status\n  const updateStatusMutation = useMutation({\n    mutationFn: async (status: StatusConfig) => {\n      const response = await fetch(`/api/config/status/${status.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(status),\n      });\n      if (!response.ok) throw new Error('Failed to update status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/status'] });\n      setStatusEditModal({ isOpen: false, status: null });\n      toast({\n        title: 'Status atualizado',\n        description: 'Configuração de status salva com sucesso.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Erro',\n        description: 'Erro ao atualizar status.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createStatusMutation = useMutation({\n    mutationFn: async (status: Omit<StatusConfig, 'id'>) => {\n      const response = await fetch('/api/config/status', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(status),\n      });\n      if (!response.ok) throw new Error('Failed to create status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/status'] });\n      setStatusEditModal({ isOpen: false, status: null });\n      toast({\n        title: 'Status criado',\n        description: 'Novo status criado com sucesso.',\n      });\n    },\n  });\n\n  const deleteStatusMutation = useMutation({\n    mutationFn: async (statusId: string) => {\n      const response = await fetch(`/api/config/status/${statusId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/status'] });\n      toast({\n        title: 'Status removido',\n        description: 'Status removido com sucesso.',\n      });\n    },\n  });\n\n  // Mutations para prioridades\n  const updatePriorityMutation = useMutation({\n    mutationFn: async (priority: PriorityConfig) => {\n      const response = await fetch(`/api/config/priority/${priority.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(priority),\n      });\n      if (!response.ok) throw new Error('Failed to update priority');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/priority'] });\n      setPriorityEditModal({ isOpen: false, priority: null });\n      toast({\n        title: 'Prioridade atualizada',\n        description: 'Configuração de prioridade salva com sucesso.',\n      });\n    },\n  });\n\n  const createPriorityMutation = useMutation({\n    mutationFn: async (priority: Omit<PriorityConfig, 'id'>) => {\n      const response = await fetch('/api/config/priority', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(priority),\n      });\n      if (!response.ok) throw new Error('Failed to create priority');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/priority'] });\n      setPriorityEditModal({ isOpen: false, priority: null });\n      toast({\n        title: 'Prioridade criada',\n        description: 'Nova prioridade criada com sucesso.',\n      });\n    },\n  });\n\n  const deletePriorityMutation = useMutation({\n    mutationFn: async (priorityId: string) => {\n      const response = await fetch(`/api/config/priority/${priorityId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete priority');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config/priority'] });\n      toast({\n        title: 'Prioridade removida',\n        description: 'Prioridade removida com sucesso.',\n      });\n    },\n  });\n\n  const getColorPreview = (color: string) => (\n    <div\n      className=\"w-6 h-6 rounded-full border border-gray-300\"\n      style={{ backgroundColor: color }}\n    />\n  );\n\n  const colorOptions = [\n    { value: '#dc2626', label: 'Vermelho', preview: '#dc2626' },\n    { value: '#f59e0b', label: 'Laranja', preview: '#f59e0b' },\n    { value: '#eab308', label: 'Amarelo', preview: '#eab308' },\n    { value: '#10b981', label: 'Verde', preview: '#10b981' },\n    { value: '#3b82f6', label: 'Azul', preview: '#3b82f6' },\n    { value: '#8b5cf6', label: 'Roxo', preview: '#8b5cf6' },\n    { value: '#6b7280', label: 'Cinza', preview: '#6b7280' },\n  ];\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Settings className=\"w-6 h-6\" />\n          Configurações do Sistema\n        </h1>\n        <p className=\"text-gray-600 mt-2\">\n          Gerencie status, prioridades e outras configurações do sistema de tickets.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"status\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"status\">Status de Tickets</TabsTrigger>\n          <TabsTrigger value=\"priority\">Prioridades</TabsTrigger>\n        </TabsList>\n\n        {/* Status Configuration */}\n        <TabsContent value=\"status\" className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Palette className=\"w-5 h-5\" />\n                Configurações de Status\n              </CardTitle>\n              <Dialog open={statusEditModal.isOpen} onOpenChange={(open) => \n                setStatusEditModal({ isOpen: open, status: open ? statusEditModal.status : null })\n              }>\n                <DialogTrigger asChild>\n                  <Button \n                    onClick={() => setStatusEditModal({ \n                      isOpen: true, \n                      status: {\n                        id: '',\n                        name: '',\n                        value: '',\n                        color: '#3b82f6',\n                        order: statusConfigs.length + 1,\n                        isActive: true,\n                        isDefault: false\n                      }\n                    })}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Novo Status\n                  </Button>\n                </DialogTrigger>\n                <StatusEditModal\n                  status={statusEditModal.status}\n                  onSave={(status) => {\n                    if (status.id) {\n                      updateStatusMutation.mutate(status);\n                    } else {\n                      const { id, ...newStatus } = status;\n                      createStatusMutation.mutate(newStatus);\n                    }\n                  }}\n                  colorOptions={colorOptions}\n                />\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              {statusLoading ? (\n                <div>Carregando...</div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {statusConfigs\n                    .sort((a, b) => a.order - b.order)\n                    .map((status) => (\n                    <div key={status.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        {getColorPreview(status.color)}\n                        <div>\n                          <div className=\"font-medium\">{status.name}</div>\n                          <div className=\"text-sm text-gray-500\">Valor: {status.value}</div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {status.isDefault && (\n                            <Badge variant=\"secondary\">Padrão</Badge>\n                          )}\n                          {!status.isActive && (\n                            <Badge variant=\"outline\">Inativo</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setStatusEditModal({ isOpen: true, status })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deleteStatusMutation.mutate(status.id)}\n                          disabled={status.isDefault}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Priority Configuration */}\n        <TabsContent value=\"priority\" className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Configurações de Prioridade\n              </CardTitle>\n              <Dialog open={priorityEditModal.isOpen} onOpenChange={(open) => \n                setPriorityEditModal({ isOpen: open, priority: open ? priorityEditModal.priority : null })\n              }>\n                <DialogTrigger asChild>\n                  <Button \n                    onClick={() => setPriorityEditModal({ \n                      isOpen: true, \n                      priority: {\n                        id: '',\n                        name: '',\n                        value: '',\n                        color: '#3b82f6',\n                        slaHours: 24,\n                        order: priorityConfigs.length + 1,\n                        isActive: true,\n                        isDefault: false\n                      }\n                    })}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nova Prioridade\n                  </Button>\n                </DialogTrigger>\n                <PriorityEditModal\n                  priority={priorityEditModal.priority}\n                  onSave={(priority) => {\n                    if (priority.id) {\n                      updatePriorityMutation.mutate(priority);\n                    } else {\n                      const { id, ...newPriority } = priority;\n                      createPriorityMutation.mutate(newPriority);\n                    }\n                  }}\n                  colorOptions={colorOptions}\n                />\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              {priorityLoading ? (\n                <div>Carregando...</div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {priorityConfigs\n                    .sort((a, b) => a.order - b.order)\n                    .map((priority) => (\n                    <div key={priority.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        {getColorPreview(priority.color)}\n                        <div>\n                          <div className=\"font-medium\">{priority.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Valor: {priority.value} • SLA: {priority.slaHours}h\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {priority.isDefault && (\n                            <Badge variant=\"secondary\">Padrão</Badge>\n                          )}\n                          {!priority.isActive && (\n                            <Badge variant=\"outline\">Inativo</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setPriorityEditModal({ isOpen: true, priority })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deletePriorityMutation.mutate(priority.id)}\n                          disabled={priority.isDefault}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Modal para edição de status\nfunction StatusEditModal({ \n  status, \n  onSave, \n  colorOptions \n}: { \n  status: StatusConfig | null; \n  onSave: (status: StatusConfig) => void; \n  colorOptions: Array<{ value: string; label: string; preview: string }>;\n}) {\n  const [editedStatus, setEditedStatus] = useState<StatusConfig | null>(status);\n\n  React.useEffect(() => {\n    setEditedStatus(status);\n  }, [status]);\n\n  if (!editedStatus) return null;\n\n  return (\n    <DialogContent className=\"max-w-md\">\n      <DialogHeader>\n        <DialogTitle>\n          {editedStatus.id ? 'Editar Status' : 'Novo Status'}\n        </DialogTitle>\n      </DialogHeader>\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"statusName\">Nome</Label>\n          <Input\n            id=\"statusName\"\n            value={editedStatus.name}\n            onChange={(e) => setEditedStatus({ ...editedStatus, name: e.target.value })}\n            placeholder=\"Ex: Em Andamento\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"statusValue\">Valor (identificador)</Label>\n          <Input\n            id=\"statusValue\"\n            value={editedStatus.value}\n            onChange={(e) => setEditedStatus({ ...editedStatus, value: e.target.value })}\n            placeholder=\"Ex: in_progress\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"statusColor\">Cor</Label>\n          <Select\n            value={editedStatus.color}\n            onValueChange={(value) => setEditedStatus({ ...editedStatus, color: value })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {colorOptions.map((color) => (\n                <SelectItem key={color.value} value={color.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: color.preview }}\n                    />\n                    {color.label}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"statusOrder\">Ordem</Label>\n          <Input\n            id=\"statusOrder\"\n            type=\"number\"\n            value={editedStatus.order}\n            onChange={(e) => setEditedStatus({ ...editedStatus, order: parseInt(e.target.value) || 1 })}\n          />\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"statusActive\"\n            checked={editedStatus.isActive}\n            onCheckedChange={(checked) => setEditedStatus({ ...editedStatus, isActive: checked })}\n          />\n          <Label htmlFor=\"statusActive\">Ativo</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"statusDefault\"\n            checked={editedStatus.isDefault}\n            onCheckedChange={(checked) => setEditedStatus({ ...editedStatus, isDefault: checked })}\n          />\n          <Label htmlFor=\"statusDefault\">Padrão</Label>\n        </div>\n        <div className=\"flex justify-end gap-2\">\n          <Button\n            onClick={() => onSave(editedStatus)}\n            disabled={!editedStatus.name || !editedStatus.value}\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Salvar\n          </Button>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}\n\n// Modal para edição de prioridade\nfunction PriorityEditModal({ \n  priority, \n  onSave, \n  colorOptions \n}: { \n  priority: PriorityConfig | null; \n  onSave: (priority: PriorityConfig) => void; \n  colorOptions: Array<{ value: string; label: string; preview: string }>;\n}) {\n  const [editedPriority, setEditedPriority] = useState<PriorityConfig | null>(priority);\n\n  React.useEffect(() => {\n    setEditedPriority(priority);\n  }, [priority]);\n\n  if (!editedPriority) return null;\n\n  return (\n    <DialogContent className=\"max-w-md\">\n      <DialogHeader>\n        <DialogTitle>\n          {editedPriority.id ? 'Editar Prioridade' : 'Nova Prioridade'}\n        </DialogTitle>\n      </DialogHeader>\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"priorityName\">Nome</Label>\n          <Input\n            id=\"priorityName\"\n            value={editedPriority.name}\n            onChange={(e) => setEditedPriority({ ...editedPriority, name: e.target.value })}\n            placeholder=\"Ex: Alta\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"priorityValue\">Valor (identificador)</Label>\n          <Input\n            id=\"priorityValue\"\n            value={editedPriority.value}\n            onChange={(e) => setEditedPriority({ ...editedPriority, value: e.target.value })}\n            placeholder=\"Ex: high\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"priorityColor\">Cor</Label>\n          <Select\n            value={editedPriority.color}\n            onValueChange={(value) => setEditedPriority({ ...editedPriority, color: value })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {colorOptions.map((color) => (\n                <SelectItem key={color.value} value={color.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: color.preview }}\n                    />\n                    {color.label}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"prioritySla\">SLA (horas)</Label>\n          <Input\n            id=\"prioritySla\"\n            type=\"number\"\n            value={editedPriority.slaHours}\n            onChange={(e) => setEditedPriority({ ...editedPriority, slaHours: parseInt(e.target.value) || 24 })}\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"priorityOrder\">Ordem</Label>\n          <Input\n            id=\"priorityOrder\"\n            type=\"number\"\n            value={editedPriority.order}\n            onChange={(e) => setEditedPriority({ ...editedPriority, order: parseInt(e.target.value) || 1 })}\n          />\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"priorityActive\"\n            checked={editedPriority.isActive}\n            onCheckedChange={(checked) => setEditedPriority({ ...editedPriority, isActive: checked })}\n          />\n          <Label htmlFor=\"priorityActive\">Ativo</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"priorityDefault\"\n            checked={editedPriority.isDefault}\n            onCheckedChange={(checked) => setEditedPriority({ ...editedPriority, isDefault: checked })}\n          />\n          <Label htmlFor=\"priorityDefault\">Padrão</Label>\n        </div>\n        <div className=\"flex justify-end gap-2\">\n          <Button\n            onClick={() => onSave(editedPriority)}\n            disabled={!editedPriority.name || !editedPriority.value}\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Salvar\n          </Button>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}","size_bytes":22714}}}